"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _conf = _interopRequireDefault(require("../../v-x-e-table/src/conf"));
var _vXETable = _interopRequireDefault(require("../../v-x-e-table"));
var _size = _interopRequireDefault(require("../../mixins/size"));
var _vn = require("../../tools/vn");
var _log = require("../../tools/log");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var renderDropdowns = function renderDropdowns(h, _vm, item, isBtn) {
  var _e = _vm._e;
  var dropdowns = item.dropdowns;
  if (dropdowns) {
    return dropdowns.map(function (child) {
      return child.visible === false ? _e() : h('vxe-button', {
        on: {
          click: function click(evnt) {
            return isBtn ? _vm.btnEvent(evnt, child) : _vm.tolEvent(evnt, child);
          }
        },
        props: {
          disabled: child.disabled,
          loading: child.loading,
          type: child.type,
          icon: child.icon,
          circle: child.circle,
          round: child.round,
          status: child.status,
          content: child.name
        }
      });
    });
  }
  return [];
};

/**
 * 渲染按钮
 */
function renderBtns(h, _vm) {
  var _e = _vm._e,
    $scopedSlots = _vm.$scopedSlots,
    $xegrid = _vm.$xegrid,
    $xetable = _vm.$xetable,
    _vm$buttons = _vm.buttons,
    buttons = _vm$buttons === void 0 ? [] : _vm$buttons;
  var buttonsSlot = $scopedSlots.buttons;
  if (buttonsSlot) {
    return buttonsSlot.call(_vm, {
      $grid: $xegrid,
      $table: $xetable
    }, h);
  }
  return buttons.map(function (item) {
    var dropdowns = item.dropdowns,
      buttonRender = item.buttonRender;
    var compConf = buttonRender ? _vXETable.default.renderer.get(buttonRender.name) : null;
    if (item.visible === false) {
      return _e();
    }
    if (compConf) {
      var renderToolbarButton = compConf.renderToolbarButton || compConf.renderButton;
      var toolbarButtonClassName = compConf.toolbarButtonClassName;
      var params = {
        $grid: $xegrid,
        $table: $xetable,
        button: item
      };
      if (renderToolbarButton) {
        return h('span', {
          class: ['vxe-button--item', toolbarButtonClassName ? _xeUtils.default.isFunction(toolbarButtonClassName) ? toolbarButtonClassName(params) : toolbarButtonClassName : '']
        }, (0, _vn.getSlotVNs)(renderToolbarButton.call(_vm, h, buttonRender, params)));
      }
    }
    return h('vxe-button', {
      on: {
        click: function click(evnt) {
          return _vm.btnEvent(evnt, item);
        }
      },
      props: {
        disabled: item.disabled,
        loading: item.loading,
        type: item.type,
        icon: item.icon,
        circle: item.circle,
        round: item.round,
        status: item.status,
        content: item.name,
        destroyOnClose: item.destroyOnClose,
        placement: item.placement,
        transfer: item.transfer
      },
      scopedSlots: dropdowns && dropdowns.length ? {
        dropdowns: function dropdowns() {
          return renderDropdowns(h, _vm, item, true);
        }
      } : null
    });
  });
}

/**
 * 渲染右侧工具
 */
function renderRightTools(h, _vm) {
  var _e = _vm._e,
    $scopedSlots = _vm.$scopedSlots,
    $xetable = _vm.$xetable,
    $xegrid = _vm.$xegrid,
    _vm$tools = _vm.tools,
    tools = _vm$tools === void 0 ? [] : _vm$tools;
  var toolsSlot = $scopedSlots.tools;
  if (toolsSlot) {
    return toolsSlot.call(_vm, {
      $table: $xetable,
      $grid: $xegrid
    }, h);
  }
  return tools.map(function (item) {
    var dropdowns = item.dropdowns,
      toolRender = item.toolRender;
    var compConf = toolRender ? _vXETable.default.renderer.get(toolRender.name) : null;
    if (item.visible === false) {
      return _e();
    }
    if (compConf) {
      var renderToolbarTool = compConf.renderToolbarTool;
      if (renderToolbarTool) {
        var toolbarToolClassName = compConf.toolbarToolClassName;
        var params = {
          $table: $xetable,
          $grid: $xegrid,
          tool: item
        };
        return h('span', {
          class: ['vxe-tool--item', toolbarToolClassName ? _xeUtils.default.isFunction(toolbarToolClassName) ? toolbarToolClassName(params) : toolbarToolClassName : '']
        }, (0, _vn.getSlotVNs)(renderToolbarTool.call(_vm, h, toolRender, params)));
      }
    }
    return h('vxe-button', {
      on: {
        click: function click(evnt) {
          return _vm.tolEvent(evnt, item);
        }
      },
      props: {
        disabled: item.disabled,
        loading: item.loading,
        type: item.type,
        icon: item.icon,
        circle: item.circle,
        round: item.round,
        status: item.status,
        content: item.name,
        destroyOnClose: item.destroyOnClose,
        placement: item.placement,
        transfer: item.transfer
      },
      scopedSlots: dropdowns && dropdowns.length ? {
        dropdowns: function dropdowns() {
          return renderDropdowns(h, _vm, item, false);
        }
      } : null
    });
  });
}
function renderToolImport(h, _vm) {
  var importOpts = _vm.importOpts;
  return h('vxe-button', {
    props: {
      circle: true,
      title: _conf.default.i18n('vxe.toolbar.import'),
      icon: importOpts.icon || _conf.default.icon.TOOLBAR_TOOLS_IMPORT
    },
    on: {
      click: _vm.importEvent
    }
  });
}
function renderToolExport(h, _vm) {
  var exportOpts = _vm.exportOpts;
  return h('vxe-button', {
    props: {
      circle: true,
      title: _conf.default.i18n('vxe.toolbar.export'),
      icon: exportOpts.icon || _conf.default.icon.TOOLBAR_TOOLS_EXPORT
    },
    on: {
      click: _vm.exportEvent
    }
  });
}
function renderToolPrint(h, _vm) {
  var printOpts = _vm.printOpts;
  return h('vxe-button', {
    props: {
      circle: true,
      title: _conf.default.i18n('vxe.toolbar.print'),
      icon: printOpts.icon || _conf.default.icon.TOOLBAR_TOOLS_PRINT
    },
    on: {
      click: _vm.printEvent
    }
  });
}
function renderToolRefresh(h, _vm) {
  var refreshOpts = _vm.refreshOpts,
    isRefresh = _vm.isRefresh;
  return h('vxe-button', {
    props: {
      circle: true,
      title: _conf.default.i18n('vxe.toolbar.refresh'),
      icon: isRefresh ? refreshOpts.iconLoading || _conf.default.icon.TOOLBAR_TOOLS_REFRESH_LOADING : refreshOpts.icon || _conf.default.icon.TOOLBAR_TOOLS_REFRESH
    },
    on: {
      click: _vm.refreshEvent
    }
  });
}
function renderToolZoom(h, _vm) {
  var _e = _vm._e,
    $xegrid = _vm.$xegrid,
    zoomOpts = _vm.zoomOpts;
  return $xegrid ? h('vxe-button', {
    props: {
      circle: true,
      title: _conf.default.i18n("vxe.toolbar.zoom".concat($xegrid.isMaximized() ? 'Out' : 'In')),
      icon: $xegrid.isMaximized() ? zoomOpts.iconOut || _conf.default.icon.TOOLBAR_TOOLS_MINIMIZE : zoomOpts.iconIn || _conf.default.icon.TOOLBAR_TOOLS_FULLSCREEN
    },
    on: {
      click: $xegrid.triggerZoomEvent
    }
  }) : _e();
}
function renderToolCustom(h, _vm) {
  var customOpts = _vm.customOpts;
  var customBtnOns = {};
  if (customOpts.trigger === 'manual') {
    // 手动触发
  } else if (customOpts.trigger === 'hover') {
    // hover 触发
    customBtnOns.mouseenter = _vm.handleMouseenterSettingEvent;
    customBtnOns.mouseleave = _vm.handleMouseleaveSettingEvent;
  } else {
    // 点击触发
    customBtnOns.click = _vm.handleClickSettingEvent;
  }
  return h('vxe-button', {
    props: {
      circle: true,
      title: _conf.default.i18n('vxe.toolbar.custom'),
      icon: customOpts.icon || _conf.default.icon.TOOLBAR_TOOLS_CUSTOM
    },
    on: customBtnOns
  });
}
var _default2 = exports.default = {
  name: 'VxeToolbar',
  mixins: [_size.default],
  props: {
    loading: Boolean,
    refresh: [Boolean, Object],
    import: [Boolean, Object],
    export: [Boolean, Object],
    print: [Boolean, Object],
    zoom: [Boolean, Object],
    custom: [Boolean, Object],
    buttons: {
      type: Array,
      default: function _default() {
        return _conf.default.toolbar.buttons;
      }
    },
    tools: {
      type: Array,
      default: function _default() {
        return _conf.default.toolbar.tools;
      }
    },
    perfect: {
      type: Boolean,
      default: function _default() {
        return _conf.default.toolbar.perfect;
      }
    },
    size: {
      type: String,
      default: function _default() {
        return _conf.default.toolbar.size || _conf.default.size;
      }
    },
    className: [String, Function]
  },
  inject: {
    $xegrid: {
      default: null
    }
  },
  data: function data() {
    return {
      $xetable: null,
      isRefresh: false,
      columns: [],
      customStore: {
        isAll: false,
        isIndeterminate: false,
        visible: false
      }
    };
  },
  computed: {
    refreshOpts: function refreshOpts() {
      return Object.assign({}, _conf.default.toolbar.refresh, this.refresh);
    },
    importOpts: function importOpts() {
      return Object.assign({}, _conf.default.toolbar.import, this.import);
    },
    exportOpts: function exportOpts() {
      return Object.assign({}, _conf.default.toolbar.export, this.export);
    },
    printOpts: function printOpts() {
      return Object.assign({}, _conf.default.toolbar.print, this.print);
    },
    zoomOpts: function zoomOpts() {
      return Object.assign({}, _conf.default.toolbar.zoom, this.zoom);
    },
    customOpts: function customOpts() {
      return Object.assign({}, _conf.default.toolbar.custom, this.custom);
    }
  },
  created: function created() {
    var _this = this;
    var refresh = this.refresh,
      refreshOpts = this.refreshOpts,
      customOpts = this.customOpts;
    this.$nextTick(function () {
      var $xetable = _this.fintTable();
      var queryMethod = refreshOpts.queryMethod || refreshOpts.query;
      if (refresh && !_this.$xegrid && !queryMethod) {
        (0, _log.warnLog)('vxe.error.notFunc', ['queryMethod']);
      }
      if ($xetable) {
        $xetable.connect(_this);
      }
      if (process.env.NODE_ENV === 'development') {
        if (customOpts.isFooter) {
          (0, _log.warnLog)('vxe.error.delProp', ['toolbar.custom.isFooter', 'table.custom-config.showFooter']);
        }
        if (customOpts.showFooter) {
          (0, _log.warnLog)('vxe.error.delProp', ['toolbar.custom.showFooter', 'table.custom-config.showFooter']);
        }
        if (customOpts.immediate) {
          (0, _log.warnLog)('vxe.error.delProp', ['toolbar.custom.immediate', 'table.custom-config.immediate']);
        }
        if (customOpts.trigger) {
          (0, _log.warnLog)('vxe.error.delProp', ['toolbar.custom.trigger', 'table.custom-config.trigger']);
        }
        if (_this.buttons) {
          _this.buttons.forEach(function (item) {
            var buttonRender = item.buttonRender;
            var compConf = buttonRender ? _vXETable.default.renderer.get(buttonRender.name) : null;
            if (compConf && compConf.renderButton) {
              (0, _log.warnLog)('vxe.error.delFunc', ['renderButton', 'renderToolbarButton']);
            }
          });
        }
      }
    });
  },
  render: function render(h) {
    var _e = this._e,
      $xegrid = this.$xegrid,
      perfect = this.perfect,
      loading = this.loading,
      refresh = this.refresh,
      zoom = this.zoom,
      custom = this.custom,
      vSize = this.vSize,
      className = this.className;
    return h('div', {
      class: ['vxe-toolbar', className ? _xeUtils.default.isFunction(className) ? className({
        $toolbar: this
      }) : className : '', _defineProperty(_defineProperty(_defineProperty({}, "size--".concat(vSize), vSize), 'is--perfect', perfect), 'is--loading', loading)]
    }, [h('div', {
      class: 'vxe-buttons--wrapper'
    }, renderBtns(h, this)), h('div', {
      class: 'vxe-tools--wrapper'
    }, renderRightTools(h, this)), h('div', {
      class: 'vxe-tools--operate'
    }, [this.import ? renderToolImport(h, this) : _e(), this.export ? renderToolExport(h, this) : _e(), this.print ? renderToolPrint(h, this) : _e(), refresh ? renderToolRefresh(h, this) : _e(), zoom && $xegrid ? renderToolZoom(h, this) : _e(), custom ? renderToolCustom(h, this) : _e()])]);
  },
  methods: {
    syncUpdate: function syncUpdate(params) {
      var collectColumn = params.collectColumn,
        $table = params.$table;
      this.$xetable = $table;
      this.columns = collectColumn;
    },
    fintTable: function fintTable() {
      var $children = this.$parent.$children;
      var selfIndex = $children.indexOf(this);
      return _xeUtils.default.find($children, function (comp, index) {
        return comp && comp.loadData && index > selfIndex && comp.$vnode.componentOptions.tag === 'vxe-table';
      });
    },
    checkTable: function checkTable() {
      if (this.$xetable) {
        return true;
      }
      (0, _log.errLog)('vxe.error.barUnableLink');
    },
    handleClickSettingEvent: function handleClickSettingEvent(_ref2) {
      var $event = _ref2.$event;
      var $xetable = this.$xetable;
      if ($xetable) {
        $xetable.triggerCustomEvent($event);
      } else {
        (0, _log.errLog)('vxe.error.reqModule', ['VxeTableCustomModule']);
      }
    },
    handleMouseenterSettingEvent: function handleMouseenterSettingEvent(_ref3) {
      var $event = _ref3.$event;
      var $xetable = this.$xetable;
      if ($xetable) {
        $xetable.customOpenEvent($event);
      } else {
        (0, _log.errLog)('vxe.error.reqModule', ['VxeTableCustomModule']);
      }
    },
    handleMouseleaveSettingEvent: function handleMouseleaveSettingEvent(_ref4) {
      var $event = _ref4.$event;
      var $xetable = this.$xetable,
        customStore = this.customStore;
      customStore.activeBtn = false;
      setTimeout(function () {
        if (!customStore.activeBtn && !customStore.activeWrapper) {
          $xetable.customColseEvent($event);
        }
      }, 350);
    },
    refreshEvent: function refreshEvent(evnt) {
      var _this2 = this;
      var $xegrid = this.$xegrid,
        refreshOpts = this.refreshOpts,
        isRefresh = this.isRefresh;
      if (!isRefresh) {
        var queryMethod = refreshOpts.queryMethod || refreshOpts.query;
        if (queryMethod) {
          this.isRefresh = true;
          try {
            Promise.resolve(queryMethod({})).catch(function (e) {
              return e;
            }).then(function () {
              _this2.isRefresh = false;
            });
          } catch (e) {
            this.isRefresh = false;
          }
        } else if ($xegrid) {
          this.isRefresh = true;
          $xegrid.triggerToolbarCommitEvent({
            code: refreshOpts.code || 'reload'
          }, evnt).catch(function (e) {
            return e;
          }).then(function () {
            _this2.isRefresh = false;
          });
        }
      }
    },
    btnEvent: function btnEvent(evnt, item) {
      var $xegrid = this.$xegrid,
        $xetable = this.$xetable;
      var code = item.code;
      if (code) {
        if ($xegrid) {
          $xegrid.triggerToolbarBtnEvent(item, evnt);
        } else {
          var gCommandOpts = _vXETable.default.commands.get(code);
          var params = {
            code: code,
            button: item,
            $table: $xetable,
            $grid: $xegrid,
            $event: evnt
          };
          if (gCommandOpts) {
            if (gCommandOpts.commandMethod) {
              gCommandOpts.commandMethod(params);
            } else {
              if (process.env.NODE_ENV === 'development') {
                (0, _log.errLog)('vxe.error.notCommands', [code]);
              }
            }
          }
          this.$emit('button-click', params);
        }
      }
    },
    tolEvent: function tolEvent(evnt, item) {
      var $xegrid = this.$xegrid,
        $xetable = this.$xetable;
      var code = item.code;
      if (code) {
        if ($xegrid) {
          $xegrid.triggerToolbarTolEvent(item, evnt);
        } else {
          var gCommandOpts = _vXETable.default.commands.get(code);
          var params = {
            code: code,
            tool: item,
            $xegrid: $xegrid,
            $table: $xetable,
            $event: evnt
          };
          if (gCommandOpts) {
            if (gCommandOpts.commandMethod) {
              gCommandOpts.commandMethod(params);
            } else {
              if (process.env.NODE_ENV === 'development') {
                (0, _log.errLog)('vxe.error.notCommands', [code]);
              }
            }
          }
          this.$emit('tool-click', params);
        }
      }
    },
    importEvent: function importEvent() {
      if (this.checkTable()) {
        this.$xetable.openImport(this.importOpts);
      }
    },
    exportEvent: function exportEvent() {
      if (this.checkTable()) {
        this.$xetable.openExport(this.exportOpts);
      }
    },
    printEvent: function printEvent() {
      if (this.checkTable()) {
        this.$xetable.openPrint(this.printOpts);
      }
    }
  }
};