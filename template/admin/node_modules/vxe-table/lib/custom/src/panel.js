"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _vXETable = _interopRequireDefault(require("../../v-x-e-table"));
var _utils = _interopRequireDefault(require("../../tools/utils"));
var _dom = _interopRequireDefault(require("../../tools/dom"));
var _conf = _interopRequireDefault(require("../../v-x-e-table/src/conf"));
var _xeUtils = _interopRequireDefault(require("xe-utils"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var formatText = _utils.default.formatText;
var addClass = _dom.default.addClass,
  removeClass = _dom.default.removeClass;
function updateDropHint(_vm, evnt) {
  var $refs = _vm.$refs;
  var dragHintEl = $refs.dragHintElemRef;
  var bodyEl = $refs.bodyElemRef;
  if (!bodyEl) {
    return;
  }
  if (dragHintEl) {
    var wrapperEl = bodyEl.parentNode;
    var wrapperRect = wrapperEl.getBoundingClientRect();
    dragHintEl.style.display = 'block';
    dragHintEl.style.top = "".concat(Math.min(wrapperEl.clientHeight - wrapperEl.scrollTop - dragHintEl.clientHeight, evnt.clientY - wrapperRect.y), "px");
    dragHintEl.style.left = "".concat(Math.min(wrapperEl.clientWidth - wrapperEl.scrollLeft - dragHintEl.clientWidth - 16, evnt.clientX - wrapperRect.x), "px");
  }
}
var renderSimplePanel = function renderSimplePanel(h, _vm) {
  var _e = _vm._e,
    $xetable = _vm.$xetable,
    customStore = _vm.customStore;
  var customColumnList = $xetable.customColumnList,
    customOpts = $xetable.customOpts,
    isMaxFixedColumn = $xetable.isMaxFixedColumn;
  var maxHeight = customStore.maxHeight;
  var checkMethod = customOpts.checkMethod,
    visibleMethod = customOpts.visibleMethod,
    allowVisible = customOpts.allowVisible,
    allowSort = customOpts.allowSort,
    allowFixed = customOpts.allowFixed,
    trigger = customOpts.trigger,
    placement = customOpts.placement;
  var colVNs = [];
  var customWrapperOns = {};
  // hover 触发
  if (trigger === 'hover') {
    customWrapperOns.mouseenter = _vm.handleWrapperMouseenterEvent;
    customWrapperOns.mouseleave = _vm.handleWrapperMouseleaveEvent;
  }
  _xeUtils.default.eachTree(customColumnList, function (column, index, items, path, parent) {
    var isVisible = visibleMethod ? visibleMethod({
      column: column
    }) : true;
    if (isVisible) {
      var isChecked = column.renderVisible;
      var isIndeterminate = column.halfVisible;
      var isColGroup = column.children && column.children.length;
      var colTitle = formatText(column.getTitle(), 1);
      var isDisabled = checkMethod ? !checkMethod({
        column: column
      }) : false;
      colVNs.push(h('li', {
        key: column.id,
        attrs: {
          colid: column.id
        },
        class: ['vxe-table-custom--option', "level--".concat(column.level), {
          'is--group': isColGroup
        }],
        on: {
          dragstart: _vm.sortDragstartEvent,
          dragend: _vm.sortDragendEvent,
          dragover: _vm.sortDragoverEvent
        }
      }, [allowVisible ? h('div', {
        class: ['vxe-table-custom--checkbox-option', {
          'is--checked': isChecked,
          'is--indeterminate': isIndeterminate,
          'is--disabled': isDisabled
        }],
        attrs: {
          title: _conf.default.i18n('vxe.custom.setting.colVisible')
        },
        on: {
          click: function click() {
            if (!isDisabled) {
              _vm.changeCheckboxOption(column);
            }
          }
        }
      }, [h('span', {
        class: ['vxe-checkbox--icon', isIndeterminate ? _conf.default.icon.TABLE_CHECKBOX_INDETERMINATE : isChecked ? _conf.default.icon.TABLE_CHECKBOX_CHECKED : _conf.default.icon.TABLE_CHECKBOX_UNCHECKED]
      })]) : _e(), allowSort && column.level === 1 ? h('div', {
        class: 'vxe-table-custom--sort-option'
      }, [h('span', {
        class: 'vxe-table-custom--sort-btn',
        attrs: {
          title: _conf.default.i18n('vxe.custom.setting.sortHelpTip')
        },
        on: {
          mousedown: _vm.sortMousedownEvent,
          mouseup: _vm.sortMouseupEvent
        }
      }, [h('i', {
        class: _conf.default.icon.TABLE_CUSTOM_SORT
      })])]) : _e(), h('div', {
        class: 'vxe-table-custom--checkbox-label',
        attrs: {
          title: colTitle
        }
      }, colTitle), !parent && allowFixed ? h('div', {
        class: 'vxe-table-custom--fixed-option'
      }, [h('span', {
        class: ['vxe-table-custom--fixed-left-option', column.renderFixed === 'left' ? _conf.default.icon.TOOLBAR_TOOLS_FIXED_LEFT_ACTIVE : _conf.default.icon.TOOLBAR_TOOLS_FIXED_LEFT, {
          'is--checked': column.renderFixed === 'left',
          'is--disabled': isMaxFixedColumn && !column.renderFixed
        }],
        attrs: {
          title: _conf.default.i18n(column.renderFixed === 'left' ? 'vxe.toolbar.cancelFixed' : 'vxe.toolbar.fixedLeft')
        },
        on: {
          click: function click() {
            _vm.changeFixedOption(column, 'left');
          }
        }
      }), h('span', {
        class: ['vxe-table-custom--fixed-right-option', column.renderFixed === 'right' ? _conf.default.icon.TOOLBAR_TOOLS_FIXED_RIGHT_ACTIVE : _conf.default.icon.TOOLBAR_TOOLS_FIXED_RIGHT, {
          'is--checked': column.renderFixed === 'right',
          'is--disabled': isMaxFixedColumn && !column.renderFixed
        }],
        attrs: {
          title: _conf.default.i18n(column.renderFixed === 'right' ? 'vxe.toolbar.cancelFixed' : 'vxe.toolbar.fixedRight')
        },
        on: {
          click: function click() {
            _vm.changeFixedOption(column, 'right');
          }
        }
      })]) : _e()]));
    }
  });
  var isAllChecked = customStore.isAll;
  var isAllIndeterminate = customStore.isIndeterminate;
  return h('div', {
    key: 'simple',
    class: ['vxe-table-custom-wrapper', "placement--".concat(placement), {
      'is--active': customStore.visible
    }],
    style: maxHeight && !['left', 'right'].includes(placement) ? {
      maxHeight: "".concat(maxHeight, "px")
    } : {}
  }, customStore.visible ? [h('ul', {
    class: 'vxe-table-custom--header'
  }, [h('li', {
    class: 'vxe-table-custom--option'
  }, [allowVisible ? h('div', {
    class: ['vxe-table-custom--checkbox-option', {
      'is--checked': isAllChecked,
      'is--indeterminate': isAllIndeterminate
    }],
    attrs: {
      title: _conf.default.i18n('vxe.table.allTitle')
    },
    on: {
      click: _vm.allCustomEvent
    }
  }, [h('span', {
    class: ['vxe-checkbox--icon', isAllIndeterminate ? _conf.default.icon.TABLE_CHECKBOX_INDETERMINATE : isAllChecked ? _conf.default.icon.TABLE_CHECKBOX_CHECKED : _conf.default.icon.TABLE_CHECKBOX_UNCHECKED]
  }), h('span', {
    class: 'vxe-checkbox--label'
  }, _conf.default.i18n('vxe.toolbar.customAll'))]) : h('span', {
    class: 'vxe-checkbox--label'
  }, _conf.default.i18n('vxe.table.customTitle'))])]), h('div', {
    ref: 'bodyElemRef',
    class: 'vxe-table-custom--list-wrapper'
  }, [h('transition-group', {
    class: 'vxe-table-custom--body',
    props: {
      name: 'vxe-table-custom--list',
      tag: 'ul'
    },
    on: customWrapperOns
  }, colVNs), h('div', {
    ref: 'dragHintElemRef',
    class: 'vxe-table-custom-popup--drag-hint'
  }, _conf.default.i18n('vxe.custom.cstmDragTarget', [_vm.dragColumn ? _vm.dragColumn.getTitle() : '']))]), customOpts.showFooter ? h('div', {
    class: 'vxe-table-custom--footer'
  }, [h('button', {
    class: 'btn--reset',
    on: {
      click: _vm.resetCustomEvent
    }
  }, customOpts.resetButtonText || _conf.default.i18n('vxe.table.customRestore')), customOpts.immediate ? _e() : h('button', {
    class: 'btn--cancel',
    on: {
      click: _vm.cancelCustomEvent
    }
  }, customOpts.resetButtonText || _conf.default.i18n('vxe.table.customCancel')), h('button', {
    class: 'btn--confirm',
    on: {
      click: _vm.confirmCustomEvent
    }
  }, customOpts.confirmButtonText || _conf.default.i18n('vxe.table.customConfirm'))]) : null] : []);
};
var renderPopupPanel = function renderPopupPanel(h, _vm) {
  var _e = _vm._e,
    $xetable = _vm.$xetable,
    customStore = _vm.customStore;
  var customOpts = $xetable.customOpts,
    customColumnList = $xetable.customColumnList,
    columnOpts = $xetable.columnOpts,
    isMaxFixedColumn = $xetable.isMaxFixedColumn;
  var modalOptions = customOpts.modalOptions,
    allowVisible = customOpts.allowVisible,
    allowSort = customOpts.allowSort,
    allowFixed = customOpts.allowFixed,
    allowResizable = customOpts.allowResizable,
    checkMethod = customOpts.checkMethod,
    visibleMethod = customOpts.visibleMethod;
  var maxFixedSize = columnOpts.maxFixedSize;
  var modalOpts = Object.assign({}, modalOptions);
  var trVNs = [];
  _xeUtils.default.eachTree(customColumnList, function (column, index, items, path, parent) {
    var isVisible = visibleMethod ? visibleMethod({
      column: column
    }) : true;
    if (isVisible) {
      var isChecked = column.renderVisible;
      var isIndeterminate = column.halfVisible;
      var colTitle = formatText(column.getTitle(), 1);
      var isColGroup = column.children && column.children.length;
      var isDisabled = checkMethod ? !checkMethod({
        column: column
      }) : false;
      trVNs.push(h('tr', {
        key: column.id,
        attrs: {
          colid: column.id
        },
        class: ["vxe-table-custom-popup--row level--".concat(column.level), {
          'is--group': isColGroup
        }],
        on: {
          dragstart: _vm.sortDragstartEvent,
          dragend: _vm.sortDragendEvent,
          dragover: _vm.sortDragoverEvent
        }
      }, [allowVisible ? h('td', {
        class: 'vxe-table-custom-popup--column-item col--visible'
      }, [h('div', {
        class: ['vxe-table-custom--checkbox-option', {
          'is--checked': isChecked,
          'is--indeterminate': isIndeterminate,
          'is--disabled': isDisabled
        }],
        attrs: {
          title: _conf.default.i18n('vxe.custom.setting.colVisible')
        },
        on: {
          click: function click() {
            if (!isDisabled) {
              _vm.changeCheckboxOption(column);
            }
          }
        }
      }, [h('span', {
        class: ['vxe-checkbox--icon', isIndeterminate ? _conf.default.icon.TABLE_CHECKBOX_INDETERMINATE : isChecked ? _conf.default.icon.TABLE_CHECKBOX_CHECKED : _conf.default.icon.TABLE_CHECKBOX_UNCHECKED]
      })])]) : _e(), allowSort ? h('td', {
        class: 'vxe-table-custom-popup--column-item col--sort'
      }, [column.level === 1 ? h('span', {
        class: 'vxe-table-custom-popup--column-sort-btn',
        attrs: {
          title: _conf.default.i18n('vxe.custom.setting.sortHelpTip')
        },
        on: {
          mousedown: _vm.sortMousedownEvent,
          mouseup: _vm.sortMouseupEvent
        }
      }, [h('i', {
        class: _conf.default.icon.TABLE_CUSTOM_SORT
      })]) : h('span', '-')]) : _e(), h('td', {
        class: 'vxe-table-custom-popup--column-item col--name'
      }, [h('div', {
        class: 'vxe-table-custom-popup--name',
        attrs: {
          title: colTitle
        }
      }, colTitle)]), allowResizable ? h('td', {
        class: 'vxe-table-custom-popup--column-item col--resizable'
      }, [!isChecked || column.children && column.children.length ? h('span', '-') : h('vxe-input', {
        props: {
          type: 'integer',
          value: column.renderResizeWidth
        },
        on: {
          modelValue: function modelValue(value) {
            column.renderResizeWidth = Math.max(0, Number(value));
          }
        }
      })]) : _e(), allowFixed ? h('td', {
        class: 'vxe-table-custom-popup--column-item col--fixed'
      }, [parent ? h('span', '-') : h('vxe-radio-group', {
        props: {
          value: column.renderFixed || '',
          type: 'button',
          size: 'mini',
          options: [{
            label: _conf.default.i18n('vxe.custom.setting.fixedLeft'),
            value: 'left',
            disabled: isMaxFixedColumn
          }, {
            label: _conf.default.i18n('vxe.custom.setting.fixedUnset'),
            value: ''
          }, {
            label: _conf.default.i18n('vxe.custom.setting.fixedRight'),
            value: 'right',
            disabled: isMaxFixedColumn
          }]
        },
        on: {
          input: function input(value) {
            column.renderFixed = value;
          } // onChange () {
          //   changePopupFixedOption(column)
          // }
        }
      })]) : _e()]));
    }
  });
  var isAllChecked = customStore.isAll;
  var isAllIndeterminate = customStore.isIndeterminate;
  return h('vxe-modal', {
    key: 'modal',
    props: {
      className: ['vxe-table-custom-popup-wrapper', 'vxe-table--ignore-clear', modalOpts.className || ''].join(' '),
      value: customStore.visible,
      title: modalOpts.title || _conf.default.i18n('vxe.custom.cstmTitle'),
      width: modalOpts.width || Math.min(880, document.documentElement.clientWidth),
      minWidth: modalOpts.minWidth || 700,
      height: modalOpts.height || Math.min(680, document.documentElement.clientHeight),
      minHeight: modalOpts.minHeight || 400,
      showZoom: !!modalOpts.showZoom,
      mask: !!modalOpts.mask,
      lockView: !!modalOpts.lockView,
      resize: !!modalOpts.resize,
      escClosable: !!modalOpts.escClosable,
      destroyOnClose: true,
      showFooter: true
    },
    on: {
      input: function input(value) {
        customStore.visible = value;
      }
    },
    scopedSlots: {
      default: function _default() {
        return h('div', {
          ref: 'bodyElemRef',
          class: 'vxe-table-custom-popup--body'
        }, [h('div', {
          class: 'vxe-table-custom-popup--table-wrapper'
        }, [h('table', {}, [h('colgroup', {}, [allowVisible ? h('col', {
          style: {
            width: '80px'
          }
        }) : _e(), allowSort ? h('col', {
          style: {
            width: '80px'
          }
        }) : _e(), h('col', {
          style: {
            minWidth: '120px'
          }
        }), allowResizable ? h('col', {
          style: {
            width: '140px'
          }
        }) : _e(), allowFixed ? h('col', {
          style: {
            width: '200px'
          }
        }) : _e()]), h('thead', {}, [h('tr', {}, [allowVisible ? h('th', {}, [h('div', {
          class: ['vxe-table-custom--checkbox-option', {
            'is--checked': isAllChecked,
            'is--indeterminate': isAllIndeterminate
          }],
          attrs: {
            title: _conf.default.i18n('vxe.table.allTitle')
          },
          on: {
            click: _vm.allCustomEvent
          }
        }, [h('span', {
          class: ['vxe-checkbox--icon', isAllIndeterminate ? _conf.default.icon.TABLE_CHECKBOX_INDETERMINATE : isAllChecked ? _conf.default.icon.TABLE_CHECKBOX_CHECKED : _conf.default.icon.TABLE_CHECKBOX_UNCHECKED]
        }), h('span', {
          class: 'vxe-checkbox--label'
        }, _conf.default.i18n('vxe.toolbar.customAll'))])]) : _e(), allowSort ? h('th', {}, [h('span', {
          class: 'vxe-table-custom-popup--table-sort-help-title'
        }, _conf.default.i18n('vxe.custom.setting.colSort')), h('vxe-tooltip', {
          props: {
            enterable: true,
            content: _conf.default.i18n('vxe.custom.setting.sortHelpTip')
          },
          scopedSlots: {
            default: function _default() {
              return h('i', {
                class: 'vxe-table-custom-popup--table-sort-help-icon vxe-icon-question-circle-fill'
              });
            }
          }
        })]) : _e(), h('th', {}, _conf.default.i18n('vxe.custom.setting.colTitle')), allowResizable ? h('th', {}, _conf.default.i18n('vxe.custom.setting.colResizable')) : _e(), allowFixed ? h('th', {}, _conf.default.i18n("vxe.custom.setting.".concat(maxFixedSize ? 'colFixedMax' : 'colFixed'), [maxFixedSize])) : _e()])]), h('transition-group', {
          class: 'vxe-table-custom--body',
          props: {
            tag: 'tbody',
            name: 'vxe-table-custom--list'
          }
        }, trVNs)])]), h('div', {
          ref: 'dragHintElemRef',
          class: 'vxe-table-custom-popup--drag-hint'
        }, _conf.default.i18n('vxe.custom.cstmDragTarget', [_vm.dragColumn ? _vm.dragColumn.getTitle() : '']))]);
      },
      footer: function footer() {
        return h('div', {
          class: 'vxe-table-custom-popup--footer'
        }, [h('vxe-button', {
          props: {
            content: customOpts.resetButtonText || _conf.default.i18n('vxe.custom.cstmRestore')
          },
          on: {
            click: _vm.resetCustomEvent
          }
        }), h('vxe-button', {
          props: {
            content: customOpts.resetButtonText || _conf.default.i18n('vxe.custom.cstmCancel')
          },
          on: {
            click: _vm.cancelCustomEvent
          }
        }), h('vxe-button', {
          props: {
            status: 'primary',
            content: customOpts.confirmButtonText || _conf.default.i18n('vxe.custom.cstmConfirm')
          },
          on: {
            click: _vm.confirmCustomEvent
          }
        })]);
      }
    }
  });
};
var _default2 = exports.default = {
  name: 'VxeTableCustomPanel',
  props: {
    customStore: {
      type: Object,
      default: function _default() {
        return {};
      }
    }
  },
  inject: {
    $xetable: {
      default: null
    }
  },
  data: function data() {
    return {
      dragColumn: null
    };
  },
  computed: {},
  render: function render(h) {
    var $xetable = this.$xetable;
    var customOpts = $xetable.customOpts;
    if (['modal', 'popup'].includes("".concat(customOpts.mode))) {
      return renderPopupPanel(h, this);
    }
    return renderSimplePanel(h, this);
  },
  methods: {
    handleWrapperMouseenterEvent: function handleWrapperMouseenterEvent(evnt) {
      var $xetable = this.$xetable,
        customStore = this.customStore;
      customStore.activeWrapper = true;
      $xetable.customOpenEvent(evnt);
    },
    handleWrapperMouseleaveEvent: function handleWrapperMouseleaveEvent(evnt) {
      var $xetable = this.$xetable,
        customStore = this.customStore;
      customStore.activeWrapper = false;
      setTimeout(function () {
        if (!customStore.activeBtn && !customStore.activeWrapper) {
          $xetable.customColseEvent(evnt);
        }
      }, 300);
    },
    getStoreData: function getStoreData() {
      return {};
    },
    confirmCustomEvent: function confirmCustomEvent(evnt) {
      var $xetable = this.$xetable;
      var customOpts = $xetable.customOpts,
        customColumnList = $xetable.customColumnList;
      var allowVisible = customOpts.allowVisible,
        allowSort = customOpts.allowSort,
        allowFixed = customOpts.allowFixed,
        allowResizable = customOpts.allowResizable;
      _xeUtils.default.eachTree(customColumnList, function (column, index, items, path, parent) {
        if (!parent) {
          if (allowSort) {
            var sortIndex = index + 1;
            column.renderSortNumber = sortIndex;
          }
          if (allowFixed) {
            column.fixed = column.renderFixed;
          }
        }
        if (allowResizable) {
          if (column.renderVisible && (!column.children || column.children.length)) {
            if (column.renderResizeWidth !== column.renderWidth) {
              column.resizeWidth = column.renderResizeWidth;
              column.renderWidth = column.renderResizeWidth;
            }
          }
        }
        if (allowVisible) {
          column.visible = column.renderVisible;
        }
      });
      $xetable.closeCustom();
      $xetable.emitCustomEvent('confirm', evnt);
      $xetable.saveCustomStore('confirm');
    },
    cancelCustomEvent: function cancelCustomEvent(evnt) {
      var $xetable = this.$xetable;
      var customStore = $xetable.customStore,
        customOpts = $xetable.customOpts,
        customColumnList = $xetable.customColumnList;
      var oldSortMaps = customStore.oldSortMaps,
        oldFixedMaps = customStore.oldFixedMaps,
        oldVisibleMaps = customStore.oldVisibleMaps;
      var allowVisible = customOpts.allowVisible,
        allowSort = customOpts.allowSort,
        allowFixed = customOpts.allowFixed,
        allowResizable = customOpts.allowResizable;
      _xeUtils.default.eachTree(customColumnList, function (column) {
        var colid = column.getKey();
        var visible = !!oldVisibleMaps[colid];
        var fixed = oldFixedMaps[colid] || '';
        if (allowVisible) {
          column.renderVisible = visible;
          column.visible = visible;
        }
        if (allowFixed) {
          column.renderFixed = fixed;
          column.fixed = fixed;
        }
        if (allowSort) {
          column.renderSortNumber = oldSortMaps[colid] || 0;
        }
        if (allowResizable) {
          column.renderResizeWidth = column.renderWidth;
        }
      }, {
        children: 'children'
      });
      $xetable.closeCustom();
      $xetable.emitCustomEvent('cancel', evnt);
    },
    handleResetCustomEvent: function handleResetCustomEvent(evnt) {
      var $xetable = this.$xetable;
      $xetable.resetColumn(true);
      $xetable.closeCustom();
      $xetable.emitCustomEvent('reset', evnt);
    },
    resetCustomEvent: function resetCustomEvent(evnt) {
      var _this = this;
      if (_vXETable.default.modal) {
        _vXETable.default.modal.confirm({
          content: _conf.default.i18n('vxe.custom.cstmConfirmRestore'),
          className: 'vxe-table--ignore-clear',
          escClosable: true
        }).then(function (type) {
          if (type === 'confirm') {
            _this.handleResetCustomEvent(evnt);
          }
        });
      } else {
        this.handleResetCustomEvent(evnt);
      }
    },
    resetPopupCustomEvent: function resetPopupCustomEvent(evnt) {
      var _this2 = this;
      if (_vXETable.default.modal) {
        _vXETable.default.modal.confirm({
          content: _conf.default.i18n('vxe.custom.cstmConfirmRestore'),
          className: 'vxe-table--ignore-clear',
          escClosable: true
        }).then(function (type) {
          if (type === 'confirm') {
            _this2.resetCustomEvent(evnt);
          }
        });
      } else {
        this.resetCustomEvent(evnt);
      }
    },
    handleOptionCheck: function handleOptionCheck(column) {
      var $xetable = this.$xetable;
      var customColumnList = $xetable.customColumnList;
      var matchObj = _xeUtils.default.findTree(customColumnList, function (item) {
        return item === column;
      });
      if (matchObj && matchObj.parent) {
        var parent = matchObj.parent;
        if (parent.children && parent.children.length) {
          parent.visible = parent.children.every(function (column) {
            return column.visible;
          });
          parent.halfVisible = !parent.visible && parent.children.some(function (column) {
            return column.visible || column.halfVisible;
          });
          this.handleOptionCheck(parent);
        }
      }
    },
    changeCheckboxOption: function changeCheckboxOption(column) {
      var $xetable = this.$xetable;
      var customOpts = $xetable.customOpts;
      var isChecked = !column.renderVisible;
      _xeUtils.default.eachTree([column], function (item) {
        item.renderVisible = isChecked;
        item.halfVisible = false;
      });
      this.handleOptionCheck(column);
      if (customOpts.immediate) {
        $xetable.handleCustom();
        $xetable.saveCustomStore('update:visible');
      }
      $xetable.checkCustomStatus();
    },
    changeFixedOption: function changeFixedOption(column, colFixed) {
      var $xetable = this.$xetable;
      var isMaxFixedColumn = $xetable.isMaxFixedColumn;
      if (column.renderFixed === colFixed) {
        column.renderFixed = '';
        // $xeTable.clearColumnFixed(column)
      } else {
        if (!isMaxFixedColumn || column.renderFixed) {
          column.renderFixed = colFixed;
          // $xeTable.setColumnFixed(column, colFixed)
        }
      }
    },
    // changePopupFixedOption  (column) {
    //   const { $xetable } = this
    //   const { isMaxFixedColumn } = $xetable
    //   if (!isMaxFixedColumn) {
    //     $xetable.setColumnFixed(column, column.fixed)
    //   }
    // },
    allCustomEvent: function allCustomEvent() {
      var $xetable = this.$xetable,
        customStore = this.customStore;
      var customOpts = $xetable.customOpts,
        customColumnList = $xetable.customColumnList;
      var checkMethod = customOpts.checkMethod;
      var isAll = !customStore.isAll;
      _xeUtils.default.eachTree(customColumnList, function (column) {
        if (!checkMethod || checkMethod({
          column: column
        })) {
          column.renderVisible = isAll;
          column.halfVisible = false;
        }
      });
      customStore.isAll = isAll;
      $xetable.checkCustomStatus();
    },
    sortMousedownEvent: function sortMousedownEvent(evnt) {
      var $xetable = this.$xetable;
      var btnEl = evnt.currentTarget;
      var tdEl = btnEl.parentNode;
      var trEl = tdEl.parentNode;
      var colid = trEl.getAttribute('colid');
      var column = $xetable.getColumnById(colid);
      trEl.draggable = true;
      this.dragColumn = column;
      addClass(trEl, 'active--drag-origin');
    },
    sortMouseupEvent: function sortMouseupEvent(evnt) {
      var btnEl = evnt.currentTarget;
      var tdEl = btnEl.parentNode;
      var trEl = tdEl.parentNode;
      var dragHintEl = this.$refs.dragHintElemRef;
      trEl.draggable = false;
      this.dragColumn = null;
      removeClass(trEl, 'active--drag-origin');
      if (dragHintEl) {
        dragHintEl.style.display = '';
      }
    },
    sortDragstartEvent: function sortDragstartEvent(evnt) {
      var img = new Image();
      if (evnt.dataTransfer) {
        evnt.dataTransfer.setDragImage(img, 0, 0);
      }
    },
    sortDragendEvent: function sortDragendEvent(evnt) {
      var $xetable = this.$xetable,
        prevDropTrEl = this.prevDropTrEl;
      var customColumnList = $xetable.customColumnList;
      var trEl = evnt.currentTarget;
      var dragHintEl = this.$refs.dragHintElemRef;
      if (prevDropTrEl) {
        // 判断是否有拖动
        if (prevDropTrEl !== trEl) {
          var dragOffset = prevDropTrEl.getAttribute('drag-pos');
          var colid = trEl.getAttribute('colid');
          var column = $xetable.getColumnById(colid);
          if (!column) {
            return;
          }
          var cIndex = _xeUtils.default.findIndexOf(customColumnList, function (item) {
            return item.id === column.id;
          });
          var targetColid = prevDropTrEl.getAttribute('colid');
          var targetColumn = $xetable.getColumnById(targetColid);
          if (!targetColumn) {
            return;
          }
          // 移出源位置
          customColumnList.splice(cIndex, 1);
          var tcIndex = _xeUtils.default.findIndexOf(customColumnList, function (item) {
            return item.id === targetColumn.id;
          });
          // 插新位置
          customColumnList.splice(tcIndex + (dragOffset === 'bottom' ? 1 : 0), 0, column);
        }
        prevDropTrEl.draggable = false;
        prevDropTrEl.removeAttribute('drag-pos');
        removeClass(prevDropTrEl, 'active--drag-target');
      }
      this.dragColumn = null;
      trEl.draggable = false;
      trEl.removeAttribute('drag-pos');
      if (dragHintEl) {
        dragHintEl.style.display = '';
      }
      removeClass(trEl, 'active--drag-target');
      removeClass(trEl, 'active--drag-origin');
    },
    sortDragoverEvent: function sortDragoverEvent(evnt) {
      var $xetable = this.$xetable,
        prevDropTrEl = this.prevDropTrEl;
      var trEl = evnt.currentTarget;
      if (prevDropTrEl !== trEl) {
        removeClass(prevDropTrEl, 'active--drag-target');
      }
      var colid = trEl.getAttribute('colid');
      var column = $xetable.getColumnById(colid);
      // 是否移入有效元行
      if (column && column.level === 1) {
        evnt.preventDefault();
        var offsetY = evnt.clientY - trEl.getBoundingClientRect().y;
        var dragOffset = offsetY < trEl.clientHeight / 2 ? 'top' : 'bottom';
        addClass(trEl, 'active--drag-target');
        trEl.setAttribute('drag-pos', dragOffset);
        this.prevDropTrEl = trEl;
      }
      updateDropHint(this, evnt);
    }
  }
};