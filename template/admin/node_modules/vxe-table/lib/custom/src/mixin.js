"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _xeUtils = _interopRequireDefault(require("xe-utils"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = exports.default = {
  methods: {
    _openCustom: function _openCustom() {
      var _this = this;
      var initStore = this.initStore,
        customStore = this.customStore,
        collectColumn = this.collectColumn;
      var sortMaps = {};
      var fixedMaps = {};
      var visibleMaps = {};
      _xeUtils.default.eachTree(collectColumn, function (column) {
        var colid = column.getKey();
        column.renderFixed = column.fixed;
        column.renderVisible = column.visible;
        column.renderResizeWidth = column.renderWidth;
        sortMaps[colid] = column.renderSortNumber;
        fixedMaps[colid] = column.fixed;
        visibleMaps[colid] = column.visible;
      }, {
        children: 'children'
      });
      customStore.oldSortMaps = sortMaps;
      customStore.oldFixedMaps = fixedMaps;
      customStore.oldVisibleMaps = visibleMaps;
      this.customColumnList = collectColumn.slice(0);
      customStore.visible = true;
      initStore.custom = true;
      this.checkCustomStatus();
      this.calcMaxHeight();
      return this.$nextTick().then(function () {
        return _this.calcMaxHeight();
      });
    },
    _closeCustom: function _closeCustom() {
      var customStore = this.customStore,
        customOpts = this.customOpts;
      if (customStore.visible) {
        customStore.visible = false;
        if (!customOpts.immediate) {
          this.handleCustom();
        }
      }
      return this.$nextTick();
    },
    calcMaxHeight: function calcMaxHeight() {
      var $el = this.$el,
        customStore = this.customStore;
      // 判断面板不能大于表格高度
      var tableHeight = 0;
      if ($el) {
        tableHeight = $el.clientHeight - 30;
      }
      customStore.maxHeight = Math.max(4, tableHeight);
    },
    checkCustomStatus: function checkCustomStatus() {
      var customStore = this.customStore,
        collectColumn = this.collectColumn,
        customOpts = this.customOpts;
      var checkMethod = customOpts.checkMethod;
      customStore.isAll = collectColumn.every(function (column) {
        return (checkMethod ? !checkMethod({
          column: column
        }) : false) || column.renderVisible;
      });
      customStore.isIndeterminate = !customStore.isAll && collectColumn.some(function (column) {
        return (!checkMethod || checkMethod({
          column: column
        })) && (column.renderVisible || column.halfVisible);
      });
    },
    emitCustomEvent: function emitCustomEvent(type, evnt) {
      var comp = this.$xegrid || this;
      comp.$emit('custom', {
        type: type,
        $table: this,
        $grid: this.$xegrid,
        $event: evnt
      });
    },
    triggerCustomEvent: function triggerCustomEvent(evnt) {
      var customStore = this.customStore;
      if (customStore.visible) {
        this.closeCustom();
        this.emitCustomEvent('close', evnt);
      } else {
        customStore.btnEl = evnt.target;
        this.openCustom();
        this.emitCustomEvent('open', evnt);
      }
    },
    customOpenEvent: function customOpenEvent(evnt) {
      var customStore = this.customStore;
      if (!customStore.visible) {
        customStore.activeBtn = true;
        customStore.btnEl = evnt.target;
        this.openCustom();
        this.emitCustomEvent('open', evnt);
      }
    },
    customColseEvent: function customColseEvent(evnt) {
      var customStore = this.customStore;
      if (customStore.visible) {
        customStore.activeBtn = false;
        this.closeCustom();
        this.emitCustomEvent('close', evnt);
      }
    }
  }
};