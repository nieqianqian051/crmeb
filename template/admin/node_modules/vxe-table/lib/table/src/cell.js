"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Cell = void 0;
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _conf = _interopRequireDefault(require("../../v-x-e-table/src/conf"));
var _vXETable = _interopRequireDefault(require("../../v-x-e-table"));
var _dom = _interopRequireDefault(require("../../tools/dom"));
var _formats = require("../../v-x-e-table/src/formats");
var _utils = _interopRequireWildcard(require("../../tools/utils"));
var _util = require("./util");
var _vn = require("../../tools/vn");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function renderTitlePrefixIcon(h, params) {
  var $table = params.$table,
    column = params.column;
  var titlePrefix = column.titlePrefix || column.titleHelp;
  return titlePrefix ? [h('i', {
    class: ['vxe-cell-title-prefix-icon', titlePrefix.icon || _conf.default.icon.TABLE_TITLE_PREFIX],
    on: {
      mouseenter: function mouseenter(evnt) {
        $table.triggerHeaderTitleEvent(evnt, titlePrefix, params);
      },
      mouseleave: function mouseleave(evnt) {
        $table.handleTargetLeaveEvent(evnt);
      }
    }
  })] : [];
}
function renderTitleSuffixIcon(h, params) {
  var $table = params.$table,
    column = params.column;
  var titleSuffix = column.titleSuffix;
  return titleSuffix ? [h('i', {
    class: ['vxe-cell-title-suffix-icon', titleSuffix.icon || _conf.default.icon.TABLE_TITLE_SUFFIX],
    on: {
      mouseenter: function mouseenter(evnt) {
        $table.triggerHeaderTitleEvent(evnt, titleSuffix, params);
      },
      mouseleave: function mouseleave(evnt) {
        $table.handleTargetLeaveEvent(evnt);
      }
    }
  })] : [];
}
function renderTitleContent(h, params, content) {
  var $table = params.$table,
    column = params.column;
  var type = column.type,
    showHeaderOverflow = column.showHeaderOverflow;
  var allColumnHeaderOverflow = $table.showHeaderOverflow,
    tooltipOpts = $table.tooltipOpts;
  var showAllTip = tooltipOpts.showAll || tooltipOpts.enabled;
  var headOverflow = _xeUtils.default.isUndefined(showHeaderOverflow) || _xeUtils.default.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;
  var showTitle = headOverflow === 'title';
  var showTooltip = headOverflow === true || headOverflow === 'tooltip';
  var ons = {};
  if (showTitle || showTooltip || showAllTip) {
    ons.mouseenter = function (evnt) {
      if ($table._isResize) {
        return;
      }
      if (showTitle) {
        _dom.default.updateCellTitle(evnt.currentTarget, column);
      } else if (showTooltip || showAllTip) {
        $table.triggerHeaderTooltipEvent(evnt, params);
      }
    };
  }
  if (showTooltip || showAllTip) {
    ons.mouseleave = function (evnt) {
      if ($table._isResize) {
        return;
      }
      if (showTooltip || showAllTip) {
        $table.handleTargetLeaveEvent(evnt);
      }
    };
  }
  return [type === 'html' && _xeUtils.default.isString(content) ? h('span', {
    class: 'vxe-cell--title',
    domProps: {
      innerHTML: content
    },
    on: ons
  }) : h('span', {
    class: 'vxe-cell--title',
    on: ons
  }, (0, _vn.getSlotVNs)(content))];
}
function formatFooterLabel(footerFormatter, params) {
  if (_xeUtils.default.isFunction(footerFormatter)) {
    return footerFormatter(params);
  }
  var isArr = _xeUtils.default.isArray(footerFormatter);
  var gFormatOpts = isArr ? _formats.formats.get(footerFormatter[0]) : _formats.formats.get(footerFormatter);
  var footerFormatMethod = gFormatOpts ? gFormatOpts.tableFooterCellFormatMethod : null;
  if (footerFormatMethod) {
    return isArr ? footerFormatMethod.apply(void 0, [params].concat(_toConsumableArray(footerFormatter.slice(1)))) : footerFormatMethod(params);
  }
  return '';
}
function getFooterContent(h, params) {
  var $table = params.$table,
    column = params.column,
    _columnIndex = params._columnIndex,
    row = params.row,
    items = params.items;
  var slots = column.slots,
    editRender = column.editRender,
    cellRender = column.cellRender,
    footerFormatter = column.footerFormatter;
  var renderOpts = editRender || cellRender;
  if (slots && slots.footer) {
    return $table.callSlot(slots.footer, params, h);
  }
  if (renderOpts) {
    var compConf = _vXETable.default.renderer.get(renderOpts.name);
    var rtFooter = compConf ? compConf.renderTableFooter || compConf.renderFooter : null;
    if (rtFooter) {
      return (0, _vn.getSlotVNs)(rtFooter.call($table, h, renderOpts, params));
    }
  }
  var itemValue = '';
  // 兼容老模式
  if (_xeUtils.default.isArray(items)) {
    itemValue = items[_columnIndex];
    return [footerFormatter ? formatFooterLabel(footerFormatter, {
      itemValue: itemValue,
      column: column,
      row: row,
      items: items,
      _columnIndex: _columnIndex
    }) : _utils.default.formatText(itemValue, 1)];
  }
  itemValue = _xeUtils.default.get(row, column.field);
  return [footerFormatter ? formatFooterLabel(footerFormatter, {
    itemValue: itemValue,
    column: column,
    row: row,
    items: items,
    _columnIndex: _columnIndex
  }) : _utils.default.formatText(itemValue, 1)];
}
function getDefaultCellLabel(params) {
  var $table = params.$table,
    row = params.row,
    column = params.column;
  return _utils.default.formatText($table.getCellLabel(row, column), 1);
}
var Cell = exports.Cell = {
  createColumn: function createColumn($xetable, _vm) {
    var type = _vm.type,
      sortable = _vm.sortable,
      remoteSort = _vm.remoteSort,
      filters = _vm.filters,
      editRender = _vm.editRender,
      treeNode = _vm.treeNode;
    var editConfig = $xetable.editConfig,
      editOpts = $xetable.editOpts,
      checkboxOpts = $xetable.checkboxOpts;
    var renMaps = {
      renderHeader: this.renderDefaultHeader,
      renderCell: treeNode ? this.renderTreeCell : this.renderDefaultCell,
      renderFooter: this.renderDefaultFooter
    };
    switch (type) {
      case 'seq':
        renMaps.renderHeader = this.renderSeqHeader;
        renMaps.renderCell = treeNode ? this.renderTreeIndexCell : this.renderSeqCell;
        break;
      case 'radio':
        renMaps.renderHeader = this.renderRadioHeader;
        renMaps.renderCell = treeNode ? this.renderTreeRadioCell : this.renderRadioCell;
        break;
      case 'checkbox':
        renMaps.renderHeader = this.renderCheckboxHeader;
        renMaps.renderCell = checkboxOpts.checkField ? treeNode ? this.renderTreeSelectionCellByProp : this.renderCheckboxCellByProp : treeNode ? this.renderTreeSelectionCell : this.renderCheckboxCell;
        break;
      case 'expand':
        renMaps.renderCell = this.renderExpandCell;
        renMaps.renderData = this.renderExpandData;
        break;
      case 'html':
        renMaps.renderCell = treeNode ? this.renderTreeHTMLCell : this.renderHTMLCell;
        if (filters && (sortable || remoteSort)) {
          renMaps.renderHeader = this.renderSortAndFilterHeader;
        } else if (sortable || remoteSort) {
          renMaps.renderHeader = this.renderSortHeader;
        } else if (filters) {
          renMaps.renderHeader = this.renderFilterHeader;
        }
        break;
      default:
        if (editConfig && editRender) {
          renMaps.renderHeader = this.renderEditHeader;
          renMaps.renderCell = editOpts.mode === 'cell' ? treeNode ? this.renderTreeCellEdit : this.renderCellEdit : treeNode ? this.renderTreeRowEdit : this.renderRowEdit;
        } else if (filters && (sortable || remoteSort)) {
          renMaps.renderHeader = this.renderSortAndFilterHeader;
        } else if (sortable || remoteSort) {
          renMaps.renderHeader = this.renderSortHeader;
        } else if (filters) {
          renMaps.renderHeader = this.renderFilterHeader;
        }
    }
    return (0, _util.getColumnConfig)($xetable, _vm, renMaps);
  },
  /**
   * 单元格
   */
  renderHeaderTitle: function renderHeaderTitle(h, params) {
    var $table = params.$table,
      column = params.column;
    var slots = column.slots,
      editRender = column.editRender,
      cellRender = column.cellRender;
    var renderOpts = editRender || cellRender;
    if (slots && slots.header) {
      return renderTitleContent(h, params, $table.callSlot(slots.header, params, h));
    }
    if (renderOpts) {
      var compConf = _vXETable.default.renderer.get(renderOpts.name);
      var rtHeader = compConf ? compConf.renderTableHeader || compConf.renderHeader : null;
      if (rtHeader) {
        return (0, _vn.getSlotVNs)(renderTitleContent(h, params, rtHeader.call($table, h, renderOpts, params)));
      }
    }
    return renderTitleContent(h, params, _utils.default.formatText(column.getTitle(), 1));
  },
  renderDefaultHeader: function renderDefaultHeader(h, params) {
    return renderTitlePrefixIcon(h, params).concat(Cell.renderHeaderTitle(h, params)).concat(renderTitleSuffixIcon(h, params));
  },
  renderDefaultCell: function renderDefaultCell(h, params) {
    var $table = params.$table,
      row = params.row,
      column = params.column;
    var slots = column.slots,
      editRender = column.editRender,
      cellRender = column.cellRender;
    var renderOpts = editRender || cellRender;
    if (slots && slots.default) {
      return $table.callSlot(slots.default, params, h);
    }
    if (renderOpts) {
      var compConf = _vXETable.default.renderer.get(renderOpts.name);
      var rtDefault = compConf ? compConf.renderTableDefault || compConf.renderDefault : null;
      var rtCell = compConf ? compConf.renderTableCell || compConf.renderCell : null;
      var renderFn = editRender ? rtCell : rtDefault;
      if (renderFn) {
        return (0, _vn.getSlotVNs)(renderFn.call($table, h, renderOpts, Object.assign({
          $type: editRender ? 'edit' : 'cell'
        }, params)));
      }
    }
    var cellValue = $table.getCellLabel(row, column);
    var cellPlaceholder = editRender ? editRender.placeholder : '';
    return [h('span', {
      class: 'vxe-cell--label'
    }, editRender && (0, _utils.eqEmptyValue)(cellValue) ? [
    // 如果设置占位符
    h('span', {
      class: 'vxe-cell--placeholder'
    }, _utils.default.formatText((0, _utils.getFuncText)(cellPlaceholder), 1))] : _utils.default.formatText(cellValue, 1))];
  },
  renderTreeCell: function renderTreeCell(h, params) {
    return Cell.renderTreeIcon(h, params, Cell.renderDefaultCell.call(this, h, params));
  },
  renderDefaultFooter: function renderDefaultFooter(h, params) {
    return [h('span', {
      class: 'vxe-cell--item'
    }, getFooterContent(h, params))];
  },
  /**
   * 树节点
   */
  renderTreeIcon: function renderTreeIcon(h, params, cellVNodes) {
    var $table = params.$table,
      isHidden = params.isHidden;
    var treeOpts = $table.treeOpts,
      treeExpandedMaps = $table.treeExpandedMaps,
      treeExpandLazyLoadedMaps = $table.treeExpandLazyLoadedMaps,
      fullAllDataRowIdData = $table.fullAllDataRowIdData;
    var row = params.row,
      column = params.column,
      level = params.level;
    var slots = column.slots;
    var indent = treeOpts.indent,
      lazy = treeOpts.lazy,
      trigger = treeOpts.trigger,
      iconLoaded = treeOpts.iconLoaded,
      showIcon = treeOpts.showIcon,
      iconOpen = treeOpts.iconOpen,
      iconClose = treeOpts.iconClose;
    var childrenField = treeOpts.children || treeOpts.childrenField;
    var hasChildField = treeOpts.hasChild || treeOpts.hasChildField;
    var rowChilds = row[childrenField];
    var hasChild = rowChilds && rowChilds.length;
    var hasLazyChilds = false;
    var isAceived = false;
    var isLazyLoading = false;
    var isLazyLoaded = false;
    var on = {};
    if (slots && slots.icon) {
      return $table.callSlot(slots.icon, params, h, cellVNodes);
    }
    if (!isHidden) {
      var rowid = (0, _util.getRowid)($table, row);
      isAceived = !!treeExpandedMaps[rowid];
      if (lazy) {
        var rest = fullAllDataRowIdData[rowid];
        isLazyLoading = !!treeExpandLazyLoadedMaps[rowid];
        hasLazyChilds = row[hasChildField];
        isLazyLoaded = !!rest.treeLoaded;
      }
    }
    if (!trigger || trigger === 'default') {
      on.click = function (evnt) {
        $table.triggerTreeExpandEvent(evnt, params);
      };
    }
    return [h('div', {
      class: ['vxe-cell--tree-node', {
        'is--active': isAceived
      }],
      style: {
        paddingLeft: "".concat(level * indent, "px")
      }
    }, [showIcon && (lazy ? isLazyLoaded ? hasChild : hasLazyChilds : hasChild) ? [h('div', {
      class: 'vxe-tree--btn-wrapper',
      on: on
    }, [h('i', {
      class: ['vxe-tree--node-btn', isLazyLoading ? iconLoaded || _conf.default.icon.TABLE_TREE_LOADED : isAceived ? iconOpen || _conf.default.icon.TABLE_TREE_OPEN : iconClose || _conf.default.icon.TABLE_TREE_CLOSE]
    })])] : null, h('div', {
      class: 'vxe-tree-cell'
    }, cellVNodes)])];
  },
  /**
   * 索引
   */
  renderSeqHeader: function renderSeqHeader(h, params) {
    var $table = params.$table,
      column = params.column;
    var slots = column.slots;
    return renderTitleContent(h, params, slots && slots.header ? $table.callSlot(slots.header, params, h) : _utils.default.formatText(column.getTitle(), 1));
  },
  renderSeqCell: function renderSeqCell(h, params) {
    var $table = params.$table,
      column = params.column;
    var treeConfig = $table.treeConfig,
      seqOpts = $table.seqOpts;
    var slots = column.slots;
    if (slots && slots.default) {
      return $table.callSlot(slots.default, params, h);
    }
    var seq = params.seq;
    var seqMethod = seqOpts.seqMethod;
    return [_utils.default.formatText(seqMethod ? seqMethod(params) : treeConfig ? seq : (seqOpts.startIndex || 0) + seq, 1)];
  },
  renderTreeIndexCell: function renderTreeIndexCell(h, params) {
    return Cell.renderTreeIcon(h, params, Cell.renderSeqCell(h, params));
  },
  /**
   * 单选
   */
  renderRadioHeader: function renderRadioHeader(h, params) {
    var $table = params.$table,
      column = params.column;
    var slots = column.slots;
    var headerSlot = slots ? slots.header : null;
    var titleSlot = slots ? slots.title : null;
    return renderTitleContent(h, params, headerSlot ? $table.callSlot(headerSlot, params, h) : [h('span', {
      class: 'vxe-radio--label'
    }, titleSlot ? $table.callSlot(titleSlot, params, h) : _utils.default.formatText(column.getTitle(), 1))]);
  },
  renderRadioCell: function renderRadioCell(h, params) {
    var $table = params.$table,
      column = params.column,
      isHidden = params.isHidden;
    var radioOpts = $table.radioOpts,
      selectRadioRow = $table.selectRadioRow;
    var slots = column.slots;
    var labelField = radioOpts.labelField,
      checkMethod = radioOpts.checkMethod,
      visibleMethod = radioOpts.visibleMethod;
    var row = params.row;
    var defaultSlot = slots ? slots.default : null;
    var radioSlot = slots ? slots.radio : null;
    var isChecked = row === selectRadioRow;
    var isVisible = !visibleMethod || visibleMethod({
      row: row
    });
    var isDisabled = !!checkMethod;
    var on;
    if (!isHidden) {
      on = {
        click: function click(evnt) {
          if (!isDisabled && isVisible) {
            $table.triggerRadioRowEvent(evnt, params);
          }
        }
      };
      if (checkMethod) {
        isDisabled = !checkMethod({
          row: row
        });
      }
    }
    var radioParams = _objectSpread(_objectSpread({}, params), {}, {
      checked: isChecked,
      disabled: isDisabled,
      visible: isVisible
    });
    if (radioSlot) {
      return $table.callSlot(radioSlot, radioParams, h);
    }
    var radioVNs = [];
    if (isVisible) {
      radioVNs.push(h('span', {
        class: ['vxe-radio--icon', isChecked ? _conf.default.icon.TABLE_RADIO_CHECKED : _conf.default.icon.TABLE_RADIO_UNCHECKED]
      }));
    }
    if (defaultSlot || labelField) {
      radioVNs.push(h('span', {
        class: 'vxe-radio--label'
      }, defaultSlot ? $table.callSlot(defaultSlot, radioParams, h) : _xeUtils.default.get(row, labelField)));
    }
    return [h('span', {
      class: ['vxe-cell--radio', {
        'is--checked': isChecked,
        'is--disabled': isDisabled
      }],
      on: on
    }, radioVNs)];
  },
  renderTreeRadioCell: function renderTreeRadioCell(h, params) {
    return Cell.renderTreeIcon(h, params, Cell.renderRadioCell(h, params));
  },
  /**
   * 多选
   */
  renderCheckboxHeader: function renderCheckboxHeader(h, params) {
    var $table = params.$table,
      column = params.column,
      isHidden = params.isHidden;
    var isAllCheckboxSelected = $table.isAllSelected,
      isAllCheckboxIndeterminate = $table.isIndeterminate,
      isAllCheckboxDisabled = $table.isAllCheckboxDisabled;
    var slots = column.slots;
    var headerSlot = slots ? slots.header : null;
    var titleSlot = slots ? slots.title : null;
    var checkboxOpts = $table.checkboxOpts;
    var headerTitle = column.getTitle();
    var on;
    if (!isHidden) {
      on = {
        click: function click(evnt) {
          if (!isAllCheckboxDisabled) {
            $table.triggerCheckAllEvent(evnt, !isAllCheckboxSelected);
          }
        }
      };
    }
    var checkboxParams = _objectSpread(_objectSpread({}, params), {}, {
      checked: isAllCheckboxSelected,
      disabled: isAllCheckboxDisabled,
      indeterminate: isAllCheckboxIndeterminate
    });
    if (headerSlot) {
      return renderTitleContent(h, checkboxParams, $table.callSlot(headerSlot, checkboxParams, h));
    }
    if (checkboxOpts.checkStrictly ? !checkboxOpts.showHeader : checkboxOpts.showHeader === false) {
      return renderTitleContent(h, checkboxParams, [h('span', {
        class: 'vxe-checkbox--label'
      }, titleSlot ? $table.callSlot(titleSlot, checkboxParams, h) : headerTitle)]);
    }
    return renderTitleContent(h, checkboxParams, [h('span', {
      class: ['vxe-cell--checkbox', {
        'is--checked': isAllCheckboxSelected,
        'is--disabled': isAllCheckboxDisabled,
        'is--indeterminate': isAllCheckboxIndeterminate
      }],
      attrs: {
        title: _conf.default.i18n('vxe.table.allTitle')
      },
      on: on
    }, [h('span', {
      class: ['vxe-checkbox--icon', isAllCheckboxIndeterminate ? _conf.default.icon.TABLE_CHECKBOX_INDETERMINATE : isAllCheckboxSelected ? _conf.default.icon.TABLE_CHECKBOX_CHECKED : _conf.default.icon.TABLE_CHECKBOX_UNCHECKED]
    })].concat(titleSlot || headerTitle ? [h('span', {
      class: 'vxe-checkbox--label'
    }, titleSlot ? $table.callSlot(titleSlot, checkboxParams, h) : headerTitle)] : []))]);
  },
  renderCheckboxCell: function renderCheckboxCell(h, params) {
    var $table = params.$table,
      row = params.row,
      column = params.column,
      isHidden = params.isHidden;
    var treeConfig = $table.treeConfig,
      treeIndeterminateMaps = $table.treeIndeterminateMaps,
      selectCheckboxMaps = $table.selectCheckboxMaps;
    var _$table$checkboxOpts = $table.checkboxOpts,
      labelField = _$table$checkboxOpts.labelField,
      checkMethod = _$table$checkboxOpts.checkMethod,
      visibleMethod = _$table$checkboxOpts.visibleMethod;
    var slots = column.slots;
    var defaultSlot = slots ? slots.default : null;
    var checkboxSlot = slots ? slots.checkbox : null;
    var indeterminate = false;
    var isChecked = false;
    var isVisible = !visibleMethod || visibleMethod({
      row: row
    });
    var isDisabled = !!checkMethod;
    var on;
    if (!isHidden) {
      var rowid = (0, _util.getRowid)($table, row);
      isChecked = !!selectCheckboxMaps[rowid];
      on = {
        click: function click(evnt) {
          if (!isDisabled && isVisible) {
            $table.triggerCheckRowEvent(evnt, params, !isChecked);
          }
        }
      };
      if (checkMethod) {
        isDisabled = !checkMethod({
          row: row
        });
      }
      if (treeConfig) {
        indeterminate = !!treeIndeterminateMaps[rowid];
      }
    }
    var checkboxParams = _objectSpread(_objectSpread({}, params), {}, {
      checked: isChecked,
      disabled: isDisabled,
      visible: isVisible,
      indeterminate: indeterminate
    });
    if (checkboxSlot) {
      return $table.callSlot(checkboxSlot, checkboxParams, h);
    }
    var checkVNs = [];
    if (isVisible) {
      checkVNs.push(h('span', {
        class: ['vxe-checkbox--icon', indeterminate ? _conf.default.icon.TABLE_CHECKBOX_INDETERMINATE : isChecked ? _conf.default.icon.TABLE_CHECKBOX_CHECKED : _conf.default.icon.TABLE_CHECKBOX_UNCHECKED]
      }));
    }
    if (defaultSlot || labelField) {
      checkVNs.push(h('span', {
        class: 'vxe-checkbox--label'
      }, defaultSlot ? $table.callSlot(defaultSlot, checkboxParams, h) : _xeUtils.default.get(row, labelField)));
    }
    return [h('span', {
      class: ['vxe-cell--checkbox', {
        'is--checked': isChecked,
        'is--disabled': isDisabled,
        'is--indeterminate': indeterminate,
        'is--hidden': !isVisible
      }],
      on: on
    }, checkVNs)];
  },
  renderTreeSelectionCell: function renderTreeSelectionCell(h, params) {
    return Cell.renderTreeIcon(h, params, Cell.renderCheckboxCell(h, params));
  },
  renderCheckboxCellByProp: function renderCheckboxCellByProp(h, params) {
    var $table = params.$table,
      row = params.row,
      column = params.column,
      isHidden = params.isHidden;
    var treeConfig = $table.treeConfig,
      treeIndeterminateMaps = $table.treeIndeterminateMaps,
      checkboxOpts = $table.checkboxOpts;
    var labelField = checkboxOpts.labelField,
      checkField = checkboxOpts.checkField,
      checkMethod = checkboxOpts.checkMethod,
      visibleMethod = checkboxOpts.visibleMethod;
    var indeterminateField = checkboxOpts.indeterminateField || checkboxOpts.halfField;
    var slots = column.slots;
    var defaultSlot = slots ? slots.default : null;
    var checkboxSlot = slots ? slots.checkbox : null;
    var isIndeterminate = false;
    var isChecked = false;
    var isVisible = !visibleMethod || visibleMethod({
      row: row
    });
    var isDisabled = !!checkMethod;
    var on;
    if (!isHidden) {
      var rowid = (0, _util.getRowid)($table, row);
      isChecked = _xeUtils.default.get(row, checkField);
      on = {
        click: function click(evnt) {
          if (!isDisabled && isVisible) {
            $table.triggerCheckRowEvent(evnt, params, !isChecked);
          }
        }
      };
      if (checkMethod) {
        isDisabled = !checkMethod({
          row: row
        });
      }
      if (treeConfig) {
        isIndeterminate = !!treeIndeterminateMaps[rowid];
      }
    }
    var checkboxParams = _objectSpread(_objectSpread({}, params), {}, {
      checked: isChecked,
      disabled: isDisabled,
      visible: isVisible,
      indeterminate: isIndeterminate
    });
    if (checkboxSlot) {
      return $table.callSlot(checkboxSlot, checkboxParams, h);
    }
    var checkVNs = [];
    if (isVisible) {
      checkVNs.push(h('span', {
        class: ['vxe-checkbox--icon', isIndeterminate ? _conf.default.icon.TABLE_CHECKBOX_INDETERMINATE : isChecked ? _conf.default.icon.TABLE_CHECKBOX_CHECKED : _conf.default.icon.TABLE_CHECKBOX_UNCHECKED]
      }));
    }
    if (defaultSlot || labelField) {
      checkVNs.push(h('span', {
        class: 'vxe-checkbox--label'
      }, defaultSlot ? $table.callSlot(defaultSlot, checkboxParams, h) : _xeUtils.default.get(row, labelField)));
    }
    return [h('span', {
      class: ['vxe-cell--checkbox', {
        'is--checked': isChecked,
        'is--disabled': isDisabled,
        'is--indeterminate': indeterminateField && !isChecked ? row[indeterminateField] : isIndeterminate,
        'is--hidden': !isVisible
      }],
      on: on
    }, checkVNs)];
  },
  renderTreeSelectionCellByProp: function renderTreeSelectionCellByProp(h, params) {
    return Cell.renderTreeIcon(h, params, Cell.renderCheckboxCellByProp(h, params));
  },
  /**
   * 展开行
   */
  renderExpandCell: function renderExpandCell(h, params) {
    var $table = params.$table,
      isHidden = params.isHidden,
      row = params.row,
      column = params.column;
    var expandOpts = $table.expandOpts,
      rowExpandedMaps = $table.rowExpandedMaps,
      rowExpandLazyLoadedMaps = $table.rowExpandLazyLoadedMaps;
    var lazy = expandOpts.lazy,
      labelField = expandOpts.labelField,
      iconLoaded = expandOpts.iconLoaded,
      showIcon = expandOpts.showIcon,
      iconOpen = expandOpts.iconOpen,
      iconClose = expandOpts.iconClose,
      visibleMethod = expandOpts.visibleMethod;
    var slots = column.slots;
    var defaultSlot = slots ? slots.default : null;
    var isAceived = false;
    var isLazyLoading = false;
    if (slots && slots.icon) {
      return $table.callSlot(slots.icon, params, h);
    }
    if (!isHidden) {
      var rowid = (0, _util.getRowid)($table, row);
      isAceived = !!rowExpandedMaps[rowid];
      if (lazy) {
        isLazyLoading = !!rowExpandLazyLoadedMaps[rowid];
      }
    }
    return [showIcon && (!visibleMethod || visibleMethod(params)) ? h('span', {
      class: ['vxe-table--expanded', {
        'is--active': isAceived
      }],
      on: {
        click: function click(evnt) {
          $table.triggerRowExpandEvent(evnt, params);
        }
      }
    }, [h('i', {
      class: ['vxe-table--expand-btn', isLazyLoading ? iconLoaded || _conf.default.icon.TABLE_EXPAND_LOADED : isAceived ? iconOpen || _conf.default.icon.TABLE_EXPAND_OPEN : iconClose || _conf.default.icon.TABLE_EXPAND_CLOSE]
    })]) : null, defaultSlot || labelField ? h('span', {
      class: 'vxe-table--expand-label'
    }, defaultSlot ? $table.callSlot(defaultSlot, params, h) : _xeUtils.default.get(row, labelField)) : null];
  },
  renderExpandData: function renderExpandData(h, params) {
    var $table = params.$table,
      column = params.column;
    var slots = column.slots,
      contentRender = column.contentRender;
    if (slots && slots.content) {
      return $table.callSlot(slots.content, params, h);
    }
    if (contentRender) {
      var compConf = _vXETable.default.renderer.get(contentRender.name);
      var rtExpand = compConf ? compConf.renderTableExpand || compConf.renderExpand : null;
      if (rtExpand) {
        return (0, _vn.getSlotVNs)(rtExpand.call($table, h, contentRender, params));
      }
    }
    return [];
  },
  /**
   * HTML 标签
   */
  renderHTMLCell: function renderHTMLCell(h, params) {
    var $table = params.$table,
      column = params.column;
    var slots = column.slots;
    if (slots && slots.default) {
      return $table.callSlot(slots.default, params, h);
    }
    return [h('span', {
      class: 'vxe-cell--html',
      domProps: {
        innerHTML: getDefaultCellLabel(params)
      }
    })];
  },
  renderTreeHTMLCell: function renderTreeHTMLCell(h, params) {
    return Cell.renderTreeIcon(h, params, Cell.renderHTMLCell(h, params));
  },
  /**
   * 排序和筛选
   */
  renderSortAndFilterHeader: function renderSortAndFilterHeader(h, params) {
    return Cell.renderDefaultHeader(h, params).concat(Cell.renderSortIcon(h, params)).concat(Cell.renderFilterIcon(h, params));
  },
  /**
   * 排序
   */
  renderSortHeader: function renderSortHeader(h, params) {
    return Cell.renderDefaultHeader(h, params).concat(Cell.renderSortIcon(h, params));
  },
  renderSortIcon: function renderSortIcon(h, params) {
    var $table = params.$table,
      column = params.column;
    var _$table$sortOpts = $table.sortOpts,
      showIcon = _$table$sortOpts.showIcon,
      iconLayout = _$table$sortOpts.iconLayout,
      iconAsc = _$table$sortOpts.iconAsc,
      iconDesc = _$table$sortOpts.iconDesc;
    return showIcon ? [h('span', {
      class: ['vxe-cell--sort', "vxe-cell--sort-".concat(iconLayout, "-layout")]
    }, [h('i', {
      class: ['vxe-sort--asc-btn', iconAsc || _conf.default.icon.TABLE_SORT_ASC, {
        'sort--active': column.order === 'asc'
      }],
      attrs: {
        title: _conf.default.i18n('vxe.table.sortAsc')
      },
      on: {
        click: function click(evnt) {
          evnt.stopPropagation();
          $table.triggerSortEvent(evnt, column, 'asc');
        }
      }
    }), h('i', {
      class: ['vxe-sort--desc-btn', iconDesc || _conf.default.icon.TABLE_SORT_DESC, {
        'sort--active': column.order === 'desc'
      }],
      attrs: {
        title: _conf.default.i18n('vxe.table.sortDesc')
      },
      on: {
        click: function click(evnt) {
          evnt.stopPropagation();
          $table.triggerSortEvent(evnt, column, 'desc');
        }
      }
    })])] : [];
  },
  /**
   * 筛选
   */
  renderFilterHeader: function renderFilterHeader(h, params) {
    return Cell.renderDefaultHeader(h, params).concat(Cell.renderFilterIcon(h, params));
  },
  renderFilterIcon: function renderFilterIcon(h, params) {
    var $table = params.$table,
      column = params.column,
      hasFilter = params.hasFilter;
    var filterStore = $table.filterStore,
      filterOpts = $table.filterOpts;
    var showIcon = filterOpts.showIcon,
      iconNone = filterOpts.iconNone,
      iconMatch = filterOpts.iconMatch;
    return showIcon ? [h('span', {
      class: ['vxe-cell--filter', {
        'is--active': filterStore.visible && filterStore.column === column
      }]
    }, [h('i', {
      class: ['vxe-filter--btn', hasFilter ? iconMatch || _conf.default.icon.TABLE_FILTER_MATCH : iconNone || _conf.default.icon.TABLE_FILTER_NONE],
      attrs: {
        title: _conf.default.i18n('vxe.table.filter')
      },
      on: {
        click: function click(evnt) {
          if ($table.triggerFilterEvent) {
            $table.triggerFilterEvent(evnt, params.column, params);
          }
        }
      }
    })])] : [];
  },
  /**
   * 可编辑
   */
  renderEditHeader: function renderEditHeader(h, params) {
    var $table = params.$table,
      column = params.column;
    var editConfig = $table.editConfig,
      editRules = $table.editRules,
      editOpts = $table.editOpts;
    var sortable = column.sortable,
      remoteSort = column.remoteSort,
      filters = column.filters,
      editRender = column.editRender;
    var isRequired = false;
    if (editRules) {
      var columnRules = _xeUtils.default.get(editRules, column.field);
      if (columnRules) {
        isRequired = columnRules.some(function (rule) {
          return rule.required;
        });
      }
    }
    return ((0, _utils.isEnableConf)(editConfig) ? [isRequired && editOpts.showAsterisk ? h('i', {
      class: 'vxe-cell--required-icon'
    }) : null, (0, _utils.isEnableConf)(editRender) && editOpts.showIcon ? h('i', {
      class: ['vxe-cell--edit-icon', editOpts.icon || _conf.default.icon.TABLE_EDIT]
    }) : null] : []).concat(Cell.renderDefaultHeader(h, params)).concat(sortable || remoteSort ? Cell.renderSortIcon(h, params) : []).concat(filters ? Cell.renderFilterIcon(h, params) : []);
  },
  // 行格编辑模式
  renderRowEdit: function renderRowEdit(h, params) {
    var $table = params.$table,
      column = params.column;
    var editRender = column.editRender;
    var actived = $table.editStore.actived;
    return Cell.runRenderer(h, params, this, (0, _utils.isEnableConf)(editRender) && actived && actived.row === params.row);
  },
  renderTreeRowEdit: function renderTreeRowEdit(h, params) {
    return Cell.renderTreeIcon(h, params, Cell.renderRowEdit(h, params));
  },
  // 单元格编辑模式
  renderCellEdit: function renderCellEdit(h, params) {
    var $table = params.$table,
      column = params.column;
    var editRender = column.editRender;
    var actived = $table.editStore.actived;
    return Cell.runRenderer(h, params, this, (0, _utils.isEnableConf)(editRender) && actived && actived.row === params.row && actived.column === params.column);
  },
  renderTreeCellEdit: function renderTreeCellEdit(h, params) {
    return Cell.renderTreeIcon(h, params, Cell.renderCellEdit(h, params));
  },
  runRenderer: function runRenderer(h, params, _vm, isEdit) {
    var $table = params.$table,
      column = params.column;
    var slots = column.slots,
      editRender = column.editRender,
      formatter = column.formatter;
    var compConf = _vXETable.default.renderer.get(editRender.name);
    var rtEdit = compConf ? compConf.renderTableEdit || compConf.renderEdit : null;
    if (isEdit) {
      if (slots && slots.edit) {
        return $table.callSlot(slots.edit, params, h);
      }
      if (rtEdit) {
        return (0, _vn.getSlotVNs)(rtEdit.call($table, h, editRender, Object.assign({
          $type: 'edit'
        }, params)));
      }
      return [];
    }
    if (slots && slots.default) {
      return $table.callSlot(slots.default, params, h);
    }
    if (formatter) {
      return [h('span', {
        class: 'vxe-cell--label'
      }, [getDefaultCellLabel(params)])];
    }
    return Cell.renderDefaultCell.call(_vm, h, params);
  }
};
var _default = exports.default = Cell;