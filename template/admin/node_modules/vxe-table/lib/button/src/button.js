"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _conf = _interopRequireDefault(require("../../v-x-e-table/src/conf"));
var _size = _interopRequireDefault(require("../../mixins/size"));
var _utils = _interopRequireWildcard(require("../../tools/utils"));
var _dom = _interopRequireDefault(require("../../tools/dom"));
var _event = require("../../tools/event");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// import { warnLog } from '../../tools/log'
var _default2 = exports.default = {
  name: 'VxeButton',
  mixins: [_size.default],
  props: {
    type: String,
    mode: String,
    size: {
      type: String,
      default: function _default() {
        return _conf.default.button.size || _conf.default.size;
      }
    },
    name: [String, Number],
    content: String,
    placement: String,
    status: String,
    icon: String,
    round: Boolean,
    circle: Boolean,
    title: String,
    disabled: Boolean,
    loading: Boolean,
    trigger: {
      type: String,
      default: function _default() {
        return _conf.default.button.trigger;
      }
    },
    destroyOnClose: Boolean,
    className: [String, Function],
    popupClassName: [String, Function],
    transfer: {
      type: Boolean,
      default: function _default() {
        return _conf.default.button.transfer;
      }
    }
  },
  inject: {
    $xebuttonggroup: {
      default: null
    }
  },
  data: function data() {
    return {
      inited: false,
      visiblePanel: false,
      animatVisible: false,
      isActivated: false,
      panelIndex: 0,
      panelStyle: null,
      panelPlacement: null
    };
  },
  computed: {
    isFormBtn: function isFormBtn() {
      var type = this.type;
      if (type) {
        return ['submit', 'reset', 'button'].indexOf(type) > -1;
      }
      return false;
    },
    btnMode: function btnMode() {
      var $xebuttonggroup = this.$xebuttonggroup,
        mode = this.mode,
        type = this.type;
      if (mode === 'text' || type === 'text' || $xebuttonggroup && $xebuttonggroup.mode === 'text') {
        return 'text';
      }
      return 'button';
    },
    btnStatus: function btnStatus() {
      var $xebuttonggroup = this.$xebuttonggroup,
        status = this.status;
      if (status) {
        return status;
      }
      if ($xebuttonggroup) {
        return $xebuttonggroup.status;
      }
      return '';
    },
    btnRound: function btnRound() {
      var $xebuttonggroup = this.$xebuttonggroup,
        round = this.round;
      if (round) {
        return round;
      }
      if ($xebuttonggroup) {
        return $xebuttonggroup.round;
      }
      return false;
    },
    btnCircle: function btnCircle() {
      var $xebuttonggroup = this.$xebuttonggroup,
        circle = this.circle;
      if (circle) {
        return circle;
      }
      if ($xebuttonggroup) {
        return $xebuttonggroup.circle;
      }
      return false;
    }
  },
  created: function created() {
    // if (process.env.NODE_ENV === 'development') {
    //   if (this.type === 'text') {
    //     warnLog('vxe.error.delProp', ['type=text', 'mode=text'])
    //   }
    // }

    _event.GlobalEvent.on(this, 'mousewheel', this.handleGlobalMousewheelEvent);
    _event.GlobalEvent.on(this, 'mousedown', this.handleGlobalMousedownEvent);
  },
  beforeDestroy: function beforeDestroy() {
    var panelElem = this.$refs.btnPanel;
    if (panelElem && panelElem.parentNode) {
      panelElem.parentNode.removeChild(panelElem);
    }
  },
  destroyed: function destroyed() {
    _event.GlobalEvent.off(this, 'mousewheel');
    _event.GlobalEvent.off(this, 'mousedown');
  },
  render: function render(h) {
    var $scopedSlots = this.$scopedSlots,
      className = this.className,
      popupClassName = this.popupClassName,
      trigger = this.trigger,
      title = this.title,
      inited = this.inited,
      type = this.type,
      destroyOnClose = this.destroyOnClose,
      isFormBtn = this.isFormBtn,
      btnMode = this.btnMode,
      btnStatus = this.btnStatus,
      btnRound = this.btnRound,
      btnCircle = this.btnCircle,
      vSize = this.vSize,
      name = this.name,
      disabled = this.disabled,
      loading = this.loading,
      visiblePanel = this.visiblePanel,
      animatVisible = this.animatVisible,
      panelPlacement = this.panelPlacement;
    var downsSlot = $scopedSlots.dropdowns;
    var btnOns = {};
    var panelOns = {};
    if (downsSlot && trigger === 'hover') {
      // hover 触发
      btnOns.mouseenter = this.mouseenterTargetEvent;
      btnOns.mouseleave = this.mouseleaveTargetEvent;
      panelOns.mouseenter = this.mouseenterDropdownEvent;
      panelOns.mouseleave = this.mouseleaveDropdownEvent;
    }
    return downsSlot ? h('div', {
      class: ['vxe-button--dropdown', className ? _xeUtils.default.isFunction(className) ? className({
        $button: this
      }) : className : '', _defineProperty(_defineProperty({}, "size--".concat(vSize), vSize), 'is--active', visiblePanel)]
    }, [h('button', {
      ref: 'xBtn',
      class: ['vxe-button', "type--".concat(btnMode), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "size--".concat(vSize), vSize), "theme--".concat(btnStatus), btnStatus), 'is--round', btnRound), 'is--circle', btnCircle), 'is--disabled', disabled || loading), 'is--loading', loading)],
      attrs: {
        name: name,
        title: title,
        type: isFormBtn ? type : 'button',
        disabled: disabled || loading
      },
      on: _objectSpread({
        click: this.clickTargetEvent
      }, btnOns)
    }, this.renderContent(h).concat([h('i', {
      class: "vxe-button--dropdown-arrow ".concat(_conf.default.icon.BUTTON_DROPDOWN)
    })])), h('div', {
      ref: 'btnPanel',
      class: ['vxe-button--dropdown-panel', popupClassName ? _xeUtils.default.isFunction(popupClassName) ? popupClassName({
        $button: this
      }) : popupClassName : '', _defineProperty(_defineProperty(_defineProperty({}, "size--".concat(vSize), vSize), 'animat--leave', animatVisible), 'animat--enter', visiblePanel)],
      attrs: {
        placement: panelPlacement
      },
      style: this.panelStyle,
      on: panelOns
    }, inited ? [h('div', {
      class: 'vxe-button--dropdown-wrapper',
      on: {
        mousedown: this.mousedownDropdownEvent,
        click: this.clickDropdownEvent
      }
    }, destroyOnClose && !visiblePanel ? [] : downsSlot.call(this, {}, h))] : null)]) : h('button', {
      ref: 'xBtn',
      class: ['vxe-button', "type--".concat(btnMode), className ? _xeUtils.default.isFunction(className) ? className({
        $button: this
      }) : className : '', _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "size--".concat(vSize), vSize), "theme--".concat(btnStatus), btnStatus), 'is--round', btnRound), 'is--circle', btnCircle), 'is--disabled', disabled || loading), 'is--loading', loading)],
      attrs: {
        name: name,
        title: title,
        type: isFormBtn ? type : 'button',
        disabled: disabled || loading
      },
      on: {
        click: this.clickEvent,
        onMouseenter: this.mouseenterEvent,
        onMouseleave: this.mouseleaveEvent
      }
    }, this.renderContent(h));
  },
  methods: {
    renderContent: function renderContent(h) {
      var $scopedSlots = this.$scopedSlots,
        content = this.content,
        icon = this.icon,
        loading = this.loading;
      var contents = [];
      if (loading) {
        contents.push(h('i', {
          class: ['vxe-button--loading-icon', _conf.default.icon.BUTTON_LOADING]
        }));
      } else if ($scopedSlots.icon) {
        contents.push(h('span', {
          class: 'vxe-button--custom-icon'
        }, $scopedSlots.icon.call(this, {})));
      } else if (icon) {
        contents.push(h('i', {
          class: ['vxe-button--icon', icon]
        }));
      }
      if ($scopedSlots.default) {
        contents.push(h('span', {
          class: 'vxe-button--content'
        }, $scopedSlots.default.call(this, {})));
      } else if (content) {
        contents.push(h('span', {
          class: 'vxe-button--content'
        }, [(0, _utils.getFuncText)(content)]));
      }
      return contents;
    },
    handleGlobalMousewheelEvent: function handleGlobalMousewheelEvent(evnt) {
      if (this.visiblePanel && !_dom.default.getEventTargetNode(evnt, this.$refs.btnPanel).flag) {
        this.closePanel();
      }
    },
    handleGlobalMousedownEvent: function handleGlobalMousedownEvent(evnt) {
      var disabled = this.disabled,
        visiblePanel = this.visiblePanel;
      if (!disabled) {
        var el = this.$refs.$el;
        var panelElem = this.$refs.btnPanel;
        this.isActivated = _dom.default.getEventTargetNode(evnt, el).flag || _dom.default.getEventTargetNode(evnt, panelElem).flag;
        if (visiblePanel && !this.isActivated) {
          this.closePanel();
        }
      }
    },
    updateZindex: function updateZindex() {
      if (this.panelIndex < _utils.default.getLastZIndex()) {
        this.panelIndex = _utils.default.nextZIndex();
      }
    },
    mousedownDropdownEvent: function mousedownDropdownEvent(evnt) {
      var isLeftBtn = evnt.button === 0;
      if (isLeftBtn) {
        evnt.stopPropagation();
      }
    },
    clickEvent: function clickEvent(evnt) {
      var $xebuttonggroup = this.$xebuttonggroup;
      if ($xebuttonggroup) {
        $xebuttonggroup.handleClick({
          name: this.name
        }, evnt);
      } else {
        this.$emit('click', {
          $event: evnt
        });
      }
    },
    clickDropdownEvent: function clickDropdownEvent(evnt) {
      var _this = this;
      var dropdownElem = evnt.currentTarget;
      var panelElem = this.$refs.btnPanel;
      var _DomTools$getEventTar = _dom.default.getEventTargetNode(evnt, dropdownElem, 'vxe-button'),
        flag = _DomTools$getEventTar.flag,
        targetElem = _DomTools$getEventTar.targetElem;
      if (flag) {
        if (panelElem) {
          panelElem.dataset.active = 'N';
        }
        this.visiblePanel = false;
        setTimeout(function () {
          if (!panelElem || panelElem.dataset.active !== 'Y') {
            _this.animatVisible = false;
          }
        }, 350);
        this.$emit('dropdown-click', {
          name: targetElem.getAttribute('name'),
          $event: evnt
        });
      }
    },
    mouseleaveTargetEvent: function mouseleaveTargetEvent(evnt) {
      this.closePanel();
      this.mouseleaveEvent(evnt);
    },
    mouseenterEvent: function mouseenterEvent(evnt) {
      this.$emit('mouseenter', {
        $event: evnt
      });
    },
    mouseleaveEvent: function mouseleaveEvent(evnt) {
      this.$emit('mouseleave', {
        $event: evnt
      });
    },
    mouseenterTargetEvent: function mouseenterTargetEvent(evnt) {
      this.openPanel();
      this.$emit('mouseenter', {
        $event: evnt
      });
    },
    mouseenterDropdownEvent: function mouseenterDropdownEvent() {
      var _this2 = this;
      var panelElem = this.$refs.btnPanel;
      if (panelElem) {
        panelElem.dataset.active = 'Y';
        this.animatVisible = true;
        setTimeout(function () {
          if (panelElem.dataset.active === 'Y') {
            _this2.visiblePanel = true;
            _this2.updateZindex();
            _this2.updatePlacement();
            setTimeout(function () {
              if (_this2.visiblePanel) {
                _this2.updatePlacement();
              }
            }, 50);
          }
        }, 20);
      }
    },
    mouseleaveDropdownEvent: function mouseleaveDropdownEvent() {
      this.closePanel();
    },
    clickTargetEvent: function clickTargetEvent(evnt) {
      var trigger = this.trigger;
      if (trigger === 'click') {
        if (this.visiblePanel) {
          this.closePanel();
        } else {
          this.openPanel();
        }
      }
      this.clickEvent(evnt);
    },
    openPanel: function openPanel() {
      var _this3 = this;
      var trigger = this.trigger;
      var panelElem = this.$refs.btnPanel;
      if (panelElem) {
        panelElem.dataset.active = 'Y';
        if (!this.inited) {
          this.inited = true;
          if (this.transfer) {
            document.body.appendChild(panelElem);
          }
        }
        this.showTime = setTimeout(function () {
          if (panelElem.dataset.active === 'Y') {
            _this3.mouseenterDropdownEvent();
          } else {
            _this3.animatVisible = false;
          }
        }, trigger === 'click' ? 50 : 250);
      }
      return this.$nextTick();
    },
    closePanel: function closePanel() {
      var _this4 = this;
      var panelElem = this.$refs.btnPanel;
      clearTimeout(this.showTime);
      if (panelElem) {
        panelElem.dataset.active = 'N';
        setTimeout(function () {
          if (panelElem.dataset.active !== 'Y') {
            _this4.visiblePanel = false;
            setTimeout(function () {
              if (panelElem.dataset.active !== 'Y') {
                _this4.animatVisible = false;
              }
            }, 350);
          }
        }, 100);
      } else {
        this.animatVisible = false;
        this.visiblePanel = false;
      }
      return this.$nextTick();
    },
    updatePlacement: function updatePlacement() {
      var _this5 = this;
      return this.$nextTick().then(function () {
        var $refs = _this5.$refs,
          transfer = _this5.transfer,
          placement = _this5.placement,
          panelIndex = _this5.panelIndex;
        var targetElem = $refs.xBtn;
        var panelElem = $refs.btnPanel;
        if (panelElem && targetElem) {
          var targetHeight = targetElem.offsetHeight;
          var targetWidth = targetElem.offsetWidth;
          var panelHeight = panelElem.offsetHeight;
          var panelWidth = panelElem.offsetWidth;
          var marginSize = 5;
          var panelStyle = {
            zIndex: panelIndex
          };
          var _DomTools$getAbsolute = _dom.default.getAbsolutePos(targetElem),
            top = _DomTools$getAbsolute.top,
            left = _DomTools$getAbsolute.left,
            boundingTop = _DomTools$getAbsolute.boundingTop,
            visibleHeight = _DomTools$getAbsolute.visibleHeight,
            visibleWidth = _DomTools$getAbsolute.visibleWidth;
          var panelPlacement = 'bottom';
          if (transfer) {
            var btnLeft = left + targetWidth - panelWidth;
            var btnTop = top + targetHeight;
            if (placement === 'top') {
              panelPlacement = 'top';
              btnTop = top - panelHeight;
            } else if (!placement) {
              // 如果下面不够放，则向上
              if (boundingTop + targetHeight + panelHeight + marginSize > visibleHeight) {
                panelPlacement = 'top';
                btnTop = top - panelHeight;
              }
              // 如果上面不够放，则向下（优先）
              if (btnTop < marginSize) {
                panelPlacement = 'bottom';
                btnTop = top + targetHeight;
              }
            }
            // 如果溢出右边
            if (btnLeft + panelWidth + marginSize > visibleWidth) {
              btnLeft -= btnLeft + panelWidth + marginSize - visibleWidth;
            }
            // 如果溢出左边
            if (btnLeft < marginSize) {
              btnLeft = marginSize;
            }
            Object.assign(panelStyle, {
              left: "".concat(btnLeft, "px"),
              right: 'auto',
              top: "".concat(btnTop, "px"),
              minWidth: "".concat(targetWidth, "px")
            });
          } else {
            if (placement === 'top') {
              panelPlacement = 'top';
              panelStyle.bottom = "".concat(targetHeight, "px");
            } else if (!placement) {
              // 如果下面不够放，则向上
              if (boundingTop + targetHeight + panelHeight > visibleHeight) {
                // 如果上面不够放，则向下（优先）
                if (boundingTop - targetHeight - panelHeight > marginSize) {
                  panelPlacement = 'top';
                  panelStyle.bottom = "".concat(targetHeight, "px");
                }
              }
            }
          }
          _this5.panelStyle = panelStyle;
          _this5.panelPlacement = panelPlacement;
          return _this5.$nextTick();
        }
      });
    },
    focus: function focus() {
      this.$el.focus();
      return this.$nextTick();
    },
    blur: function blur() {
      this.$el.blur();
      return this.$nextTick();
    }
  }
};