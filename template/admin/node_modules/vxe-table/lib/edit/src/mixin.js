"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _xeUtils = _interopRequireDefault(require("xe-utils"));
var _vXETable = _interopRequireDefault(require("../../v-x-e-table"));
var _conf = _interopRequireDefault(require("../../v-x-e-table/src/conf"));
var _utils = _interopRequireWildcard(require("../../tools/utils"));
var _util = require("../../table/src/util");
var _dom = _interopRequireWildcard(require("../../tools/dom"));
var _log = require("../../tools/log");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function insertTreeRow(_vm, newRecords, isAppend) {
  var tableFullTreeData = _vm.tableFullTreeData,
    afterFullData = _vm.afterFullData,
    fullDataRowIdData = _vm.fullDataRowIdData,
    fullAllDataRowIdData = _vm.fullAllDataRowIdData,
    treeOpts = _vm.treeOpts;
  var rowField = treeOpts.rowField,
    parentField = treeOpts.parentField,
    mapChildrenField = treeOpts.mapChildrenField;
  var childrenField = treeOpts.children || treeOpts.childrenField;
  var funcName = isAppend ? 'push' : 'unshift';
  newRecords.forEach(function (item) {
    var parentRowId = item[parentField];
    var rowid = (0, _util.getRowid)(_vm, item);
    var matchObj = parentRowId ? _xeUtils.default.findTree(tableFullTreeData, function (item) {
      return parentRowId === item[rowField];
    }, {
      children: mapChildrenField
    }) : null;
    if (matchObj) {
      var parentRow = matchObj.item;
      var parentRest = fullAllDataRowIdData[(0, _util.getRowid)(_vm, parentRow)];
      var parentLevel = parentRest ? parentRest.level : 0;
      var parentChilds = parentRow[childrenField];
      var mapChilds = parentRow[mapChildrenField];
      if (!_xeUtils.default.isArray(parentChilds)) {
        parentChilds = parentRow[childrenField] = [];
      }
      if (!_xeUtils.default.isArray(mapChilds)) {
        mapChilds = parentRow[childrenField] = [];
      }
      parentChilds[funcName](item);
      mapChilds[funcName](item);
      var rest = {
        row: item,
        rowid: rowid,
        seq: -1,
        index: -1,
        _index: -1,
        $index: -1,
        items: parentChilds,
        parent: parentRow,
        level: parentLevel + 1
      };
      fullDataRowIdData[rowid] = rest;
      fullAllDataRowIdData[rowid] = rest;
    } else {
      if (process.env.NODE_ENV === 'development') {
        if (parentRowId) {
          (0, _log.warnLog)('vxe.error.unableInsert');
        }
      }
      afterFullData[funcName](item);
      tableFullTreeData[funcName](item);
      var _rest = {
        row: item,
        rowid: rowid,
        seq: -1,
        index: -1,
        _index: -1,
        $index: -1,
        items: tableFullTreeData,
        parent: null,
        level: 0
      };
      fullDataRowIdData[rowid] = _rest;
      fullAllDataRowIdData[rowid] = _rest;
    }
  });
}
function handleInsertRowAt(_vm, records, row, isInsertNextRow) {
  var tableFullTreeData = _vm.tableFullTreeData,
    mergeList = _vm.mergeList,
    afterFullData = _vm.afterFullData,
    editStore = _vm.editStore,
    tableFullData = _vm.tableFullData,
    treeConfig = _vm.treeConfig,
    fullDataRowIdData = _vm.fullDataRowIdData,
    fullAllDataRowIdData = _vm.fullAllDataRowIdData,
    treeOpts = _vm.treeOpts;
  var transform = treeOpts.transform,
    rowField = treeOpts.rowField,
    mapChildrenField = treeOpts.mapChildrenField;
  var childrenField = treeOpts.children || treeOpts.childrenField;
  if (!_xeUtils.default.isArray(records)) {
    records = [records];
  }
  var newRecords = _vm.defineField(records.map(function (record) {
    return Object.assign(treeConfig && transform ? _defineProperty(_defineProperty({}, mapChildrenField, []), childrenField, []) : {}, record);
  }));
  if (_xeUtils.default.eqNull(row)) {
    // 如果为虚拟树
    if (treeConfig && transform) {
      insertTreeRow(_vm, newRecords, false);
    } else {
      afterFullData.unshift.apply(afterFullData, _toConsumableArray(newRecords));
      tableFullData.unshift.apply(tableFullData, _toConsumableArray(newRecords));
      // 刷新单元格合并
      mergeList.forEach(function (mergeItem) {
        var mergeRowIndex = mergeItem.row;
        if (mergeRowIndex > 0) {
          mergeItem.row = mergeRowIndex + newRecords.length;
        }
      });
    }
  } else {
    if (row === -1) {
      // 如果为虚拟树
      if (treeConfig && transform) {
        insertTreeRow(_vm, newRecords, true);
      } else {
        afterFullData.push.apply(afterFullData, _toConsumableArray(newRecords));
        tableFullData.push.apply(tableFullData, _toConsumableArray(newRecords));
        // 刷新单元格合并
        mergeList.forEach(function (mergeItem) {
          var mergeRowIndex = mergeItem.row,
            mergeRowspan = mergeItem.rowspan;
          if (mergeRowIndex + mergeRowspan > afterFullData.length) {
            mergeItem.rowspan = mergeRowspan + newRecords.length;
          }
        });
      }
    } else {
      // 如果为虚拟树
      if (treeConfig && transform) {
        var matchMapObj = _xeUtils.default.findTree(tableFullTreeData, function (item) {
          return row[rowField] === item[rowField];
        }, {
          children: mapChildrenField
        });
        if (matchMapObj) {
          var parentRow = matchMapObj.parent;
          var parentMapChilds = parentRow ? parentRow[mapChildrenField] : tableFullTreeData;
          var parentRest = fullAllDataRowIdData[(0, _util.getRowid)(_vm, parentRow)];
          var parentLevel = parentRest ? parentRest.level : 0;
          newRecords.forEach(function (item, i) {
            var rowid = (0, _util.getRowid)(_vm, item);
            if (process.env.NODE_ENV === 'development') {
              if (item[treeOpts.parentField]) {
                if (parentRow && item[treeOpts.parentField] !== parentRow[rowField]) {
                  (0, _log.errLog)('vxe.error.errProp', ["".concat(treeOpts.parentField, "=").concat(item[treeOpts.parentField]), "".concat(treeOpts.parentField, "=").concat(parentRow[rowField])]);
                }
              }
            }
            if (parentRow) {
              item[treeOpts.parentField] = parentRow[rowField];
            }
            var targetIndex = matchMapObj.index + i;
            if (isInsertNextRow) {
              targetIndex = targetIndex + 1;
            }
            parentMapChilds.splice(targetIndex, 0, item);
            var rest = {
              row: item,
              rowid: rowid,
              seq: -1,
              index: -1,
              _index: -1,
              $index: -1,
              items: parentMapChilds,
              parent: parentRow,
              level: parentLevel + 1
            };
            fullDataRowIdData[rowid] = rest;
            fullAllDataRowIdData[rowid] = rest;
          });

          // 源
          if (parentRow) {
            var matchObj = _xeUtils.default.findTree(tableFullTreeData, function (item) {
              return row[rowField] === item[rowField];
            }, {
              children: childrenField
            });
            if (matchObj) {
              var parentChilds = matchObj.items;
              var targetIndex = matchObj.index;
              if (isInsertNextRow) {
                targetIndex = targetIndex + 1;
              }
              parentChilds.splice.apply(parentChilds, [targetIndex, 0].concat(_toConsumableArray(newRecords)));
            }
          }
        } else {
          if (process.env.NODE_ENV === 'development') {
            (0, _log.warnLog)('vxe.error.unableInsert');
          }
          insertTreeRow(_vm, newRecords, true);
        }
      } else {
        if (treeConfig) {
          throw new Error((0, _log.getLog)('vxe.error.noTree', ['insert']));
        }
        var afIndex = -1;
        // 如果是可视索引
        if (_xeUtils.default.isNumber(row)) {
          if (row < afterFullData.length) {
            afIndex = row;
          }
        } else {
          afIndex = _vm.findRowIndexOf(afterFullData, row);
        }
        // 如果是插入指定行的下一行
        if (isInsertNextRow) {
          afIndex = Math.min(afterFullData.length, afIndex + 1);
        }
        if (afIndex === -1) {
          throw new Error((0, _log.errLog)('vxe.error.unableInsert'));
        }
        afterFullData.splice.apply(afterFullData, [afIndex, 0].concat(_toConsumableArray(newRecords)));
        tableFullData.splice.apply(tableFullData, [_vm.findRowIndexOf(tableFullData, row), 0].concat(_toConsumableArray(newRecords)));
        // 刷新单元格合并
        mergeList.forEach(function (mergeItem) {
          var mergeRowIndex = mergeItem.row,
            mergeRowspan = mergeItem.rowspan;
          if (mergeRowIndex > afIndex) {
            mergeItem.row = mergeRowIndex + newRecords.length;
          } else if (mergeRowIndex + mergeRowspan > afIndex) {
            mergeItem.rowspan = mergeRowspan + newRecords.length;
          }
        });
      }
    }
  }
  var insertList = editStore.insertList,
    insertMaps = editStore.insertMaps;
  newRecords.forEach(function (newRow) {
    var rowid = (0, _util.getRowid)(_vm, newRow);
    insertMaps[rowid] = newRow;
  });
  insertList.unshift.apply(insertList, _toConsumableArray(newRecords));
  _vm.cacheRowMap();
  _vm.updateScrollYStatus();
  _vm.handleTableData(treeConfig && transform);
  if (!(treeConfig && transform)) {
    _vm.updateAfterDataIndex();
  }
  _vm.updateFooter();
  _vm.checkSelectionStatus();
  if (_vm.scrollYLoad) {
    _vm.updateScrollYSpace();
  }
  return _vm.$nextTick().then(function () {
    _vm.updateCellAreas();
    return _vm.recalculate();
  }).then(function () {
    return {
      row: newRecords.length ? newRecords[newRecords.length - 1] : null,
      rows: newRecords
    };
  });
}
var _default = exports.default = {
  methods: {
    /**
     * 往表格中插入临时数据
     *
     * @param {*} records
     */
    _insert: function _insert(records) {
      return handleInsertRowAt(this, records, null);
    },
    /**
     * 往表格指定行中插入临时数据
     * 如果 row 为空则从插入到顶部
     * 如果 row 为 -1 则从插入到底部
     * 如果 row 为有效行则插入到该行的位置
     * @param {Object/Array} records 新的数据
     * @param {Row} row 指定行
     * @returns
     */
    _insertAt: function _insertAt(records, row) {
      return handleInsertRowAt(this, records, row);
    },
    _insertNextAt: function _insertNextAt(records, row) {
      return handleInsertRowAt(this, records, row, true);
    },
    /**
     * 删除指定行数据
     * 如果传 row 则删除一行
     * 如果传 rows 则删除多行
     * 如果为空则删除所有
     */
    _remove: function _remove(rows) {
      var _this = this;
      var afterFullData = this.afterFullData,
        tableFullData = this.tableFullData,
        tableFullTreeData = this.tableFullTreeData,
        treeConfig = this.treeConfig,
        mergeList = this.mergeList,
        editStore = this.editStore,
        checkboxOpts = this.checkboxOpts,
        selectCheckboxMaps = this.selectCheckboxMaps,
        isInsertByRow = this.isInsertByRow,
        treeOpts = this.treeOpts;
      var transform = treeOpts.transform,
        mapChildrenField = treeOpts.mapChildrenField;
      var childrenField = treeOpts.children || treeOpts.childrenField;
      var actived = editStore.actived,
        removeList = editStore.removeList,
        insertList = editStore.insertList,
        insertMaps = editStore.insertMaps;
      var checkField = checkboxOpts.checkField;
      var delList = [];
      if (!rows) {
        rows = tableFullData;
      } else if (!_xeUtils.default.isArray(rows)) {
        rows = [rows];
      }
      // 如果是新增，则保存记录
      rows.forEach(function (row) {
        if (!isInsertByRow(row)) {
          removeList.push(row);
        }
      });
      // 如果绑定了多选属性，则更新状态
      if (!checkField) {
        var selectRowMaps = _objectSpread({}, selectCheckboxMaps);
        rows.forEach(function (row) {
          var rowid = (0, _util.getRowid)(_this, row);
          if (selectRowMaps[rowid]) {
            delete selectRowMaps[rowid];
          }
        });
        this.selectCheckboxMaps = selectRowMaps;
      }
      // 从数据源中移除
      if (tableFullData === rows) {
        rows = delList = tableFullData.slice(0);
        this.tableFullData = [];
        this.afterFullData = [];
        this.clearMergeCells();
      } else {
        // 如果为虚拟树
        if (treeConfig && transform) {
          rows.forEach(function (row) {
            var rowid = (0, _util.getRowid)(_this, row);
            var matchMapObj = _xeUtils.default.findTree(tableFullTreeData, function (item) {
              return rowid === (0, _util.getRowid)(_this, item);
            }, {
              children: mapChildrenField
            });
            if (matchMapObj) {
              var rItems = matchMapObj.items.splice(matchMapObj.index, 1);
              delList.push(rItems[0]);
            }
            var matchObj = _xeUtils.default.findTree(tableFullTreeData, function (item) {
              return rowid === (0, _util.getRowid)(_this, item);
            }, {
              children: childrenField
            });
            if (matchObj) {
              matchObj.items.splice(matchObj.index, 1);
            }
            var afIndex = _this.findRowIndexOf(afterFullData, row);
            if (afIndex > -1) {
              afterFullData.splice(afIndex, 1);
            }
          });
        } else {
          rows.forEach(function (row) {
            var tfIndex = _this.findRowIndexOf(tableFullData, row);
            if (tfIndex > -1) {
              var rItems = tableFullData.splice(tfIndex, 1);
              delList.push(rItems[0]);
            }
            var afIndex = _this.findRowIndexOf(afterFullData, row);
            if (afIndex > -1) {
              // 刷新单元格合并
              mergeList.forEach(function (mergeItem) {
                var mergeRowIndex = mergeItem.row,
                  mergeRowspan = mergeItem.rowspan;
                if (mergeRowIndex > afIndex) {
                  mergeItem.row = mergeRowIndex - 1;
                } else if (mergeRowIndex + mergeRowspan > afIndex) {
                  mergeItem.rowspan = mergeRowspan - 1;
                }
              });
              afterFullData.splice(afIndex, 1);
            }
          });
        }
      }
      // 如果当前行被激活编辑，则清除激活状态
      if (actived.row && this.findRowIndexOf(rows, actived.row) > -1) {
        this.clearEdit();
      }
      // 从新增中移除已删除的数据
      rows.forEach(function (row) {
        var rowid = (0, _util.getRowid)(_this, row);
        var iIndex = _this.findRowIndexOf(insertList, row);
        if (iIndex > -1) {
          insertList.splice(iIndex, 1);
        }
        delete insertMaps[rowid];
      });
      this.handleTableData(treeConfig && transform);
      if (!(treeConfig && transform)) {
        this.updateAfterDataIndex();
      }
      this.updateFooter();
      this.cacheRowMap();
      this.checkSelectionStatus();
      if (this.scrollYLoad) {
        this.updateScrollYSpace();
      }
      return this.$nextTick().then(function () {
        _this.updateCellAreas();
        return _this.recalculate();
      }).then(function () {
        return {
          row: delList.length ? delList[delList.length - 1] : null,
          rows: delList
        };
      });
    },
    /**
     * 删除复选框选中的数据
     */
    _removeCheckboxRow: function _removeCheckboxRow() {
      var _this2 = this;
      return this.remove(this.getCheckboxRecords()).then(function (params) {
        _this2.clearCheckboxRow();
        return params;
      });
    },
    /**
     * 删除单选框选中的数据
     */
    _removeRadioRow: function _removeRadioRow() {
      var _this3 = this;
      var radioRecord = this.getRadioRecord();
      return this.remove(radioRecord || []).then(function (params) {
        _this3.clearRadioRow();
        return params;
      });
    },
    /**
     * 删除当前行选中的数据
     */
    _removeCurrentRow: function _removeCurrentRow() {
      var _this4 = this;
      var currentRecord = this.getCurrentRecord();
      return this.remove(currentRecord || []).then(function (params) {
        _this4.clearCurrentRow();
        return params;
      });
    },
    /**
     * 获取表格数据集，包含新增、删除、修改
     */
    _getRecordset: function _getRecordset() {
      return {
        insertRecords: this.getInsertRecords(),
        removeRecords: this.getRemoveRecords(),
        updateRecords: this.getUpdateRecords(),
        pendingRecords: this.getPendingRecords()
      };
    },
    /**
     * 获取新增的临时数据
     */
    _getInsertRecords: function _getInsertRecords() {
      var _this5 = this;
      var fullAllDataRowIdData = this.fullAllDataRowIdData;
      var insertList = this.editStore.insertList;
      var insertRecords = [];
      insertList.forEach(function (row) {
        var rowid = (0, _util.getRowid)(_this5, row);
        if (fullAllDataRowIdData[rowid]) {
          insertRecords.push(row);
        }
      });
      return insertRecords;
    },
    /**
     * 获取已删除的数据
     */
    _getRemoveRecords: function _getRemoveRecords() {
      return this.editStore.removeList;
    },
    /**
     * 获取更新数据
     * 只精准匹配 row 的更改
     * 如果是树表格，子节点更改状态不会影响父节点的更新状态
     */
    _getUpdateRecords: function _getUpdateRecords() {
      var keepSource = this.keepSource,
        tableFullData = this.tableFullData,
        isUpdateByRow = this.isUpdateByRow,
        treeConfig = this.treeConfig,
        treeOpts = this.treeOpts,
        editStore = this.editStore;
      if (keepSource) {
        var actived = editStore.actived;
        var row = actived.row,
          column = actived.column;
        if (row || column) {
          this._syncActivedCell();
        }
        if (treeConfig) {
          return _xeUtils.default.filterTree(tableFullData, function (row) {
            return isUpdateByRow(row);
          }, treeOpts);
        }
        return tableFullData.filter(function (row) {
          return isUpdateByRow(row);
        });
      }
      return [];
    },
    /**
     * 处理激活编辑
     */
    handleActived: function handleActived(params, evnt) {
      var _this6 = this;
      var editStore = this.editStore,
        editOpts = this.editOpts,
        tableColumn = this.tableColumn,
        editConfig = this.editConfig,
        mouseConfig = this.mouseConfig;
      var mode = editOpts.mode;
      var actived = editStore.actived,
        focused = editStore.focused;
      var row = params.row,
        column = params.column;
      var editRender = column.editRender;
      var cell = params.cell = params.cell || this.getCellElement(row, column);
      var beforeEditMethod = editOpts.beforeEditMethod || editOpts.activeMethod;
      if (cell && (0, _utils.isEnableConf)(editConfig) && (0, _utils.isEnableConf)(editRender)) {
        // 激活编辑
        if (!this.hasPendingByRow(row)) {
          if (actived.row !== row || (mode === 'cell' ? actived.column !== column : false)) {
            // 判断是否禁用编辑
            var type = 'edit-disabled';
            if (!beforeEditMethod || beforeEditMethod(_objectSpread(_objectSpread({}, params), {}, {
              $table: this,
              $grid: this.$xegrid
            }))) {
              if (mouseConfig) {
                this.clearSelected(evnt);
                this.clearCellAreas(evnt);
                this.clearCopyCellArea(evnt);
              }
              this.closeTooltip();
              if (actived.column) {
                this.clearEdit(evnt);
              }
              type = 'edit-activated';
              column.renderHeight = cell.offsetHeight;
              actived.args = params;
              actived.row = row;
              actived.column = column;
              if (mode === 'row') {
                tableColumn.forEach(function (column) {
                  return _this6._getColumnModel(row, column);
                });
              } else {
                this._getColumnModel(row, column);
              }
              var afterEditMethod = editOpts.afterEditMethod;
              this.$nextTick(function () {
                _this6.handleFocus(params, evnt);
                if (afterEditMethod) {
                  afterEditMethod(_objectSpread(_objectSpread({}, params), {}, {
                    $table: _this6,
                    $grid: _this6.$xegrid
                  }));
                }
              });
            }
            this.emitEvent(type, {
              row: row,
              rowIndex: this.getRowIndex(row),
              $rowIndex: this.getVMRowIndex(row),
              column: column,
              columnIndex: this.getColumnIndex(column),
              $columnIndex: this.getVMColumnIndex(column)
            }, evnt);

            // v4已废弃
            if (type === 'edit-activated') {
              this.emitEvent('edit-actived', {
                row: row,
                rowIndex: this.getRowIndex(row),
                $rowIndex: this.getVMRowIndex(row),
                column: column,
                columnIndex: this.getColumnIndex(column),
                $columnIndex: this.getVMColumnIndex(column)
              }, evnt);
            }
          } else {
            var oldColumn = actived.column;
            if (mouseConfig) {
              this.clearSelected(evnt);
              this.clearCellAreas(evnt);
              this.clearCopyCellArea(evnt);
            }
            if (oldColumn !== column) {
              var oldModel = oldColumn.model;
              if (oldModel.update) {
                _utils.default.setCellValue(row, oldColumn, oldModel.value);
              }
              this.clearValidate();
            }
            column.renderHeight = cell.offsetHeight;
            actived.args = params;
            actived.column = column;
            setTimeout(function () {
              _this6.handleFocus(params, evnt);
            });
          }
          focused.column = null;
          focused.row = null;
          this.focus();
        }
      }
      return this.$nextTick();
    },
    _getColumnModel: function _getColumnModel(row, column) {
      var model = column.model,
        editRender = column.editRender;
      if (editRender) {
        model.value = _utils.default.getCellValue(row, column);
        model.update = false;
      }
    },
    _setColumnModel: function _setColumnModel(row, column) {
      var model = column.model,
        editRender = column.editRender;
      if (editRender && model.update) {
        _utils.default.setCellValue(row, column, model.value);
        model.update = false;
        model.value = null;
      }
    },
    _syncActivedCell: function _syncActivedCell() {
      var _this7 = this;
      var tableColumn = this.tableColumn,
        editStore = this.editStore,
        editOpts = this.editOpts;
      var actived = editStore.actived;
      var row = actived.row,
        column = actived.column;
      if (row || column) {
        if (editOpts.mode === 'row') {
          tableColumn.forEach(function (column) {
            return _this7._setColumnModel(row, column);
          });
        } else {
          this._setColumnModel(row, column);
        }
      }
    },
    _clearActived: function _clearActived(evnt) {
      if (process.env.NODE_ENV === 'development') {
        (0, _log.warnLog)('vxe.error.delFunc', ['clearActived', 'clearEdit']);
      }
      // 即将废弃
      return this.clearEdit(evnt);
    },
    /**
     * 清除激活的编辑
     */
    _clearEdit: function _clearEdit(evnt) {
      var editStore = this.editStore;
      var actived = editStore.actived,
        focused = editStore.focused;
      var row = actived.row,
        column = actived.column;
      if (row || column) {
        this._syncActivedCell();
        actived.args = null;
        actived.row = null;
        actived.column = null;
        this.updateFooter();
        this.emitEvent('edit-closed', {
          row: row,
          rowIndex: this.getRowIndex(row),
          $rowIndex: this.getVMRowIndex(row),
          column: column,
          columnIndex: this.getColumnIndex(column),
          $columnIndex: this.getVMColumnIndex(column)
        }, evnt);
      }
      focused.row = null;
      focused.column = null;
      if (_conf.default.cellVaildMode === 'obsolete') {
        if (this.clearValidate) {
          return this.clearValidate();
        }
      }
      return this.$nextTick();
    },
    _getActiveRecord: function _getActiveRecord() {
      if (process.env.NODE_ENV === 'development') {
        (0, _log.warnLog)('vxe.error.delFunc', ['getActiveRecord', 'getEditRecord']);
      }
      // 即将废弃
      return this.getEditRecord();
    },
    _getEditRecord: function _getEditRecord() {
      var $el = this.$el,
        editStore = this.editStore,
        afterFullData = this.afterFullData;
      var actived = editStore.actived;
      var args = actived.args,
        row = actived.row;
      if (args && this.findRowIndexOf(afterFullData, row) > -1 && $el.querySelectorAll('.vxe-body--column.col--active').length) {
        return Object.assign({}, args);
      }
      return null;
    },
    _isActiveByRow: function _isActiveByRow(row) {
      if (process.env.NODE_ENV === 'development') {
        (0, _log.warnLog)('vxe.error.delFunc', ['isActiveByRow', 'isEditByRow']);
      }
      // 即将废弃
      return this.isEditByRow(row);
    },
    /**
     * 判断行是否为激活编辑状态
     * @param {Row} row 行对象
     */
    _isEditByRow: function _isEditByRow(row) {
      return this.editStore.actived.row === row;
    },
    /**
     * 处理聚焦
     */
    handleFocus: function handleFocus(params) {
      var row = params.row,
        column = params.column,
        cell = params.cell;
      var editRender = column.editRender;
      if ((0, _utils.isEnableConf)(editRender)) {
        var compRender = _vXETable.default.renderer.get(editRender.name);
        var autofocus = editRender.autofocus,
          autoselect = editRender.autoselect;
        var inputElem;
        if (!autofocus && compRender) {
          autofocus = compRender.tableAutofocus || compRender.autofocus;
        }
        if (!autoselect && compRender) {
          autoselect = compRender.tableAutoSelect || compRender.autoselect;
        }
        // 如果指定了聚焦 class
        if (_xeUtils.default.isFunction(autofocus)) {
          inputElem = autofocus.call(this, params);
        } else if (autofocus) {
          inputElem = cell.querySelector(autofocus);
          if (inputElem) {
            inputElem.focus();
          }
        }
        if (inputElem) {
          if (autoselect) {
            inputElem.select();
          } else {
            // 保持一致行为，光标移到末端
            if (_dom.browse.msie) {
              var textRange = inputElem.createTextRange();
              textRange.collapse(false);
              textRange.select();
            }
          }
        } else {
          // 显示到可视区中
          this.scrollToRow(row, column);
        }
      }
    },
    _setActiveRow: function _setActiveRow(row) {
      if (process.env.NODE_ENV === 'development') {
        (0, _log.warnLog)('vxe.error.delFunc', ['setActiveRow', 'setEditRow']);
      }
      // 即将废弃
      return this.setEditRow(row);
    },
    /**
     * 激活行编辑
     */
    _setEditRow: function _setEditRow(row, fieldOrColumn) {
      var column = _xeUtils.default.find(this.visibleColumn, function (column) {
        return (0, _utils.isEnableConf)(column.editRender);
      });
      if (fieldOrColumn) {
        column = _xeUtils.default.isString(fieldOrColumn) ? this.getColumnByField(fieldOrColumn) : fieldOrColumn;
      }
      return this.setEditCell(row, column);
    },
    _setActiveCell: function _setActiveCell(row, fieldOrColumn) {
      if (process.env.NODE_ENV === 'development') {
        (0, _log.warnLog)('vxe.error.delFunc', ['setActiveCell', 'setEditCell']);
      }
      // 即将废弃
      return this.setEditCell(row, fieldOrColumn);
    },
    /**
     * 激活单元格编辑
     */
    _setEditCell: function _setEditCell(row, fieldOrColumn) {
      var _this8 = this;
      var editConfig = this.editConfig;
      var column = _xeUtils.default.isString(fieldOrColumn) ? this.getColumnByField(fieldOrColumn) : fieldOrColumn;
      if (row && column && (0, _utils.isEnableConf)(editConfig) && (0, _utils.isEnableConf)(column.editRender)) {
        return this.scrollToRow(row, true).then(function () {
          var cell = _this8.getCellElement(row, column);
          if (cell) {
            _this8.handleActived({
              row: row,
              rowIndex: _this8.getRowIndex(row),
              column: column,
              columnIndex: _this8.getColumnIndex(column),
              cell: cell,
              $table: _this8
            });
            _this8.lastCallTime = Date.now();
          }
        });
      }
      return this.$nextTick();
    },
    /**
     * 只对 trigger=dblclick 有效，选中单元格
     */
    _setSelectCell: function _setSelectCell(row, fieldOrColumn) {
      var tableData = this.tableData,
        editOpts = this.editOpts,
        visibleColumn = this.visibleColumn;
      var column = _xeUtils.default.isString(fieldOrColumn) ? this.getColumnByField(fieldOrColumn) : fieldOrColumn;
      if (row && column && editOpts.trigger !== 'manual') {
        var rowIndex = this.findRowIndexOf(tableData, row);
        if (rowIndex > -1) {
          var cell = this.getCellElement(row, column);
          var params = {
            row: row,
            rowIndex: rowIndex,
            column: column,
            columnIndex: visibleColumn.indexOf(column),
            cell: cell
          };
          this.handleSelected(params, {});
        }
      }
      return this.$nextTick();
    },
    /**
     * 处理选中源
     */
    handleSelected: function handleSelected(params, evnt) {
      var _this9 = this;
      var mouseConfig = this.mouseConfig,
        mouseOpts = this.mouseOpts,
        editOpts = this.editOpts,
        editStore = this.editStore;
      var actived = editStore.actived,
        selected = editStore.selected;
      var row = params.row,
        column = params.column;
      var isMouseSelected = mouseConfig && mouseOpts.selected;
      var selectMethod = function selectMethod() {
        if (isMouseSelected && (selected.row !== row || selected.column !== column)) {
          if (actived.row !== row || (editOpts.mode === 'cell' ? actived.column !== column : false)) {
            _this9.clearEdit(evnt);
            _this9.clearSelected(evnt);
            _this9.clearCellAreas(evnt);
            _this9.clearCopyCellArea(evnt);
            selected.args = params;
            selected.row = row;
            selected.column = column;
            if (isMouseSelected) {
              _this9.addColSdCls();
            }
            _this9.focus();
            if (evnt) {
              _this9.emitEvent('cell-selected', params, evnt);
            }
          }
        }
        return _this9.$nextTick();
      };
      return selectMethod();
    },
    /**
     * 获取选中的单元格
     */
    _getSelectedCell: function _getSelectedCell() {
      var _this$editStore$selec = this.editStore.selected,
        args = _this$editStore$selec.args,
        column = _this$editStore$selec.column;
      if (args && column) {
        return Object.assign({}, args);
      }
      return null;
    },
    /**
     * 清除所选中源状态
     */
    _clearSelected: function _clearSelected() {
      var selected = this.editStore.selected;
      selected.row = null;
      selected.column = null;
      this.reColTitleSdCls();
      this.reColSdCls();
      return this.$nextTick();
    },
    reColTitleSdCls: function reColTitleSdCls() {
      var headerElem = this.elemStore['main-header-list'];
      if (headerElem) {
        _xeUtils.default.arrayEach(headerElem.querySelectorAll('.col--title-selected'), function (elem) {
          return _dom.default.removeClass(elem, 'col--title-selected');
        });
      }
    },
    reColSdCls: function reColSdCls() {
      var cell = this.$el.querySelector('.col--selected');
      if (cell) {
        _dom.default.removeClass(cell, 'col--selected');
      }
    },
    addColSdCls: function addColSdCls() {
      var selected = this.editStore.selected;
      var row = selected.row,
        column = selected.column;
      this.reColSdCls();
      if (row && column) {
        var cell = this.getCellElement(row, column);
        if (cell) {
          _dom.default.addClass(cell, 'col--selected');
        }
      }
    }
  }
};