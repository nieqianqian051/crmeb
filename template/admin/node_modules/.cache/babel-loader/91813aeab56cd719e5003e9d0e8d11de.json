{"remainingRequest":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/thread-loader/dist/cjs.js!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/babel-loader/lib/index.js!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/components/goodsList/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/components/goodsList/index.vue","mtime":1719467759000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/babel.config.js","mtime":1679965410000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/.babelrc","mtime":1679965410000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/thread-loader/dist/cjs.js","mtime":1746465018446},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/babel-loader/lib/index.js","mtime":1746465024347},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js","mtime":1746465019530}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL1VzZXJzL25pZXFpYW5xaWFuL0Rvd25sb2Fkcy94aW54aWFuZ211L0NSTUVCL3RlbXBsYXRlL2FkbWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9yZWdlbmVyYXRvclJ1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL25pZXFpYW5xaWFuL0Rvd25sb2Fkcy94aW54aWFuZ211L0NSTUVCL3RlbXBsYXRlL2FkbWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucHVzaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0IHsgbWFwU3RhdGUgfSBmcm9tICd2dWV4JzsKaW1wb3J0IHsgY2FzY2FkZXJMaXN0QXBpLCBjaGFuZ2VMaXN0QXBpIH0gZnJvbSAnQC9hcGkvcHJvZHVjdCc7CmltcG9ydCB7IGxpdmVHb29kcyB9IGZyb20gJ0AvYXBpL2xpdmUnOwppbXBvcnQgeyBnZXRQcm9kdWN0TGlzdCB9IGZyb20gJ0AvYXBpL2RpeSc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnaW5kZXgnLAogIHByb3BzOiB7CiAgICBpc19uZXc6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnJwogICAgfSwKICAgIHR5cGU6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiAwCiAgICB9LAogICAgZGl5OiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgaXNjaGVja2JveDogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIGxpdmVTdGF0dXM6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCiAgICBpc0xpdmU6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCiAgICBpc2RpeTogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIHNlbGVjdElkczogewogICAgICB0eXBlOiBBcnJheSwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CiAgICB9LAogICAgZGF0YXM6IHsKICAgICAgdHlwZTogT2JqZWN0LAogICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4ge307CiAgICAgIH0KICAgIH0KICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0ZW1wbGF0ZVJhZGlvOiAwLAogICAgICBtb2RhbF9sb2FkaW5nOiBmYWxzZSwKICAgICAgdHJlZVNlbGVjdDogW10sCiAgICAgIGZvcm1WYWxpZGF0ZTogewogICAgICAgIHBhZ2U6IDEsCiAgICAgICAgbGltaXQ6IDE1LAogICAgICAgIGNhdGVfaWQ6ICcnLAogICAgICAgIHN0b3JlX25hbWU6ICcnLAogICAgICAgIGlzX25ldzogdGhpcy5pc19uZXcKICAgICAgfSwKICAgICAgdG90YWw6IDAsCiAgICAgIG1vZGFsczogZmFsc2UsCiAgICAgIGxvYWRpbmc6IGZhbHNlLAogICAgICBncmlkOiB7CiAgICAgICAgeGw6IDEwLAogICAgICAgIGxnOiAxMCwKICAgICAgICBtZDogMTIsCiAgICAgICAgc206IDI0LAogICAgICAgIHhzOiAyNAogICAgICB9LAogICAgICB0YWJsZUxpc3Q6IFtdLAogICAgICBjdXJyZW50aWQ6IDAsCiAgICAgIHByb2R1Y3RSb3c6IHt9LAogICAgICBpbWFnZXM6IFtdLAogICAgICBtYW55OiAnJywKICAgICAgZ29vZFR5cGU6ICcnLAogICAgICBnb29kTGlzdDogW3sKICAgICAgICBhY3RpdmVWYWx1ZTogMCwKICAgICAgICB0aXRsZTogJ+WVhuWTgeWIl+ihqCcKICAgICAgfSwgewogICAgICAgIGFjdGl2ZVZhbHVlOiAnNCcsCiAgICAgICAgdGl0bGU6ICfng63pl6jmppzljZUnCiAgICAgIH0sIHsKICAgICAgICBhY3RpdmVWYWx1ZTogJzUnLAogICAgICAgIHRpdGxlOiAn6aaW5Y+R5paw5ZOBJwogICAgICB9LCB7CiAgICAgICAgYWN0aXZlVmFsdWU6ICc2JywKICAgICAgICB0aXRsZTogJ+S/g+mUgOWNleWTgScKICAgICAgfSwgewogICAgICAgIGFjdGl2ZVZhbHVlOiAnNycsCiAgICAgICAgdGl0bGU6ICfnsr7lk4HmjqjojZAnCiAgICAgIH1dCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHt9LAogIHdhdGNoOiB7CiAgICBpc2NoZWNrYm94OiB7CiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIobmV3VmFsLCBvbGRWYWwpIHsKICAgICAgICBpZiAobmV3VmFsKSB7CiAgICAgICAgICB0aGlzLm1hbnkgPSAnbWFueSc7CiAgICAgICAgfQogICAgICB9LAogICAgICBpbW1lZGlhdGU6IHRydWUKICAgIH0KICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB2YXIgbWFueSA9ICcnOwogICAgaWYgKHRoaXMuaXNjaGVja2JveCkgewogICAgICBtYW55ID0gJ21hbnknOwogICAgfSBlbHNlIHsKICAgICAgbWFueSA9IHRoaXMuJHJvdXRlLnF1ZXJ5LnR5cGU7CiAgICB9CiAgICB0aGlzLm1hbnkgPSBtYW55OwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHRoaXMuZ29vZHNDYXRlZ29yeSgpOwogICAgaWYgKHRoaXMuZGl5KSB7CiAgICAgIHRoaXMucHJvZHVjdExpc3QoKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuZ2V0TGlzdCgpOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgcHJvZHVjdExpc3Q6IGZ1bmN0aW9uIHByb2R1Y3RMaXN0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgZGF0YSA9IHsKICAgICAgICBwYWdlOiB0aGlzLmZvcm1WYWxpZGF0ZS5wYWdlLAogICAgICAgIGxpbWl0OiB0aGlzLmZvcm1WYWxpZGF0ZS5saW1pdCwKICAgICAgICBjYXRlX2lkOiB0aGlzLmZvcm1WYWxpZGF0ZS5jYXRlX2lkLAogICAgICAgIHN0b3JlX25hbWU6IHRoaXMuZm9ybVZhbGlkYXRlLnN0b3JlX25hbWUsCiAgICAgICAgdHlwZTogdGhpcy50eXBlID8gdGhpcy50eXBlIDogdGhpcy5nb29kVHlwZQogICAgICB9OwogICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlOwogICAgICBnZXRQcm9kdWN0TGlzdChkYXRhKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICB2YXIgZGF0YSA9IHJlcy5kYXRhOwogICAgICAgIF90aGlzLnRhYmxlTGlzdCA9IGRhdGEubGlzdDsKICAgICAgICBfdGhpcy50b3RhbCA9IHJlcy5kYXRhLmNvdW50OwogICAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICBfdGhpcy4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgfSk7CiAgICB9LAogICAgZ2V0VGVtcGxhdGVSb3c6IGZ1bmN0aW9uIGdldFRlbXBsYXRlUm93KHJvdykgewogICAgICB2YXIgaW1hZ2VzID0gW107CiAgICAgIHZhciBpbWFnZU9iamVjdCA9IHsKICAgICAgICBpbWFnZTogcm93LmltYWdlLAogICAgICAgIHByb2R1Y3RfaWQ6IHJvdy5pZCwKICAgICAgICBzdG9yZV9uYW1lOiByb3cuc3RvcmVfbmFtZSwKICAgICAgICB0ZW1wX2lkOiByb3cudGVtcF9pZAogICAgICB9OwogICAgICBpbWFnZXMucHVzaChpbWFnZU9iamVjdCk7CiAgICAgIHRoaXMuaW1hZ2VzID0gaW1hZ2VzOwogICAgICB0aGlzLmRpeVZhbCA9IHJvdzsKICAgICAgdGhpcy4kZW1pdCgnZ2V0UHJvZHVjdElkJywgcm93KTsKICAgIH0sCiAgICBjaGFuZ2VDaGVja2JveDogZnVuY3Rpb24gY2hhbmdlQ2hlY2tib3goc2VsZWN0aW9uKSB7CiAgICAgIHZhciBpbWFnZXMgPSBbXTsKICAgICAgc2VsZWN0aW9uLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICB2YXIgaW1hZ2VPYmplY3QgPSB7CiAgICAgICAgICBpbWFnZTogaXRlbS5pbWFnZSwKICAgICAgICAgIHByb2R1Y3RfaWQ6IGl0ZW0uaWQsCiAgICAgICAgICBzdG9yZV9uYW1lOiBpdGVtLnN0b3JlX25hbWUsCiAgICAgICAgICB0ZW1wX2lkOiBpdGVtLnRlbXBfaWQKICAgICAgICB9OwogICAgICAgIGltYWdlcy5wdXNoKGltYWdlT2JqZWN0KTsKICAgICAgfSk7CiAgICAgIHRoaXMuaW1hZ2VzID0gaW1hZ2VzOwogICAgICB0aGlzLmRpeVZhbCA9IHNlbGVjdGlvbjsKICAgICAgdGhpcy4kZW1pdCgnZ2V0UHJvZHVjdERpeScsIHNlbGVjdGlvbik7CiAgICB9LAogICAgLy8g5ZWG5ZOB5YiG57G777ybCiAgICBnb29kc0NhdGVnb3J5OiBmdW5jdGlvbiBnb29kc0NhdGVnb3J5KCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKICAgICAgY2FzY2FkZXJMaXN0QXBpKDEpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzMi50cmVlU2VsZWN0ID0gcmVzLmRhdGE7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICBfdGhpczIuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgIH0pOwogICAgfSwKICAgIHBhZ2VDaGFuZ2U6IGZ1bmN0aW9uIHBhZ2VDaGFuZ2UoKSB7CiAgICAgIGlmICh0aGlzLmRpeSkgewogICAgICAgIHRoaXMucHJvZHVjdExpc3QoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmdldExpc3QoKTsKICAgICAgfQogICAgfSwKICAgIC8vIOWIl+ihqAogICAgZ2V0TGlzdDogZnVuY3Rpb24gZ2V0TGlzdCgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CiAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7CiAgICAgIGlmICghdGhpcy5saXZlU3RhdHVzKSB7CiAgICAgICAgaWYgKHRoaXMuaXNMaXZlKSB7CiAgICAgICAgICB0aGlzLmZvcm1WYWxpZGF0ZS5pc19saXZlID0gMTsKICAgICAgICB9CiAgICAgICAgY2hhbmdlTGlzdEFwaSh0aGlzLmZvcm1WYWxpZGF0ZSkudGhlbiggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlKHJlcykgewogICAgICAgICAgICB2YXIgZGF0YTsKICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgZGF0YSA9IHJlcy5kYXRhOwogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfdGhpczMuc2VsZWN0SWRzKTsKICAgICAgICAgICAgICAgICAgX3RoaXMzLnRhYmxlTGlzdCA9IGRhdGEubGlzdDsKICAgICAgICAgICAgICAgICAgX3RoaXMzLnRvdGFsID0gcmVzLmRhdGEuY291bnQ7CiAgICAgICAgICAgICAgICAgIF90aGlzMy5sb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgIF90aGlzMy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczMuc2VsZWN0SWRzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIGFyciA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLnNlbGVjdElkcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5saXN0Lm1hcChmdW5jdGlvbiAoaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpLmlkID09IGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMzLiRyZWZzLnRhYmxlLnRvZ2dsZVJvd1NlbGVjdGlvbihpLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKGkpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMy5jaGFuZ2VDaGVja2JveChhcnIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgICAgICB9KSk7CiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94KSB7CiAgICAgICAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9OwogICAgICAgIH0oKSkuY2F0Y2goZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgX3RoaXMzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgIF90aGlzMy4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBsaXZlR29vZHMoewogICAgICAgICAgaXNfc2hvdzogJzEnLAogICAgICAgICAgc3RhdHVzOiAnMScsCiAgICAgICAgICBsaXZlX2lkOiB0aGlzLmRhdGFzLmlkLAogICAgICAgICAga2Vyd29yZDogdGhpcy5mb3JtVmFsaWRhdGUuc3RvcmVfbmFtZSwKICAgICAgICAgIHBhZ2U6IHRoaXMuZm9ybVZhbGlkYXRlLnBhZ2UsCiAgICAgICAgICBsaW1pdDogdGhpcy5mb3JtVmFsaWRhdGUubGltaXQKICAgICAgICB9KS50aGVuKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMihyZXMpIHsKICAgICAgICAgICAgdmFyIGRhdGE7CiAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICBkYXRhID0gcmVzLmRhdGE7CiAgICAgICAgICAgICAgICAgIGRhdGEubGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgewogICAgICAgICAgICAgICAgICAgIGVsLmltYWdlID0gZWwuY292ZXJfaW1nOwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgaWYgKF90aGlzMy5zZWxlY3RJZHMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMzLnNlbGVjdElkcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgIGRhdGEubGlzdC5tYXAoZnVuY3Rpb24gKGkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkuaWQgPT0gaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGkpOwogICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMy4kcmVmcy50YWJsZS50b2dnbGVSb3dTZWxlY3Rpb24oaSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF90aGlzMy4kbmV4dFRpY2soZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICBfdGhpczMudGFibGVMaXN0ID0gZGF0YS5saXN0OwogICAgICAgICAgICAgICAgICAgIF90aGlzMy50b3RhbCA9IHJlcy5kYXRhLmNvdW50OwogICAgICAgICAgICAgICAgICAgIF90aGlzMy5sb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgICAgICB9KSk7CiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94MikgewogICAgICAgICAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgIH07CiAgICAgICAgfSgpKS5jYXRjaChmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICBfdGhpczMubG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgX3RoaXMzLiRtZXNzYWdlLmVycm9yKHJlcy5tc2cpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgb2s6IGZ1bmN0aW9uIG9rKCkgewogICAgICBpZiAodGhpcy5pbWFnZXMubGVuZ3RoID4gMCkgewogICAgICAgIGlmICh0aGlzLiRyb3V0ZS5xdWVyeS5mb2RkZXIgPT09ICdpbWFnZScpIHsKICAgICAgICAgIHZhciBpbWFnZVZhbHVlID0gZm9ybV9jcmVhdGVfaGVscGVyLmdldCgnaW1hZ2UnKTsKICAgICAgICAgIGZvcm1fY3JlYXRlX2hlbHBlci5zZXQoJ2ltYWdlJywgaW1hZ2VWYWx1ZS5jb25jYXQodGhpcy5pbWFnZXMpKTsKICAgICAgICAgIGZvcm1fY3JlYXRlX2hlbHBlci5jbG9zZSgnaW1hZ2UnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy4kcmVmcy50YWJsZS5jbGVhclNlbGVjdGlvbigpOwogICAgICAgICAgaWYgKHRoaXMuaXNkaXkpIHsKICAgICAgICAgICAgdGhpcy4kZW1pdCgnZ2V0UHJvZHVjdElkJywgdGhpcy5kaXlWYWwpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy4kZW1pdCgnZ2V0UHJvZHVjdElkJywgdGhpcy5pbWFnZXMpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLndhcm5pbmcoJ+ivt+WFiOmAieaLqeWVhuWTgScpOwogICAgICB9CiAgICB9LAogICAgLy8g6KGo5qC85pCc57SiCiAgICB1c2VyU2VhcmNoczogZnVuY3Rpb24gdXNlclNlYXJjaHMoKSB7CiAgICAgIHRoaXMuY3VycmVudGlkID0gMDsKICAgICAgdGhpcy5wcm9kdWN0Um93ID0ge307CiAgICAgIHRoaXMuZm9ybVZhbGlkYXRlLnBhZ2UgPSAxOwogICAgICBpZiAodGhpcy5kaXkpIHsKICAgICAgICB0aGlzLnByb2R1Y3RMaXN0KCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5nZXRMaXN0KCk7CiAgICAgIH0KICAgIH0sCiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7CiAgICAgIHRoaXMucHJvZHVjdFJvdy5pZCA9ICcnOwogICAgICB0aGlzLmN1cnJlbnRpZCA9ICcnOwogICAgfQogIH0KfTs="},null]}