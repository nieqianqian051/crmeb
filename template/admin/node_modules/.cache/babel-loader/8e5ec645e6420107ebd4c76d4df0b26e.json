{"remainingRequest":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/thread-loader/dist/cjs.js!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/babel-loader/lib/index.js!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/system/codeGeneration/list.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/system/codeGeneration/list.vue","mtime":1719467759000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/babel.config.js","mtime":1679965410000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/.babelrc","mtime":1679965410000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/thread-loader/dist/cjs.js","mtime":1746465018446},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/babel-loader/lib/index.js","mtime":1746465024347},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js","mtime":1746465019530}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL1VzZXJzL25pZXFpYW5xaWFuL0Rvd25sb2Fkcy94aW54aWFuZ211L0NSTUVCL3RlbXBsYXRlL2FkbWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9yZWdlbmVyYXRvclJ1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL25pZXFpYW5xaWFuL0Rvd25sb2Fkcy94aW54aWFuZ211L0NSTUVCL3RlbXBsYXRlL2FkbWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL1VzZXJzL25pZXFpYW5xaWFuL0Rvd25sb2Fkcy94aW54aWFuZ211L0NSTUVCL3RlbXBsYXRlL2FkbWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucHVzaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAndnVleCc7CmltcG9ydCB7IGNydWRMaXN0LCBjcnVkRGV0LCBjcnVkRG93bmxvYWQsIGNydWRTYXZlRmlsZSBhcyBfY3J1ZFNhdmVGaWxlIH0gZnJvbSAnQC9hcGkvc3lzdGVtQ29kZUdlbmVyYXRpb24nOwppbXBvcnQgKiBhcyBtb25hY28gZnJvbSAnbW9uYWNvLWVkaXRvcic7CmltcG9ydCB7IGdldENvb2tpZXMsIHJlbW92ZUNvb2tpZXMgfSBmcm9tICdAL2xpYnMvdXRpbCc7CmltcG9ydCBTZXR0aW5nIGZyb20gJ0Avc2V0dGluZyc7CmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgZ3JpZDogewogICAgICAgIHhsOiA3LAogICAgICAgIGxnOiA3LAogICAgICAgIG1kOiAxMiwKICAgICAgICBzbTogMjQsCiAgICAgICAgeHM6IDI0CiAgICAgIH0sCiAgICAgIGZvcm1WYWxpZGF0ZTogewogICAgICAgIHBhZ2U6IDEsCiAgICAgICAgbGltaXQ6IDIwLAogICAgICAgIHRpdGxlOiAnJwogICAgICB9LAogICAgICBzdHlsZXM6IHsKICAgICAgICBoZWlnaHQ6ICdjYWxjKDEwMCUgLSA1NXB4KScsCiAgICAgICAgb3ZlcmZsb3c6ICdhdXRvJywKICAgICAgICBwYWRkaW5nQm90dG9tOiAnNTNweCcsCiAgICAgICAgcG9zaXRpb246ICdzdGF0aWMnCiAgICAgIH0sCiAgICAgIGxvYWRpbmc6IGZhbHNlLAogICAgICBwd2RNb2RhbDogZmFsc2UsCiAgICAgIGJ1aWxkTW9kYWxzOiBmYWxzZSwKICAgICAgcHdkOiAnJywKICAgICAgdGFiTGlzdDogW10sCiAgICAgIGNvZGVCdWlsZExpc3Q6IFtdLAogICAgICB0b3RhbDogMCwKICAgICAgY29sdW1uczE6IFt7CiAgICAgICAgdGl0bGU6ICdJRCcsCiAgICAgICAga2V5OiAnaWQnLAogICAgICAgIHdpZHRoOiA4MAogICAgICB9LCB7CiAgICAgICAgdGl0bGU6ICfoj5zljZXlkI0nLAogICAgICAgIGtleTogJ25hbWUnLAogICAgICAgIG1pbldpZHRoOiAxMzAKICAgICAgfSwgewogICAgICAgIHRpdGxlOiAn6KGo5ZCNJywKICAgICAgICBrZXk6ICd0YWJsZV9uYW1lJywKICAgICAgICBtaW5XaWR0aDogMTMwCiAgICAgIH0sIHsKICAgICAgICB0aXRsZTogJ+Wtl+espumbhicsCiAgICAgICAga2V5OiAndGFibGVfY29sbGF0aW9uJywKICAgICAgICBtaW5XaWR0aDogMTMwCiAgICAgIH0sIHsKICAgICAgICB0aXRsZTogJ+ihqOWkh+azqCcsCiAgICAgICAga2V5OiAndGFibGVfY29tbWVudCcsCiAgICAgICAgbWluV2lkdGg6IDEzMAogICAgICB9LCB7CiAgICAgICAgdGl0bGU6ICfmt7vliqDml7bpl7QnLAogICAgICAgIGtleTogJ2FkZF90aW1lJywKICAgICAgICBtaW5XaWR0aDogMTMwCiAgICAgIH0sIHsKICAgICAgICB0aXRsZTogJ+aTjeS9nCcsCiAgICAgICAgc2xvdDogJ2FjdGlvbicsCiAgICAgICAgZml4ZWQ6ICdyaWdodCcsCiAgICAgICAgbWluV2lkdGg6IDE1MAogICAgICB9XSwKICAgICAgRnJvbURhdGE6IG51bGwsCiAgICAgIHRpdGxlRnJvbTogJycsCiAgICAgIGdyb3VwSWQ6IDAsCiAgICAgIGFkZElkOiAnJywKICAgICAgZWRpdG9yTGlzdDogW10sCiAgICAgIC8v57yW6L6R5Zmo5pWw57uECiAgICAgIGluZGV4RWRpdG9yOiAwLAogICAgICAvL+W9k+WJjee8lui+keWZqOe0ouW8lQogICAgICBjb2RlOiAnJywKICAgICAgLy/lvZPliY3mlofku7bmiZPlvIDml7bnmoTlhoXlrrkKICAgICAgY29udGV4dERhdGE6IG51bGwsCiAgICAgIC8v5bem5L6n5a+86Iiq5Y+z6ZSu54K55Ye75piv5Lqn55Sf55qE5pWw5o2u5a+56LGhCgogICAgICBmaWxlVHlwZTogJycsCiAgICAgIC8vIOaWh+S7tuaTjeS9nOexu+WeiyBjcmVhdGVGb2xkZXJ85Yib5bu65paH5Lu25aS5IGNyZWF0ZUZpbGV85Yib5bu65paH5Lu2IGRlbEZvbGRlcnzliKDpmaTmlofku7blpLnmiJbogIXmlofku7YKICAgICAgY2xhc3NOYW1lOiAnJywKICAgICAgLy/lhajlsY8gY2xhc3PlkI0KICAgICAgc3BpblNob3c6IGZhbHNlLAogICAgICBtb2RhbHM6IGZhbHNlLAogICAgICAvL+e8lui+keWZqOW8gOWFswogICAgICBlZGl0b3I6ICcnLAogICAgICAvL+W9k+WJjee8lui+keWZqOWvueixoQogICAgICBlZGl0b3JJbmRleDogW10sCiAgICAgIHRpdGxlOiAnJywKICAgICAgZWRpdElkOiAwCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbWFwU3RhdGUoJ21lZGlhJywgWydpc01vYmlsZSddKSksIHt9LCB7CiAgICBsYWJlbFdpZHRoOiBmdW5jdGlvbiBsYWJlbFdpZHRoKCkgewogICAgICByZXR1cm4gdGhpcy5pc01vYmlsZSA/IHVuZGVmaW5lZCA6ICc4MHB4JzsKICAgIH0sCiAgICBsYWJlbFBvc2l0aW9uOiBmdW5jdGlvbiBsYWJlbFBvc2l0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5pc01vYmlsZSA/ICd0b3AnIDogJ3JpZ2h0JzsKICAgIH0KICB9KSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy5nZXRMaXN0KCk7CiAgfSwKICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KCkgewogICAgaWYgKHRoaXMuc291cmNlKSB7CiAgICAgIHRoaXMuc291cmNlLmNsb3NlKCk7IC8v5YWz6ZetRXZlbnRTb3VyY2UKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGNydWRTYXZlRmlsZTogZnVuY3Rpb24gY3J1ZFNhdmVGaWxlKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgZGF0YSA9IHsKICAgICAgICBmaWxlcGF0aDogdGhpcy5lZGl0b3JJbmRleFt0aGlzLmluZGV4RWRpdG9yXS5wYXRobmFtZSwKICAgICAgICBjb21tZW50OiB0aGlzLmVkaXRvckxpc3RbdGhpcy5pbmRleEVkaXRvcl0uZWRpdG9yLmdldFZhbHVlKCksCiAgICAgICAgcHdkOiB0aGlzLnB3ZAogICAgICB9OwogICAgICBfY3J1ZFNhdmVGaWxlKHRoaXMuZWRpdElkLCBkYXRhKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICBfdGhpcy5wd2QgPSAnJzsKICAgICAgICBfdGhpcy4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgX3RoaXMuJG1lc3NhZ2UuZXJyb3IoZXJyLm1zZyk7CiAgICAgIH0pOwogICAgfSwKICAgIGRvd25Mb2FkOiBmdW5jdGlvbiBkb3duTG9hZChyb3cpIHsKICAgICAgY3J1ZERvd25sb2FkKHJvdy5pZCkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgd2luZG93Lm9wZW4ocmVzLmRhdGEuZG93bmxvYWRfdXJsLCAnX2JsYW5rJyk7CiAgICAgIH0pOwogICAgfSwKICAgIGJ1aWxkQ29kZTogZnVuY3Rpb24gYnVpbGRDb2RlKCkgewogICAgICB0aGlzLmJ1aWxkTW9kYWxzID0gdHJ1ZTsKICAgICAgaWYgKHR5cGVvZiBFdmVudFNvdXJjZSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAvL+aUr+aMgWV2ZW50U291cmNlCiAgICAgICAgdmFyIHBvc3RVUkwgPSBTZXR0aW5nLmFwaUJhc2VVUkwgKyAnL3N5c3RlbS9jcnVkL25wbT90b2tlbj0nICsgZ2V0Q29va2llcygndG9rZW4nKTsKICAgICAgICB0aGlzLnNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZShwb3N0VVJMKTsKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7IC8v5ZugRXZlbnRTb3VyY2XkuK10aGlz55qE5oyH5ZCR5Y+Y5LqG77yM5omA5Lul6KaB5o+Q5YmN5a2Y5YKo5LiA5LiLCiAgICAgICAgdGhpcy5zb3VyY2Uub25vcGVuID0gZnVuY3Rpb24gKHJlcykge307CiAgICAgICAgdGhpcy5zb3VyY2Uub25tZXNzYWdlID0gZnVuY3Rpb24gKGRhdGEpIHt9OwogICAgICAgIHRoaXMuc291cmNlLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAvL+mTvuaOpeWksei0peWQjkV2ZW50U291cmNl5Lya5q+P6ZqU5LiJ56eS5bem5Y+z6YeN5paw5Y+R6LW36ZO+5o6lCiAgICAgICAgfTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zb2xlLmxvZygn5pqC5LiN5pSv5oyBRXZlbnRTb3VyY2UnKTsKICAgICAgfQogICAgfSwKICAgIC8vIOi3s+i9rOWIsOe7hOWQiOaVsOaNruWIl+ihqOmhtemdogogICAgZ29MaXN0OiBmdW5jdGlvbiBnb0xpc3Qocm93KSB7CiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICBwYXRoOiB0aGlzLiRyb3V0ZVByb1N0ciArICcvc3lzdGVtL2NvbmZpZy9zeXN0ZW1fZ3JvdXAvbGlzdC8nICsgcm93LmlkCiAgICAgIH0pOwogICAgfSwKICAgIC8vIOWIl+ihqAogICAgZ2V0TGlzdDogZnVuY3Rpb24gZ2V0TGlzdCgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CiAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7CiAgICAgIGNydWRMaXN0KHRoaXMuZm9ybVZhbGlkYXRlKS50aGVuKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlKHJlcykgewogICAgICAgICAgdmFyIGRhdGE7CiAgICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBkYXRhID0gcmVzLmRhdGE7CiAgICAgICAgICAgICAgICBfdGhpczIudGFiTGlzdCA9IGRhdGEubGlzdDsKICAgICAgICAgICAgICAgIF90aGlzMi50b3RhbCA9IGRhdGEuY291bnQ7CiAgICAgICAgICAgICAgICBfdGhpczIubG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgICAgfSkpOwogICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gpIHsKICAgICAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfTsKICAgICAgfSgpKS5jYXRjaChmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgX3RoaXMyLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICBfdGhpczIuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOihqOagvOaQnOe0ogogICAgdXNlclNlYXJjaHM6IGZ1bmN0aW9uIHVzZXJTZWFyY2hzKCkgewogICAgICB0aGlzLmZvcm1WYWxpZGF0ZS5wYWdlID0gMTsKICAgICAgdGhpcy5nZXRMaXN0KCk7CiAgICB9LAogICAgLy8g54K55Ye75re75YqgCiAgICBncm91cEFkZDogZnVuY3Rpb24gZ3JvdXBBZGQoKSB7CiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgICBuYW1lOiAnc3lzdGVtX2NvZGVfZ2VuZXJhdGlvbicKICAgICAgfSk7CiAgICB9LAogICAgLy8g5Yig6ZmkCiAgICBkZWw6IGZ1bmN0aW9uIGRlbChyb3csIHRpdCwgbnVtKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwogICAgICB2YXIgZGVsZnJvbURhdGEgPSB7CiAgICAgICAgdGl0bGU6IHRpdCwKICAgICAgICBudW06IG51bSwKICAgICAgICB1cmw6ICJzeXN0ZW0vY3J1ZC8iLmNvbmNhdChyb3cuaWQpLAogICAgICAgIG1ldGhvZDogJ0RFTEVURScsCiAgICAgICAgaWRzOiAnJwogICAgICB9OwogICAgICB0aGlzLiRtb2RhbFN1cmUoZGVsZnJvbURhdGEpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzMy4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgIF90aGlzMy50YWJMaXN0LnNwbGljZShudW0sIDEpOwogICAgICAgIF90aGlzMy5nZXRMaXN0KCk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICBfdGhpczMuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOe8lui+kQogICAgZWRpdDogZnVuY3Rpb24gZWRpdChyb3cpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CiAgICAgIHRoaXMuc3BpblNob3cgPSB0cnVlOwogICAgICAvLyDliJvlu7rku6PnoIHlrrnlmagKICAgICAgdGhpcy50aXRsZSA9IHJvdy5uYW1lOwogICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoZSkgewogICAgICAgIF90aGlzNC5vcGVuZmlsZShyb3cuaWQsIGZhbHNlKTsKICAgICAgfSk7CiAgICB9LAogICAgZWRpdEl0ZW06IGZ1bmN0aW9uIGVkaXRJdGVtKHJvdykgewogICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgbmFtZTogJ3N5c3RlbV9jb2RlX2dlbmVyYXRpb24nLAogICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICBpZDogcm93LmlkCiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICAvL+aJk+W8gOaWh+S7tgogICAgb3BlbmZpbGU6IGZ1bmN0aW9uIG9wZW5maWxlKGlkKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwogICAgICB0cnkgewogICAgICAgIHRoaXMuZWRpdElkID0gaWQ7CiAgICAgICAgdmFyIHRoYXQgPSB0aGlzOwogICAgICAgIHRoaXMuZWRpdG9ySW5kZXggPSBbXTsKICAgICAgICB0aGlzLmVkaXRvckxpc3QgPSBbXTsKICAgICAgICBjcnVkRGV0KGlkKS50aGVuKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMihyZXMpIHsKICAgICAgICAgICAgdmFyIGRhdGE7CiAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICBkYXRhID0gcmVzLmRhdGEuZmlsZVswXTsKICAgICAgICAgICAgICAgICAgcmVzLmRhdGEuZmlsZS5tYXAoZnVuY3Rpb24gKGksIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBpOwogICAgICAgICAgICAgICAgICAgIF90aGlzNS5lZGl0b3JJbmRleC5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgIHRhYjogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCArICcnLAogICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGRhdGEubmFtZSwKICAgICAgICAgICAgICAgICAgICAgIGZpbGVfbmFtZTogZGF0YS5maWxlX25hbWUsCiAgICAgICAgICAgICAgICAgICAgICBwYXRobmFtZTogZGF0YS5wYXRoCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgdGhhdC5jb2RlID0gZGF0YS5jb250ZW50OwogICAgICAgICAgICAgICAgICAgIF90aGlzNS5pbml0RWRpdG9yKGluZGV4LCBkYXRhLmNvbnRlbnQpOwogICAgICAgICAgICAgICAgICAgIF90aGlzNS4kbmV4dFRpY2soZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgIC8vIOS/neWtmOebuOWvueS/oeaBrwogICAgICAgICAgICAgICAgICAgICAgdGhhdC5lZGl0b3JMaXN0W2luZGV4XS5wYXRoID0gZGF0YS5wYXRoOwogICAgICAgICAgICAgICAgICAgICAgdGhhdC5lZGl0b3JMaXN0W2luZGV4XS5vbGRDb2RlID0gdGhhdC5jb250ZW50OwogICAgICAgICAgICAgICAgICAgICAgdGhhdC5lZGl0b3JJbmRleFtpbmRleF0udGl0bGUgPSBkYXRhLm5hbWU7CiAgICAgICAgICAgICAgICAgICAgICB0aGF0LmVkaXRvckluZGV4W2luZGV4XS5maWxlX25hbWUgPSBkYXRhLmZpbGVfbmFtZTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIHRoYXQubW9kYWxzID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgdGhhdC5zcGluU2hvdyA9IGZhbHNlOwogICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgICAgICB9KSk7CiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94MikgewogICAgICAgICAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgIH07CiAgICAgICAgfSgpKS5jYXRjaChmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICB0aGF0LmNhdGNoRnVuKHJlcyk7CiAgICAgICAgfSk7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpOwogICAgICB9CiAgICB9LAogICAgLyoqCiAgICAgKiDnqpflj6PmnIDlpKfljJYKICAgICAqLwogICAgd2luQ2hhbmdlczogZnVuY3Rpb24gd2luQ2hhbmdlcygpIHsKICAgICAgaWYgKHRoaXMuY2xhc3NOYW1lKSB7CiAgICAgICAgdGhpcy5jbGFzc05hbWUgPSAnJzsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmNsYXNzTmFtZSA9ICdkaXktZnVsbHNjcmVlbic7CiAgICAgIH0KICAgIH0sCiAgICAvKioKICAgICAqIOWIneWni+WMlue8lui+keWZqAogICAgICovCiAgICBpbml0RWRpdG9yOiBmdW5jdGlvbiBpbml0RWRpdG9yKGluZGV4LCBjb25ldG50KSB7CiAgICAgIHRyeSB7CiAgICAgICAgdmFyIHRoYXQgPSB0aGlzOwogICAgICAgIHRoYXQuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vIOWIneWni+WMlue8lui+keWZqO+8jOehruS/nWRvbeW3sue7j+a4suafkwogICAgICAgICAgdGhhdC5lZGl0b3IgPSBtb25hY28uZWRpdG9yLmNyZWF0ZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGFpbmVyXycgKyBpbmRleCksIHsKICAgICAgICAgICAgdmFsdWU6IGNvbmV0bnQsCiAgICAgICAgICAgIC8v57yW6L6R5Zmo5Yid5aeL5pi+56S65paH5a2XCiAgICAgICAgICAgIGxhbmd1YWdlOiAnc3FsJywKICAgICAgICAgICAgLy/or63oqIDmlK/mjIHoh6rooYzmn6XpmIVkZW1vCiAgICAgICAgICAgIGF1dG9tYXRpY0xheW91dDogdHJ1ZSwKICAgICAgICAgICAgLy/oh6rliqjluIPlsYAKICAgICAgICAgICAgdGhlbWU6ICd2cycsCiAgICAgICAgICAgIC8v5a6Y5pa56Ieq5bim5LiJ56eN5Li76aKYdnMsIGhjLWJsYWNrLCBvciB2cy1kYXJrCiAgICAgICAgICAgIGZvbGRpbmdTdHJhdGVneTogJ2luZGVudGF0aW9uJywKICAgICAgICAgICAgLy8g5Luj56CB5Y+v5YiG5bCP5q615oqY5Y+gCiAgICAgICAgICAgIG92ZXJ2aWV3UnVsZXJCb3JkZXI6IGZhbHNlLAogICAgICAgICAgICAvLyDkuI3opoHmu5rliqjmnaHnmoTovrnmoYYKICAgICAgICAgICAgc2Nyb2xsYmFyOiB7CiAgICAgICAgICAgICAgLy8g5rua5Yqo5p2h6K6+572uCiAgICAgICAgICAgICAgdmVydGljYWxTY3JvbGxiYXJTaXplOiA0LAogICAgICAgICAgICAgIC8vIOerlua7muWKqOadoQogICAgICAgICAgICAgIGhvcml6b250YWxTY3JvbGxiYXJTaXplOiAxMCAvLyDmqKrmu5rliqjmnaEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXV0b0luZGVudDogdHJ1ZSwKICAgICAgICAgICAgLy8g6Ieq5Yqo5biD5bGACiAgICAgICAgICAgIHRhYlNpemU6IDQsCiAgICAgICAgICAgIC8vIHRhYue8qei/m+mVv+W6pgogICAgICAgICAgICBhdXRvQ2xvc2luZ092ZXJ0eXBlOiAnYWx3YXlzJywKICAgICAgICAgICAgcmVhZE9ubHk6IGZhbHNlCiAgICAgICAgICB9KTsKICAgICAgICAgIHRoYXQuZWRpdG9yTGlzdC5wdXNoKHsKICAgICAgICAgICAgZWRpdG9yOiB0aGF0LmVkaXRvciwKICAgICAgICAgICAgb2xkQ29kZTogdGhhdC5jb2RlLAogICAgICAgICAgICBwYXRoOiAnJywKICAgICAgICAgICAgaW5kZXg6IGluZGV4CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7CiAgICAgIH0KICAgIH0sCiAgICAvKioKICAgICAqIOWkhOeQhuaOpeWPo+WbnuiwgwogICAgICogQHBhcmFtIHtPYmplY3R9IHJlcwogICAgICovCiAgICBjYXRjaEZ1bjogZnVuY3Rpb24gY2F0Y2hGdW4ocmVzKSB7CiAgICAgIGlmIChyZXMuc3RhdHVzKSB7CiAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT0gNDAwKSB0aGlzLiRtZXNzYWdlLmVycm9yKHJlcy5tc2cpOwogICAgICAgIGlmIChyZXMuc3RhdHVzID09IDExMDAwOCkgewogICAgICAgICAgLy8gdGhpcy4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgICAgIHRoaXMuaXNTaG93TG9nbiA9IHRydWU7CiAgICAgICAgICB0aGlzLmlzU2hvd0xpc3QgPSBmYWxzZTsKICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICAvLyB0aGlzLiRtZXNzYWdlLmVycm9yKCfmlofku7bnvJbnoIHkuI3ooqvlhbzlrrnvvIzml6Dms5XmraPnoa7or7vlj5bmlofku7YhJyk7CiAgICAgIH0KICAgICAgLy/lhbPpl63okpnniYjlsYIKICAgICAgaWYgKHRoaXMuc3BpblNob3cpIHRoaXMuc3BpblNob3cgPSBmYWxzZTsKICAgICAgLy8g5YWz6Zet5paH5Lu25YiX6KGo5bGV56S6CiAgICAgIGlmICh0aGlzLmxvYWRpbmcpIHRoaXMubG9hZGluZyA9IGZhbHNlOwogICAgfSwKICAgIC8v57yW6L6R5Zmo54q25oCB5Y+Y5YyWCiAgICBlZGl0TW9kYWxDaGFuZ2U6IGZ1bmN0aW9uIGVkaXRNb2RhbENoYW5nZSgpIHsKICAgICAgdmFyIHRoYXQgPSB0aGlzOwogICAgICB0aGF0LmVkaXRvckxpc3QuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7CiAgICAgICAgLy8g6ZSA5q+B5b2T5YmN57yW6L6R5ZmoCiAgICAgICAgdGhhdC5lZGl0b3JMaXN0W2luZGV4XS5lZGl0b3IuZGlzcG9zZSgpOwogICAgICAgIHRoYXQuZWRpdG9yTGlzdFtpbmRleF0uZWRpdG9yID0gbnVsbDsKICAgICAgfSk7CiAgICAgIC8vIOWIneWni+ivneaVsOaNrgogICAgICB0aGF0Lm1vZGFscyA9IGZhbHNlOyAvL+e8lui+keWZqOW8gOWFswogICAgICB0aGF0LmVkaXRvciA9ICcnOyAvL+W9k+WJjee8lui+keWZqOWvueixoQogICAgICB0aGF0LmVkaXRvckluZGV4ID0gWwogICAgICAvL+mAiemhueWNoeaVsOe7hAogICAgICB7CiAgICAgICAgdGFiOiB0cnVlLAogICAgICAgIGluZGV4OiAnMCcsCiAgICAgICAgdGl0bGU6ICcnLAogICAgICAgIGljb246ICcnCiAgICAgIH1dOwogICAgICB0aGF0LmVkaXRvckxpc3QgPSBbXTsgLy/nvJbovpHlmajmlbDnu4QKICAgICAgdGhhdC5pbmRleEVkaXRvciA9ICcwJzsgLy/lvZPliY3nvJbovpHlmajntKLlvJUKICAgICAgdGhhdC5jb2RlID0gJyc7IC8v5b2T5YmN5paH5Lu25omT5byA5pe255qE5YaF5a65CiAgICAgIHRoYXQuY29udGV4dERhdGEgPSBudWxsOyAvL+W3puS+p+WvvOiIquWPs+mUrueCueWHu+aYr+S6p+eUn+eahOaVsOaNruWvueixoQogICAgfSwKICAgIC8qKgogICAgICog5YiH5o2i6YCJ6aG55Y2hCiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5kZXgKICAgICAqLwogICAgdG9nZ2xlRWRpdG9yOiBmdW5jdGlvbiB0b2dnbGVFZGl0b3IoaW5kZXgpIHsKICAgICAgaW5kZXggPSBOdW1iZXIoaW5kZXgpOwogICAgICB0aGlzLmNvZGUgPSB0aGlzLmVkaXRvckxpc3RbaW5kZXhdLm9sZENvZGU7IC8v6K6+572u5paH5Lu25omT5byA5pe255qE5Luj56CBCiAgICAgIHRoaXMuZWRpdG9yID0gdGhpcy5lZGl0b3JMaXN0W2luZGV4XS5lZGl0b3I7IC8v6K6+572u57yW6L6R5Zmo5a6e5L6LCiAgICB9LAogICAgaGFuZGxlVGFiUmVtb3ZlOiBmdW5jdGlvbiBoYW5kbGVUYWJSZW1vdmUoaW5kZXgpIHsKICAgICAgdmFyIHRoYXQgPSB0aGlzOwogICAgICAvLyDlhbPpl63pgInpobnljaEKICAgICAgdGhhdC5lZGl0b3JJbmRleFtpbmRleF0udGFiID0gZmFsc2U7IC8vIOWFs+mXremAiemhueWNoQogICAgfQogIH0KfTs="},null]}