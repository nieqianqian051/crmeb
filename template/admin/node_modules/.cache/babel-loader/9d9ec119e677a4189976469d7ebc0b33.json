{"remainingRequest":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/thread-loader/dist/cjs.js!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/babel-loader/lib/index.js!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/marketing/storePresell/create.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/marketing/storePresell/create.vue","mtime":1719467759000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/babel.config.js","mtime":1679965410000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/.babelrc","mtime":1679965410000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/thread-loader/dist/cjs.js","mtime":1746465018446},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/babel-loader/lib/index.js","mtime":1746465024347},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js","mtime":1746465019530}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvVXNlcnMvbmllcWlhbnFpYW4vRG93bmxvYWRzL3hpbnhpYW5nbXUvQ1JNRUIvdGVtcGxhdGUvYWRtaW4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5LmpzIjsKaW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL1VzZXJzL25pZXFpYW5xaWFuL0Rvd25sb2Fkcy94aW54aWFuZ211L0NSTUVCL3RlbXBsYXRlL2FkbWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9yZWdlbmVyYXRvclJ1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL25pZXFpYW5xaWFuL0Rvd25sb2Fkcy94aW54aWFuZ211L0NSTUVCL3RlbXBsYXRlL2FkbWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvVXNlcnMvbmllcWlhbnFpYW4vRG93bmxvYWRzL3hpbnhpYW5nbXUvQ1JNRUIvdGVtcGxhdGUvYWRtaW4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL1VzZXJzL25pZXFpYW5xaWFuL0Rvd25sb2Fkcy94aW54aWFuZ211L0NSTUVCL3RlbXBsYXRlL2FkbWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucHVzaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAndnVleCc7CmltcG9ydCBnb29kc0xpc3QgZnJvbSAnQC9jb21wb25lbnRzL2dvb2RzTGlzdC9pbmRleCc7CmltcG9ydCBXYW5nRWRpdG9yIGZyb20gJ0AvY29tcG9uZW50cy93YW5nRWRpdG9yL2luZGV4LnZ1ZSc7CmltcG9ydCB1cGxvYWRQaWN0dXJlcyBmcm9tICdAL2NvbXBvbmVudHMvdXBsb2FkUGljdHVyZXMnOwppbXBvcnQgZnJlaWdodFRlbXBsYXRlIGZyb20gJ0AvY29tcG9uZW50cy9mcmVpZ2h0VGVtcGxhdGUvaW5kZXgnOwppbXBvcnQgeyBwcmVzZWxsSW5mb0FwaSwgcHJlc2VsbENyZWF0QXBpLCBwcm9kdWN0QXR0cnNBcGkgfSBmcm9tICdAL2FwaS9tYXJrZXRpbmcnOwppbXBvcnQgeyBwcm9kdWN0R2V0VGVtcGxhdGVBcGkgfSBmcm9tICdAL2FwaS9wcm9kdWN0JzsKaW1wb3J0IHN0ZXBzIGZyb20gJ0AvY29tcG9uZW50cy9zdGVwcy9pbmRleCc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnc3RvcmVQZXJzZWxsQ3JlYXRlJywKICBjb21wb25lbnRzOiB7CiAgICBnb29kc0xpc3Q6IGdvb2RzTGlzdCwKICAgIHVwbG9hZFBpY3R1cmVzOiB1cGxvYWRQaWN0dXJlcywKICAgIFdhbmdFZGl0b3I6IFdhbmdFZGl0b3IsCiAgICBmcmVpZ2h0VGVtcGxhdGU6IGZyZWlnaHRUZW1wbGF0ZSwKICAgIHN0ZXBzOiBzdGVwcwogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHN0ZXBMaXN0OiBbJ+mAieaLqemihOWUruWVhuWTgScsICfloavlhpnln7rnoYDkv6Hmga8nLCAn5L+u5pS55ZWG5ZOB6K+m5oOFJ10sCiAgICAgIHN1Ym1pdE9wZW46IGZhbHNlLAogICAgICBzcGluU2hvdzogZmFsc2UsCiAgICAgIGlzQ2hvaWNlOiAnJywKICAgICAgY3VycmVudDogMCwKICAgICAgbW9kYWxQaWM6IGZhbHNlLAogICAgICBncmlkOiB7CiAgICAgICAgeGw6IDEyLAogICAgICAgIGxnOiAyMCwKICAgICAgICBtZDogMjQsCiAgICAgICAgc206IDI0LAogICAgICAgIHhzOiAyNAogICAgICB9LAogICAgICBncmlkMjogewogICAgICAgIHhsOiA4LAogICAgICAgIGxnOiA4LAogICAgICAgIG1kOiAxMiwKICAgICAgICBzbTogMjQsCiAgICAgICAgeHM6IDI0CiAgICAgIH0sCiAgICAgIGdyaWRQaWM6IHsKICAgICAgICB4bDogNiwKICAgICAgICBsZzogOCwKICAgICAgICBtZDogMTIsCiAgICAgICAgc206IDEyLAogICAgICAgIHhzOiAxMgogICAgICB9LAogICAgICBncmlkQnRuOiB7CiAgICAgICAgeGw6IDQsCiAgICAgICAgbGc6IDgsCiAgICAgICAgbWQ6IDgsCiAgICAgICAgc206IDgsCiAgICAgICAgeHM6IDgKICAgICAgfSwKICAgICAgbXlDb25maWc6IHsKICAgICAgICBhdXRvSGVpZ2h0RW5hYmxlZDogZmFsc2UsCiAgICAgICAgLy8g57yW6L6R5Zmo5LiN6Ieq5Yqo6KKr5YaF5a655pKR6auYCiAgICAgICAgaW5pdGlhbEZyYW1lSGVpZ2h0OiA1MDAsCiAgICAgICAgLy8g5Yid5aeL5a655Zmo6auY5bqmCiAgICAgICAgaW5pdGlhbEZyYW1lV2lkdGg6ICcxMDAlJywKICAgICAgICAvLyDliJ3lp4vlrrnlmajlrr3luqYKICAgICAgICBVRURJVE9SX0hPTUVfVVJMOiAnL1VFZGl0b3IvJywKICAgICAgICBzZXJ2ZXJVcmw6ICcnCiAgICAgIH0sCiAgICAgIG1vZGFsczogZmFsc2UsCiAgICAgIG1vZGFsX2xvYWRpbmc6IGZhbHNlLAogICAgICBpbWFnZXM6IFtdLAogICAgICB0ZW1wbGF0ZUxpc3Q6IFtdLAogICAgICBjb2x1bW5zOiBbXSwKICAgICAgc3BlY3NEYXRhOiBbXSwKICAgICAgcGljVGl0OiAnJywKICAgICAgdGFibGVJbmRleDogMCwKICAgICAgZm9ybVZhbGlkYXRlOiB7CiAgICAgICAgaW1hZ2VzOiBbXSwKICAgICAgICBpbmZvOiAnJywKICAgICAgICB0aXRsZTogJycsCiAgICAgICAgaW1hZ2U6ICcnLAogICAgICAgIHVuaXRfbmFtZTogJycsCiAgICAgICAgc3RvY2s6IDEsCiAgICAgICAgc2FsZXM6IDAsCiAgICAgICAgZGVsaXZlcl90aW1lOiAzLAogICAgICAgIHNvcnQ6IDAsCiAgICAgICAgc3RhdHVzOiAxLAogICAgICAgIHNlY3Rpb25fdGltZTogW10sCiAgICAgICAgZGVzY3JpcHRpb246ICcnLAogICAgICAgIGlkOiAwLAogICAgICAgIHByb2R1Y3RfaWQ6IDAsCiAgICAgICAgLy8gcGF5X3RpbWU6IFtdLAogICAgICAgIC8vIHR5cGU6IDEsCiAgICAgICAgbnVtOiAxLAogICAgICAgIGRlcG9zaXQ6IDEsCiAgICAgICAgdGVtcF9pZDogJycsCiAgICAgICAgYXR0cnM6IFtdLAogICAgICAgIGl0ZW1zOiBbXQogICAgICB9LAogICAgICBydWxlVmFsaWRhdGU6IHsKICAgICAgICBpbWFnZTogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+mAieaLqeS4u+WbvicsCiAgICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJwogICAgICAgIH1dLAogICAgICAgIGltYWdlczogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgdHlwZTogJ2FycmF5JywKICAgICAgICAgIG1lc3NhZ2U6ICfor7fpgInmi6nkuLvlm74nLAogICAgICAgICAgdHJpZ2dlcjogJ2NoYW5nZScKICAgICAgICB9LCB7CiAgICAgICAgICB0eXBlOiAnYXJyYXknLAogICAgICAgICAgbWluOiAxLAogICAgICAgICAgbWVzc2FnZTogJ0Nob29zZSB0d28gaG9iYmllcyBhdCBiZXN0JywKICAgICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgICAgfV0sCiAgICAgICAgdGl0bGU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICfor7fovpPlhaXpooTllK7lkI3np7AnLAogICAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgICAgfV0sCiAgICAgICAgaW5mbzogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+i+k+WFpemihOWUrueugOS7iycsCiAgICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgICB9XSwKICAgICAgICBzZWN0aW9uX3RpbWU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIHR5cGU6ICdhcnJheScsCiAgICAgICAgICBtZXNzYWdlOiAn6K+36YCJ5oup5rS75Yqo5pe26Ze0JywKICAgICAgICAgIHRyaWdnZXI6ICdjaGFuZ2UnCiAgICAgICAgfV0sCiAgICAgICAgLy8gcGF5X3RpbWU6IFsKICAgICAgICAvLyAgIHsKICAgICAgICAvLyAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgLy8gICAgIHR5cGU6ICJhcnJheSIsCiAgICAgICAgLy8gICAgIG1lc3NhZ2U6ICLor7fpgInmi6nmtLvliqjml7bpl7QiLAogICAgICAgIC8vICAgICB0cmlnZ2VyOiAiY2hhbmdlIiwKICAgICAgICAvLyAgIH0sCiAgICAgICAgLy8gXSwKICAgICAgICB1bml0X25hbWU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICfor7fovpPlhaXljZXkvY0nLAogICAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgICAgfV0sCiAgICAgICAgcHJpY2U6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIHR5cGU6ICdudW1iZXInLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+i+k+WFpemihOWUruS7tycsCiAgICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgICB9XSwKICAgICAgICBjb3N0OiBbewogICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICB0eXBlOiAnbnVtYmVyJywKICAgICAgICAgIG1lc3NhZ2U6ICfor7fovpPlhaXmiJDmnKzku7cnLAogICAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgICAgfV0sCiAgICAgICAgc3RvY2s6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIHR5cGU6ICdudW1iZXInLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+i+k+WFpeW6k+WtmCcsCiAgICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgICB9XSwKICAgICAgICBnaXZlX2ludGVncmFsOiBbewogICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICB0eXBlOiAnbnVtYmVyJywKICAgICAgICAgIG1lc3NhZ2U6ICfor7fovpPlhaXotaDpgIHnp6/liIYnLAogICAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgICAgfV0sCiAgICAgICAgZWZmZWN0aXZlX3RpbWU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIHR5cGU6ICdudW1iZXInLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+i+k+WFpemihOWUruaXtuaViCjljZXkvY0g5bCP5pe2KScsCiAgICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgICB9XSwKICAgICAgICBwZW9wbGU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIHR5cGU6ICdudW1iZXInLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+i+k+WFpemihOWUruS6uuaVsCcsCiAgICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgICB9XSwKICAgICAgICBudW06IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIHR5cGU6ICdudW1iZXInLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+i+k+WFpei0reS5sOaVsOmHj+mZkOWIticsCiAgICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgICB9XSwKICAgICAgICBkZXBvc2l0OiBbewogICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICB0eXBlOiAnbnVtYmVyJywKICAgICAgICAgIG1lc3NhZ2U6ICfor7fovpPlhaXlrprph5Hph5Hpop0nLAogICAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgICAgfV0sCiAgICAgICAgb25jZV9udW06IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIHR5cGU6ICdudW1iZXInLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+i+k+WFpeWNleasoei0reS5sOaVsOmHj+mZkOWIticsCiAgICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgICB9XSwKICAgICAgICB2aXJ0dWFsUGVvcGxlOiBbewogICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICB0eXBlOiAnbnVtYmVyJywKICAgICAgICAgIG1lc3NhZ2U6ICfor7fovpPlhaXomZrmi5/miJDlm6LooaXpvZDkurrmlbAnLAogICAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgICAgfV0sCiAgICAgICAgdGVtcF9pZDogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+ivt+mAieaLqei/kOi0ueaooeadvycsCiAgICAgICAgICB0cmlnZ2VyOiAnY2hhbmdlJywKICAgICAgICAgIHR5cGU6ICdudW1iZXInCiAgICAgICAgfV0KICAgICAgfSwKICAgICAgY29weTogMAogICAgfTsKICB9LAogIGNvbXB1dGVkOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1hcFN0YXRlKCdtZWRpYScsIFsnaXNNb2JpbGUnXSkpLCB7fSwgewogICAgbGFiZWxXaWR0aDogZnVuY3Rpb24gbGFiZWxXaWR0aCgpIHsKICAgICAgcmV0dXJuIHRoaXMuaXNNb2JpbGUgPyB1bmRlZmluZWQgOiAnMTU1cHgnOwogICAgfSwKICAgIGxhYmVsUG9zaXRpb246IGZ1bmN0aW9uIGxhYmVsUG9zaXRpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLmlzTW9iaWxlID8gJ3RvcCcgOiAncmlnaHQnOwogICAgfQogIH0pLAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICBpZiAodGhpcy4kcm91dGUucGFyYW1zLmlkICE9IDApIHsKICAgICAgdGhpcy5jb3B5ID0gdGhpcy4kcm91dGUucGFyYW1zLmNvcHk7CiAgICAgIHRoaXMuY3VycmVudCA9IDE7CiAgICAgIHRoaXMuZ2V0SW5mbygpOwogICAgfQogICAgdGhpcy5wcm9kdWN0R2V0VGVtcGxhdGUoKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGdldEVkaXRvckNvbnRlbnQ6IGZ1bmN0aW9uIGdldEVkaXRvckNvbnRlbnQoZGF0YSkgewogICAgICB0aGlzLmZvcm1WYWxpZGF0ZS5kZXNjcmlwdGlvbiA9IGRhdGE7CiAgICB9LAogICAgLy8g5re75Yqg6L+Q6LS55qih5p2/CiAgICBmcmVpZ2h0OiBmdW5jdGlvbiBmcmVpZ2h0KCkgewogICAgICB0aGlzLiRyZWZzLnRlbXBsYXRlLmlkID0gMDsKICAgICAgdGhpcy4kcmVmcy50ZW1wbGF0ZS5pc1RlbXBsYXRlID0gdHJ1ZTsKICAgIH0sCiAgICAvLyDpooTllK7op4TmoLzvvJsKICAgIHByb2R1Y3RBdHRyczogZnVuY3Rpb24gcHJvZHVjdEF0dHJzKHJvdykgewogICAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICAgIHByb2R1Y3RBdHRyc0FwaShyb3cuaWQsIDYpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIHZhciBkYXRhID0gcmVzLmRhdGEuaW5mbzsKICAgICAgICB0aGF0LnNwZWNzRGF0YSA9IGRhdGEuYXR0cnM7CiAgICAgICAgdGhhdC5zcGVjc0RhdGEuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHsKICAgICAgICAgIHRoYXQuJHNldCh0aGF0LnNwZWNzRGF0YVtpbmRleF0sICdpZCcsIGluZGV4KTsKICAgICAgICB9KTsKICAgICAgICB0aGF0LmZvcm1WYWxpZGF0ZS5pdGVtcyA9IGRhdGEuaXRlbXM7CiAgICAgICAgdGhhdC5jb2x1bW5zID0gZGF0YS5oZWFkZXI7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICB0aGF0LiRtZXNzYWdlLmVycm9yKHJlcy5tc2cpOwogICAgICB9KTsKICAgIH0sCiAgICAvLyDlpJrpgIkKICAgIGNoYW5nZUNoZWNrYm94OiBmdW5jdGlvbiBjaGFuZ2VDaGVja2JveChzZWxlY3Rpb24pIHsKICAgICAgdGhpcy5mb3JtVmFsaWRhdGUuYXR0cnMgPSBzZWxlY3Rpb247CiAgICB9LAogICAgLy8g6I635Y+W6L+Q6LS55qih5p2/77ybCiAgICBwcm9kdWN0R2V0VGVtcGxhdGU6IGZ1bmN0aW9uIHByb2R1Y3RHZXRUZW1wbGF0ZSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcHJvZHVjdEdldFRlbXBsYXRlQXBpKCkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgX3RoaXMudGVtcGxhdGVMaXN0ID0gcmVzLmRhdGE7CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOihqOWNlemqjOivgQogICAgdmFsaWRhdGU6IGZ1bmN0aW9uIHZhbGlkYXRlKHByb3AsIHN0YXR1cywgZXJyb3IpIHsKICAgICAgaWYgKHN0YXR1cyA9PT0gZmFsc2UpIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKGVycm9yKTsKICAgICAgfQogICAgfSwKICAgIC8vIOWVhuWTgWlkCiAgICBnZXRQcm9kdWN0SWQ6IGZ1bmN0aW9uIGdldFByb2R1Y3RJZChyb3cpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CiAgICAgIHRoaXMubW9kYWxfbG9hZGluZyA9IGZhbHNlOwogICAgICB0aGlzLm1vZGFscyA9IGZhbHNlOwogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczIuZm9ybVZhbGlkYXRlID0gX2RlZmluZVByb3BlcnR5KF9kZWZpbmVQcm9wZXJ0eShfZGVmaW5lUHJvcGVydHkoX2RlZmluZVByb3BlcnR5KHsKICAgICAgICAgIGltYWdlczogcm93LnNsaWRlcl9pbWFnZSwKICAgICAgICAgIGluZm86IHJvdy5zdG9yZV9pbmZvLAogICAgICAgICAgdGl0bGU6IHJvdy5zdG9yZV9uYW1lLAogICAgICAgICAgaW1hZ2U6IHJvdy5pbWFnZSwKICAgICAgICAgIHVuaXRfbmFtZTogcm93LnVuaXRfbmFtZSwKICAgICAgICAgIHN0b2NrOiByb3cuc3RvY2ssCiAgICAgICAgICBzYWxlczogcm93LnNhbGVzLAogICAgICAgICAgc29ydDogcm93LnNvcnQsCiAgICAgICAgICBzZWN0aW9uX3RpbWU6IFtdLAogICAgICAgICAgZGVsaXZlcl90aW1lOiAzLAogICAgICAgICAgLy8gcGF5X3RpbWU6IFtdLAogICAgICAgICAgLy8gdHlwZTogMSwKICAgICAgICAgIG51bTogMSwKICAgICAgICAgIGRlcG9zaXQ6IDEsCiAgICAgICAgICBkZXNjcmlwdGlvbjogcm93LmRlc2NyaXB0aW9uLAogICAgICAgICAgLy8g5LiN5Y+W5ZWG5ZOB5Lit55qECiAgICAgICAgICBpZDogMAogICAgICAgIH0sICJudW0iLCAxKSwgInN0YXR1cyIsIDEpLCAicHJvZHVjdF9pZCIsIHJvdy5pZCksICJ0ZW1wX2lkIiwgcm93LnRlbXBfaWQpOwogICAgICAgIF90aGlzMi5wcm9kdWN0QXR0cnMocm93KTsKICAgICAgfSwgNTAwKTsKICAgIH0sCiAgICBjYW5jZWw6IGZ1bmN0aW9uIGNhbmNlbCgpIHsKICAgICAgdGhpcy5tb2RhbHMgPSBmYWxzZTsKICAgIH0sCiAgICAvLyDlhbfkvZPml6XmnJ8KICAgIG9uY2hhbmdlVGltZTogZnVuY3Rpb24gb25jaGFuZ2VUaW1lKGUpIHsKICAgICAgdGhpcy5mb3JtVmFsaWRhdGUuc2VjdGlvbl90aW1lID0gZTsKICAgIH0sCiAgICAvLyBvbmNoYW5nZVBheVRpbWUoZSkgewogICAgLy8gICB0aGlzLmZvcm1WYWxpZGF0ZS5wYXlfdGltZSA9IGU7CiAgICAvLyB9LAogICAgLy8g6K+m5oOFCiAgICBnZXRJbmZvOiBmdW5jdGlvbiBnZXRJbmZvKCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKICAgICAgdGhpcy5zcGluU2hvdyA9IHRydWU7CiAgICAgIHByZXNlbGxJbmZvQXBpKHRoaXMuJHJvdXRlLnBhcmFtcy5pZCkudGhlbiggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShyZXMpIHsKICAgICAgICAgIHZhciB0aGF0LCBpbmZvLCBzZWxlY3Rpb24sIGRhdGEsIGF0dHIsIGluZGV4OwogICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgdGhhdCA9IF90aGlzMzsKICAgICAgICAgICAgICAgIGluZm8gPSByZXMuZGF0YS5pbmZvOwogICAgICAgICAgICAgICAgc2VsZWN0aW9uID0gewogICAgICAgICAgICAgICAgICB0eXBlOiAnc2VsZWN0aW9uJywKICAgICAgICAgICAgICAgICAgd2lkdGg6IDYwLAogICAgICAgICAgICAgICAgICBhbGlnbjogJ2NlbnRlcicKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBfdGhpczMuZm9ybVZhbGlkYXRlID0gaW5mbzsKICAgICAgICAgICAgICAgIF90aGlzMy5mb3JtVmFsaWRhdGUudmlydHVhbFBlb3BsZSA9IHBhcnNlSW50KF90aGlzMy5mb3JtVmFsaWRhdGUucGVvcGxlIC0gX3RoaXMzLmZvcm1WYWxpZGF0ZS5wZW9wbGUgKiAoX3RoaXMzLmZvcm1WYWxpZGF0ZS52aXJ0dWFsIC8gMTAwKSk7CiAgICAgICAgICAgICAgICBfdGhpczMuJHNldChfdGhpczMuZm9ybVZhbGlkYXRlLCAnaXRlbXMnLCBpbmZvLmF0dHJzLml0ZW1zKTsKICAgICAgICAgICAgICAgIF90aGlzMy5jb2x1bW5zID0gaW5mby5hdHRycy5oZWFkZXI7CiAgICAgICAgICAgICAgICAvLyB0aGlzLmNvbHVtbnMudW5zaGlmdChzZWxlY3Rpb24pOwogICAgICAgICAgICAgICAgX3RoaXMzLnNwZWNzRGF0YSA9IGluZm8uYXR0cnMudmFsdWU7CiAgICAgICAgICAgICAgICB0aGF0LnNwZWNzRGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgICB0aGF0LiRzZXQodGhhdC5zcGVjc0RhdGFbaW5kZXhdLCAnaWQnLCBpbmRleCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGRhdGEgPSBpbmZvLmF0dHJzOwogICAgICAgICAgICAgICAgYXR0ciA9IFtdOwogICAgICAgICAgICAgICAgZm9yIChpbmRleCBpbiBpbmZvLmF0dHJzLnZhbHVlKSB7CiAgICAgICAgICAgICAgICAgIGlmIChpbmZvLmF0dHJzLnZhbHVlW2luZGV4XS5fY2hlY2tlZCkgewogICAgICAgICAgICAgICAgICAgIGF0dHIucHVzaChpbmZvLmF0dHJzLnZhbHVlW2luZGV4XSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoYXQuZm9ybVZhbGlkYXRlLmF0dHJzID0gYXR0cjsKICAgICAgICAgICAgICAgIF90aGlzMy5zcGluU2hvdyA9IGZhbHNlOwogICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIF9jYWxsZWUpOwogICAgICAgIH0pKTsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94KSB7CiAgICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH07CiAgICAgIH0oKSkuY2F0Y2goZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzMy5zcGluU2hvdyA9IGZhbHNlOwogICAgICAgIF90aGlzMy4kbWVzc2FnZS5lcnJvcihyZXMpOwogICAgICB9KTsKICAgIH0sCiAgICAvLyDkuIvkuIDmraUKICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQobmFtZSkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKICAgICAgdmFyIHRoYXQgPSB0aGlzOwogICAgICBpZiAodGhpcy5jdXJyZW50ID09PSAyKSB7CiAgICAgICAgdGhpcy4kcmVmc1tuYW1lXS52YWxpZGF0ZShmdW5jdGlvbiAodmFsaWQpIHsKICAgICAgICAgIGlmICh2YWxpZCkgewogICAgICAgICAgICBpZiAoX3RoaXM0LmNvcHkgPT0gMSkgX3RoaXM0LmZvcm1WYWxpZGF0ZS5jb3B5ID0gMTsKICAgICAgICAgICAgX3RoaXM0LmZvcm1WYWxpZGF0ZS5pZCA9IE51bWJlcihfdGhpczQuJHJvdXRlLnBhcmFtcy5pZCkgfHwgMDsKICAgICAgICAgICAgX3RoaXM0LnN1Ym1pdE9wZW4gPSB0cnVlOwogICAgICAgICAgICBfdGhpczQuZm9ybVZhbGlkYXRlLnZpcnR1YWwgPSBwYXJzZUludCgoX3RoaXM0LmZvcm1WYWxpZGF0ZS5wZW9wbGUgLSBfdGhpczQuZm9ybVZhbGlkYXRlLnZpcnR1YWxQZW9wbGUpIC8gX3RoaXM0LmZvcm1WYWxpZGF0ZS5wZW9wbGUgKiAxMDApOwogICAgICAgICAgICBwcmVzZWxsQ3JlYXRBcGkoX3RoaXM0LmZvcm1WYWxpZGF0ZSkudGhlbiggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKHJlcykgewogICAgICAgICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgIF90aGlzNC5zdWJtaXRPcGVuID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICBfdGhpczQuJG1lc3NhZ2Uuc3VjY2VzcyhyZXMubXNnKTsKICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBfdGhpczQuJHJvdXRlci5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBfdGhpczQuJHJvdXRlUHJvU3RyICsgJy9tYXJrZXRpbmcvcHJlc2VsbC9pbmRleCcKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICB9LCA1MDApOwogICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeDIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0oKSkuY2F0Y2goZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgICAgIF90aGlzNC5zdWJtaXRPcGVuID0gZmFsc2U7CiAgICAgICAgICAgICAgX3RoaXM0LiRtZXNzYWdlLmVycm9yKHJlcy5tc2cpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmN1cnJlbnQgPT09IDEpIHsKICAgICAgICB0aGlzLiRyZWZzW25hbWVdLnZhbGlkYXRlKGZ1bmN0aW9uICh2YWxpZCkgewogICAgICAgICAgaWYgKHZhbGlkKSB7CiAgICAgICAgICAgIGlmICh0aGF0LmZvcm1WYWxpZGF0ZS5wZW9wbGUgPCAyKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRoYXQuJG1lc3NhZ2UuZXJyb3IoJ+mihOWUruS6uuaVsOW/hemhu+Wkp+S6jjInKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodGhhdC5mb3JtVmFsaWRhdGUubnVtIDwgMCkgewogICAgICAgICAgICAgIHJldHVybiB0aGF0LiRtZXNzYWdlLmVycm9yKCfotK3kubDmlbDph4/pmZDliLblv4XpobvlpKfkuo4wJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCF0aGF0LmZvcm1WYWxpZGF0ZS5hdHRycykgewogICAgICAgICAgICAgIHJldHVybiB0aGF0LiRtZXNzYWdlLmVycm9yKCfor7fpgInmi6nlsZ7mgKfop4TmoLwnKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleCBpbiB0aGF0LmZvcm1WYWxpZGF0ZS5hdHRycykgewogICAgICAgICAgICAgICAgaWYgKHRoYXQuZm9ybVZhbGlkYXRlLmF0dHJzW2luZGV4XS5xdW90YSA8PSAwKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0LiRtZXNzYWdlLmVycm9yKCfpooTllK7pmZDph4/lv4XpobvlpKfkuo4wJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoX3RoaXM0LmZvcm1WYWxpZGF0ZS5hdHRyc1tpbmRleF0ucXVvdGEgPiBfdGhpczQuZm9ybVZhbGlkYXRlLmF0dHJzW2luZGV4XVsnc3RvY2snXSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM0LiRtZXNzYWdlLmVycm9yKCfpooTllK7pmZDph4/kuI3og73otoXov4fop4TmoLzlupPlrZgnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgX3RoaXM0LmN1cnJlbnQgKz0gMTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBfdGhpczQuJG1lc3NhZ2Uud2FybmluZygn6K+35a6M5ZaE5oKo55qE5L+h5oGvJyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKHRoaXMuZm9ybVZhbGlkYXRlLmltYWdlKSB7CiAgICAgICAgICB0aGlzLmN1cnJlbnQgKz0gMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy4kbWVzc2FnZS53YXJuaW5nKCfor7fpgInmi6nllYblk4EnKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAvLyDkuIrkuIDmraUKICAgIHN0ZXA6IGZ1bmN0aW9uIHN0ZXAoKSB7CiAgICAgIHRoaXMuY3VycmVudC0tOwogICAgfSwKICAgIC8vIOWGheWuuQogICAgZ2V0Q29udGVudDogZnVuY3Rpb24gZ2V0Q29udGVudCh2YWwpIHsKICAgICAgdGhpcy5mb3JtVmFsaWRhdGUuZGVzY3JpcHRpb24gPSB2YWw7CiAgICB9LAogICAgLy8g54K55Ye75ZWG5ZOB5Zu+CiAgICBtb2RhbFBpY1RhcDogZnVuY3Rpb24gbW9kYWxQaWNUYXAodGl0LCBwaWNUaXQsIGluZGV4KSB7CiAgICAgIHRoaXMubW9kYWxQaWMgPSB0cnVlOwogICAgICB0aGlzLmlzQ2hvaWNlID0gdGl0ID09PSAnZGFuJyA/ICfljZXpgIknIDogJ+WkmumAiSc7CiAgICAgIHRoaXMucGljVGl0ID0gcGljVGl0OwogICAgICB0aGlzLnRhYmxlSW5kZXggPSBpbmRleDsKICAgIH0sCiAgICAvLyDojrflj5bljZXlvKDlm77niYfkv6Hmga8KICAgIGdldFBpYzogZnVuY3Rpb24gZ2V0UGljKHBjKSB7CiAgICAgIHN3aXRjaCAodGhpcy5waWNUaXQpIHsKICAgICAgICBjYXNlICdkYW5Gcm9tJzoKICAgICAgICAgIHRoaXMuZm9ybVZhbGlkYXRlLmltYWdlID0gcGMuYXR0X2RpcjsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBpZiAoISF0aGlzLmZvcm1WYWxpZGF0ZS5hdHRycyAmJiB0aGlzLmZvcm1WYWxpZGF0ZS5hdHRycy5sZW5ndGgpIHsKICAgICAgICAgICAgdGhpcy4kc2V0KHRoaXMuc3BlY3NEYXRhW3RoaXMudGFibGVJbmRleF0sICdfY2hlY2tlZCcsIHRydWUpOwogICAgICAgICAgfQogICAgICAgICAgdGhpcy5zcGVjc0RhdGFbdGhpcy50YWJsZUluZGV4XS5waWMgPSBwYy5hdHRfZGlyOwogICAgICB9CiAgICAgIHRoaXMubW9kYWxQaWMgPSBmYWxzZTsKICAgIH0sCiAgICAvLyDojrflj5blpJrlvKDlm77kv6Hmga8KICAgIGdldFBpY0Q6IGZ1bmN0aW9uIGdldFBpY0QocGMpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CiAgICAgIHRoaXMuaW1hZ2VzID0gcGM7CiAgICAgIHRoaXMuaW1hZ2VzLm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIF90aGlzNS5mb3JtVmFsaWRhdGUuaW1hZ2VzLnB1c2goaXRlbS5hdHRfZGlyKTsKICAgICAgICBfdGhpczUuZm9ybVZhbGlkYXRlLmltYWdlcyA9IF90aGlzNS5mb3JtVmFsaWRhdGUuaW1hZ2VzLnNwbGljZSgwLCAxMCk7CiAgICAgIH0pOwogICAgICB0aGlzLm1vZGFsUGljID0gZmFsc2U7CiAgICB9LAogICAgaGFuZGxlUmVtb3ZlOiBmdW5jdGlvbiBoYW5kbGVSZW1vdmUoaSkgewogICAgICB0aGlzLmltYWdlcy5zcGxpY2UoaSwgMSk7CiAgICAgIHRoaXMuZm9ybVZhbGlkYXRlLmltYWdlcy5zcGxpY2UoaSwgMSk7CiAgICB9LAogICAgLy8g6YCJ5oup5ZWG5ZOBCiAgICBjaGFuZ2VHb29kczogZnVuY3Rpb24gY2hhbmdlR29vZHMoKSB7CiAgICAgIHRoaXMubW9kYWxzID0gdHJ1ZTsKICAgICAgdGhpcy4kcmVmcy5nb29kc2xpc3QuZm9ybVZhbGlkYXRlLmlzX3ZpcnR1YWwgPSAwOwogICAgICB0aGlzLiRyZWZzLmdvb2RzbGlzdC5nZXRMaXN0KCk7CiAgICAgIHRoaXMuJHJlZnMuZ29vZHNsaXN0Lmdvb2RzQ2F0ZWdvcnkoKTsKICAgIH0sCiAgICAvLyDnp7vliqgKICAgIGhhbmRsZURyYWdTdGFydDogZnVuY3Rpb24gaGFuZGxlRHJhZ1N0YXJ0KGUsIGl0ZW0pIHsKICAgICAgdGhpcy5kcmFnZ2luZyA9IGl0ZW07CiAgICB9LAogICAgaGFuZGxlRHJhZ0VuZDogZnVuY3Rpb24gaGFuZGxlRHJhZ0VuZChlLCBpdGVtKSB7CiAgICAgIHRoaXMuZHJhZ2dpbmcgPSBudWxsOwogICAgfSwKICAgIC8vIOmmluWFiOaKimRpduWPmOaIkOWPr+S7peaUvue9rueahOWFg+e0oO+8jOWNs+mHjeWGmWRyYWdlbnRlci9kcmFnb3ZlcgogICAgaGFuZGxlRHJhZ092ZXI6IGZ1bmN0aW9uIGhhbmRsZURyYWdPdmVyKGUpIHsKICAgICAgZS5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdtb3ZlJzsKICAgIH0sCiAgICBoYW5kbGVEcmFnRW50ZXI6IGZ1bmN0aW9uIGhhbmRsZURyYWdFbnRlcihlLCBpdGVtKSB7CiAgICAgIGUuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSAnbW92ZSc7CiAgICAgIGlmIChpdGVtID09PSB0aGlzLmRyYWdnaW5nKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHZhciBuZXdJdGVtcyA9IF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmZvcm1WYWxpZGF0ZS5pbWFnZXMpOwogICAgICB2YXIgc3JjID0gbmV3SXRlbXMuaW5kZXhPZih0aGlzLmRyYWdnaW5nKTsKICAgICAgdmFyIGRzdCA9IG5ld0l0ZW1zLmluZGV4T2YoaXRlbSk7CiAgICAgIG5ld0l0ZW1zLnNwbGljZS5hcHBseShuZXdJdGVtcywgW2RzdCwgMF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShuZXdJdGVtcy5zcGxpY2Uoc3JjLCAxKSkpKTsKICAgICAgdGhpcy5mb3JtVmFsaWRhdGUuaW1hZ2VzID0gbmV3SXRlbXM7CiAgICB9CiAgfQp9Ow=="},null]}