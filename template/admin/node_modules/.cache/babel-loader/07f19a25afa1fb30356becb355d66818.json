{"remainingRequest":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/thread-loader/dist/cjs.js!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/babel-loader/lib/index.js!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/setting/setSystem/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/setting/setSystem/index.vue","mtime":1719467759000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/babel.config.js","mtime":1679965410000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/.babelrc","mtime":1679965410000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/thread-loader/dist/cjs.js","mtime":1746465018446},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/babel-loader/lib/index.js","mtime":1746465024347},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js","mtime":1746465019530}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL1VzZXJzL25pZXFpYW5xaWFuL0Rvd25sb2Fkcy94aW54aWFuZ211L0NSTUVCL3RlbXBsYXRlL2FkbWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9yZWdlbmVyYXRvclJ1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL25pZXFpYW5xaWFuL0Rvd25sb2Fkcy94aW54aWFuZ211L0NSTUVCL3RlbXBsYXRlL2FkbWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCBmb3JtQ3JlYXRlIGZyb20gJ0Bmb3JtLWNyZWF0ZS9lbGVtZW50LXVpJzsKaW1wb3J0IHsgaGVhZGVyTGlzdEFwaSwgZGF0YUZyb21BcGkgfSBmcm9tICdAL2FwaS9zZXR0aW5nJzsKaW1wb3J0IHJlcXVlc3QgZnJvbSAnQC9saWJzL3JlcXVlc3QnOwppbXBvcnQgeyBnZXRMb2dvIH0gZnJvbSAnQC9hcGkvY29tbW9uJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdzZXR0aW5nX3NldFN5c3RlbScsCiAgY29tcG9uZW50czogewogICAgZm9ybUNyZWF0ZTogZm9ybUNyZWF0ZS4kZm9ybSgpCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgcnVsZXM6IFtdLAogICAgICBvcHRpb246IHsKICAgICAgICBmb3JtOiB7CiAgICAgICAgICBsYWJlbFdpZHRoOiAnMTIwcHgnCiAgICAgICAgfSwKICAgICAgICBzdWJtaXRCdG46IHsKICAgICAgICAgIGNvbDogewogICAgICAgICAgICBzcGFuOiAzLAogICAgICAgICAgICBwdXNoOiAzCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBnbG9iYWw6IHsKICAgICAgICAgIHVwbG9hZDogewogICAgICAgICAgICBwcm9wczogewogICAgICAgICAgICAgIG9uU3VjY2VzczogZnVuY3Rpb24gb25TdWNjZXNzKHJlcywgZmlsZSkgewogICAgICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkgewogICAgICAgICAgICAgICAgICBmaWxlLnVybCA9IHJlcy5kYXRhLnNyYzsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgZnJhbWU6IHsKICAgICAgICAgICAgcHJvcHM6IHsKICAgICAgICAgICAgICBjbG9zZUJ0bjogZmFsc2UsCiAgICAgICAgICAgICAgb2tCdG46IGZhbHNlCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIHNwaW5TaG93OiBmYWxzZSwKICAgICAgRnJvbURhdGE6IG51bGwsCiAgICAgIGN1cnJlbnRUYWI6ICcnLAogICAgICBoZWFkZXJMaXN0OiBbXSwKICAgICAgaGVhZGVyQ2hpbGRyZW5MaXN0OiBbXSwKICAgICAgY2hpbGRyZW5JZDogJycsCiAgICAgIHRpdGxlOiAnJwogICAgfTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmdldEFsbERhdGEoKTsKICB9LAogIHdhdGNoOiB7CiAgICAkcm91dGU6IGZ1bmN0aW9uICRyb3V0ZSh0bywgZnJvbSkgewogICAgICB0aGlzLmhlYWRlckNoaWxkcmVuTGlzdCA9IFtdOwogICAgICB0aGlzLmdldEFsbERhdGEoKTsKICAgIH0sCiAgICBjaGlsZHJlbklkOiBmdW5jdGlvbiBjaGlsZHJlbklkKCkgewogICAgICB0aGlzLmdldEZyb20oKTsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGNoaWxkcmVuTGlzdDogZnVuY3Rpb24gY2hpbGRyZW5MaXN0KGluZGV4KSB7CiAgICAgIHZhciB0aGF0ID0gdGhpczsKICAgICAgdGhhdC5oZWFkZXJMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICBpZiAoaXRlbS52YWx1ZS50b1N0cmluZygpID09PSB0aGF0LmN1cnJlbnRUYWIpIHsKICAgICAgICAgIGlmIChpdGVtLmNoaWxkcmVuID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgdGhhdC5jaGlsZHJlbklkID0gaXRlbS5pZDsKICAgICAgICAgICAgdGhhdC5oZWFkZXJDaGlsZHJlbkxpc3QgPSBbXTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoYXQuaGVhZGVyQ2hpbGRyZW5MaXN0ID0gaXRlbS5jaGlsZHJlbjsKICAgICAgICAgICAgdGhhdC5jaGlsZHJlbklkID0gaXRlbS5jaGlsZHJlbi5sZW5ndGggPyBpdGVtLmNoaWxkcmVuW2luZGV4ID8gaW5kZXggOiAwXS5pZC50b1N0cmluZygpIDogJyc7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICAvLyDlpLTpg6h0YWIKICAgIGdldEhlYWRlcjogZnVuY3Rpb24gZ2V0SGVhZGVyKGluZGV4KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHRoaXMuc3BpblNob3cgPSB0cnVlOwogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGlmIChfdGhpcy4kcm91dGUucXVlcnkudGFiX2lkKSB7CiAgICAgICAgICBfdGhpcy5jdXJyZW50VGFiID0gX3RoaXMuJHJvdXRlLnF1ZXJ5LnRhYl9pZDsKICAgICAgICB9CiAgICAgICAgdmFyIHRhYl9pZCA9IF90aGlzLiRyb3V0ZS5wYXJhbXMudGFiX2lkID8gX3RoaXMuJHJvdXRlLnBhcmFtcy50YWJfaWQgOiBfdGhpcy4kcm91dGUucXVlcnkudGFiX2lkOwogICAgICAgIHZhciBkYXRhID0gewogICAgICAgICAgdHlwZTogX3RoaXMuJHJvdXRlLnBhcmFtcy50eXBlID8gX3RoaXMuJHJvdXRlLnBhcmFtcy50eXBlIDogMCwKICAgICAgICAgIHBpZDogdGFiX2lkID8gdGFiX2lkIDogMAogICAgICAgIH07CiAgICAgICAgaGVhZGVyTGlzdEFwaShkYXRhKS50aGVuKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUocmVzKSB7CiAgICAgICAgICAgIHZhciBjb25maWc7CiAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgIGNvbmZpZyA9IHJlcy5kYXRhLmNvbmZpZ190YWI7CiAgICAgICAgICAgICAgICAgIF90aGlzLmhlYWRlckxpc3QgPSBjb25maWc7CiAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMuY3VycmVudFRhYikge30KICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLiRyb3V0ZS5xdWVyeS50YWJfaWQpIHsKICAgICAgICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50VGFiID0gX3RoaXMuJHJvdXRlLnF1ZXJ5LnRhYl9pZDsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50VGFiID0gY29uZmlnW2luZGV4ID8gaW5kZXggOiAwXS52YWx1ZS50b1N0cmluZygpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF90aGlzLmNoaWxkcmVuTGlzdChpbmRleCA/IDEgOiAwKTsKICAgICAgICAgICAgICAgICAgcmVzb2x2ZShfdGhpcy5jdXJyZW50VGFiKTsKICAgICAgICAgICAgICAgICAgX3RoaXMuc3BpblNob3cgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgICAgIH0pKTsKICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gpIHsKICAgICAgICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgIH07CiAgICAgICAgfSgpKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBfdGhpcy5zcGluU2hvdyA9IGZhbHNlOwogICAgICAgICAgX3RoaXMuJG1lc3NhZ2UuZXJyb3IoZXJyKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgLy8g6KGo5Y2VCiAgICBnZXRGcm9tOiBmdW5jdGlvbiBnZXRGcm9tKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKICAgICAgdGhpcy5zcGluU2hvdyA9IHRydWU7CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgdmFyIGlkcyA9ICcnOwogICAgICAgIGlmIChfdGhpczIuJHJvdXRlLnBhcmFtcy50eXBlID09PSAnMycpIHsKICAgICAgICAgIGlkcyA9IF90aGlzMi4kcm91dGUucGFyYW1zLnRhYl9pZDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKF90aGlzMi5jaGlsZHJlbklkKSB7CiAgICAgICAgICAgIGlkcyA9IF90aGlzMi5jaGlsZHJlbklkOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWRzID0gX3RoaXMyLmN1cnJlbnRUYWI7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHZhciBkYXRhID0gewogICAgICAgICAgdGFiX2lkOiBOdW1iZXIoaWRzKQogICAgICAgIH07CiAgICAgICAgdmFyIGxvZ2lzdGljcyA9ICdmcmVpZ2h0L2NvbmZpZy9lZGl0X2Jhc2ljcycsCiAgICAgICAgICBhZ2VudCA9ICdhZ2VudC9jb25maWcvZWRpdF9iYXNpY3MnLAogICAgICAgICAgaW50ZWdyYWwgPSAnbWFya2V0aW5nL2ludGVncmFsX2NvbmZpZy9lZGl0X2Jhc2ljcycsCiAgICAgICAgICBzbXMgPSAnc2VydmUvc21zX2NvbmZpZy9lZGl0X2Jhc2ljcycsCiAgICAgICAgICBjb25maWcgPSAnc2V0dGluZy9jb25maWcvZWRpdF9iYXNpY3MnOwogICAgICAgIHZhciB1cmwgPSBfdGhpczIuJHJvdXRlLm5hbWUgPT09ICdzZXR0aW5nX2xvZ2lzdGljcycgPyBsb2dpc3RpY3MgOiBfdGhpczIuJHJvdXRlLm5hbWUgPT09ICdzZXR0aW5nX2Rpc3RyaWJ1dGlvblNldCcgPyBhZ2VudCA6IF90aGlzMi4kcm91dGUubmFtZSA9PT0gJ3NldHRpbmdfbWVzc2FnZScgPyBzbXMgOiBfdGhpczIuJHJvdXRlLm5hbWUgPT09ICdzZXR0aW5nX3NldFN5c3RlbScgPyBjb25maWcgOiBpbnRlZ3JhbDsKICAgICAgICBkYXRhRnJvbUFwaShkYXRhLCB1cmwpLnRoZW4oIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKHJlcykgewogICAgICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgX3RoaXMyLnNwaW5TaG93ID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5kYXRhLnN0YXR1cyA9PT0gZmFsc2UpKSB7CiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBfdGhpczIuJGF1dGhMYXBzZShyZXMuZGF0YSkpOwogICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICBfdGhpczIuRnJvbURhdGEgPSByZXMuZGF0YTsKICAgICAgICAgICAgICAgICAgLy8gcmVzLmRhdGEucnVsZXMuZm9yRWFjaCgoZSkgPT4gewogICAgICAgICAgICAgICAgICAvLyAgIGUudGl0bGUgKz0gJzonOwogICAgICAgICAgICAgICAgICAvLyAgIGlmIChlLmNvbnRyb2wpIHsKICAgICAgICAgICAgICAgICAgLy8gICB9CiAgICAgICAgICAgICAgICAgIC8vIH0pOwogICAgICAgICAgICAgICAgICBfdGhpczIuYWRkQ29sb24ocmVzLmRhdGEucnVsZXMpOwogICAgICAgICAgICAgICAgICBfdGhpczIucnVsZXMgPSByZXMuZGF0YS5ydWxlczsKICAgICAgICAgICAgICAgICAgX3RoaXMyLnRpdGxlID0gcmVzLmRhdGEudGl0bGU7CiAgICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgICAgIH0pKTsKICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gyKSB7CiAgICAgICAgICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgfTsKICAgICAgICB9KCkpLmNhdGNoKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgIF90aGlzMi5zcGluU2hvdyA9IGZhbHNlOwogICAgICAgICAgX3RoaXMyLiRtZXNzYWdlLmVycm9yKHJlcy5tc2cpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCiAgICBhZGRDb2xvbjogZnVuY3Rpb24gYWRkQ29sb24oYXJyKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIGMgPSBhcnJbaV07CiAgICAgICAgYy50aXRsZSArPSAnOic7CiAgICAgICAgaWYgKGMuY29udHJvbCkgewogICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjLmNvbnRyb2wubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgdmFyIGUgPSBjLmNvbnRyb2xbal07CiAgICAgICAgICAgIGlmIChlLnJ1bGUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgdGhpcy5hZGRDb2xvbihlLnJ1bGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgZ2V0QWxsRGF0YTogZnVuY3Rpb24gZ2V0QWxsRGF0YSgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBpZiAoIShfdGhpczMuJHJvdXRlLnF1ZXJ5LmZyb20gPT09ICdkb3dubG9hZCcpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBfdGhpczMuZ2V0SGVhZGVyKDIpOwogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxMzsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGlmICghKF90aGlzMy4kcm91dGUucGFyYW1zLnR5cGUgIT09ICczJykpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgX3RoaXMzLmNoaWxkcmVuSWQgPSAnJzsKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDk7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5nZXRIZWFkZXIoKTsKICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgX3RoaXMzLmhlYWRlckxpc3QgPSBbXTsKICAgICAgICAgICAgICBfdGhpczMuZ2V0RnJvbSgpOwogICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8g6YCJ5oupCiAgICBjaGFuZ2VUYWI6IGZ1bmN0aW9uIGNoYW5nZVRhYigpIHsKICAgICAgdGhpcy5jaGlsZHJlbkxpc3QoKTsKICAgIH0sCiAgICAvLyDmj5DkuqTooajljZUgZ3JvdXAKICAgIG9uU3VibWl0OiBmdW5jdGlvbiBvblN1Ym1pdChmb3JtRGF0YSkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKICAgICAgcmVxdWVzdCh7CiAgICAgICAgdXJsOiB0aGlzLkZyb21EYXRhLmFjdGlvbiwKICAgICAgICBtZXRob2Q6IHRoaXMuRnJvbURhdGEubWV0aG9kLAogICAgICAgIGRhdGE6IGZvcm1EYXRhCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzNC4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgIGlmIChmb3JtRGF0YS5zaXRlX25hbWUpIHsKICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdBRE1JTl9USVRMRScsIGZvcm1EYXRhLnNpdGVfbmFtZSk7CiAgICAgICAgICBfdGhpczQuJHN0b3JlLmNvbW1pdCgnc2V0QWRtaW5UaXRsZScsIGZvcm1EYXRhLnNpdGVfbmFtZSk7CiAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQudGl0bGUgPSAiIi5jb25jYXQoZm9ybURhdGEuc2l0ZV9uYW1lLCAiIC0gXHU3Q0ZCXHU3RURGXHU4QkJFXHU3RjZFIik7CiAgICAgICAgfQogICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgX3RoaXM0LiRtZXNzYWdlLmVycm9yKHJlcy5tc2cpOwogICAgICB9KTsKICAgIH0KICB9Cn07"},null]}