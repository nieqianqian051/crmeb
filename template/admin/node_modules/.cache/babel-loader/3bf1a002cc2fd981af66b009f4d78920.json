{"remainingRequest":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/thread-loader/dist/cjs.js!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/babel-loader/lib/index.js!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/recipe/list/handle/recipeDetails.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/recipe/list/handle/recipeDetails.vue","mtime":1719916451000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/babel.config.js","mtime":1679965410000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/.babelrc","mtime":1679965410000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/thread-loader/dist/cjs.js","mtime":1746465018446},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/babel-loader/lib/index.js","mtime":1746465024347},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js","mtime":1746465019530}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}