{"remainingRequest":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/kefu/appChat/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/kefu/appChat/index.vue","mtime":1719467759000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/thread-loader/dist/cjs.js","mtime":1746465018446},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/babel-loader/lib/index.js","mtime":1746465024347},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js","mtime":1746465019530}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCAnZW1vamktYXdlc29tZS9kaXN0L2Nzcy9nb29nbGUubWluLmNzcyc7CmltcG9ydCBlbW9qaUxpc3QgZnJvbSAnQC91dGlscy9lbW9qaSc7CmltcG9ydCB7IFNvY2tldCB9IGZyb20gJ0AvbGlicy9zb2NrZXQnOwppbXBvcnQgU2V0dGluZyBmcm9tICdAL3NldHRpbmcnOwppbXBvcnQgQ29va2llcyBmcm9tICdqcy1jb29raWUnOwppbXBvcnQgeyBjaGF0TGlzdEFwaSwgc2VydmljZUxpc3RBcGksIGdldEFkdkFwaSwgc2VydmljZUxpc3QsIGdldE9yZGVyQXBpLCBwcm9kdWN0QXBpIH0gZnJvbSAnQC9hcGkva2VmdSc7CmltcG9ydCBmZWVkQmFjayBmcm9tICcuL2ZlZWRiYWNrJzsKaW1wb3J0IHsgaXNQaWNVcGxvYWQgfSBmcm9tICdAL3V0aWxzJzsKCmNvbnN0IGNodW5rID0gZnVuY3Rpb24gKGFyciwgbnVtKSB7CiAgbnVtID0gbnVtICogMSB8fCAxOwogIHZhciByZXQgPSBbXTsKICBhcnIuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaSkgewogICAgaWYgKGkgJSBudW0gPT09IDApIHsKICAgICAgcmV0LnB1c2goW10pOwogICAgfQogICAgcmV0W3JldC5sZW5ndGggLSAxXS5wdXNoKGl0ZW0pOwogIH0pOwogIHJldHVybiByZXQ7Cn07CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnQ2hhdFJvb20nLAogIGF1dGg6IGZhbHNlLAogIGNvbXBvbmVudHM6IHsKICAgIGZlZWRCYWNrLAogIH0sCiAgcHJvcHM6IHsKICAgIGNoYXRPcHRpb25zOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBzaG93OiBmYWxzZSwKICAgICAgICB9OwogICAgICB9LAogICAgfSwKICB9LAogIGRpcmVjdGl2ZXM6IHsKICAgIGRyYWc6IHsKICAgICAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIChlbCkgewogICAgICAgIGxldCB4ID0gMDsKICAgICAgICBsZXQgeSA9IDA7CiAgICAgICAgbGV0IGwgPSAwOwogICAgICAgIGxldCB0ID0gMDsKICAgICAgICBsZXQgaXNEb3duID0gZmFsc2U7CiAgICAgICAgZWwub25tb3VzZWRvd24gPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgeCA9IGUuY2xpZW50WDsKICAgICAgICAgIHkgPSBlLmNsaWVudFk7CiAgICAgICAgICBsID0gZWwucGFyZW50Tm9kZS5vZmZzZXRMZWZ0OwogICAgICAgICAgdCA9IGVsLnBhcmVudE5vZGUub2Zmc2V0VG9wOwogICAgICAgICAgaXNEb3duID0gdHJ1ZTsKICAgICAgICAgIGVsLnN0eWxlLmN1cnNvciA9ICdtb3ZlJzsKICAgICAgICAgIHdpbmRvdy5vbm1vdXNlbW92ZSA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGlmIChpc0Rvd24gPT0gZmFsc2UpIHsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGV0IG54ID0gZS5jbGllbnRYOwogICAgICAgICAgICBsZXQgbnkgPSBlLmNsaWVudFk7CiAgICAgICAgICAgIGxldCBubCA9IG54IC0gKHggLSBsKTsKICAgICAgICAgICAgbGV0IG50ID0gbnkgLSAoeSAtIHQpOwogICAgICAgICAgICBlbC5wYXJlbnROb2RlLnN0eWxlLmxlZnQgPSBubCArICdweCc7CiAgICAgICAgICAgIGVsLnBhcmVudE5vZGUuc3R5bGUudG9wID0gbnQgKyAncHgnOwogICAgICAgICAgfTsKICAgICAgICAgIHdpbmRvdy5vbm1vdXNldXAgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlzRG93biA9IGZhbHNlOwogICAgICAgICAgICBlbC5zdHlsZS5jdXJzb3IgPSAnZGVmYXVsdCc7CiAgICAgICAgICAgIHdpbmRvdy5vbm1vdXNlbW92ZSA9IG51bGw7CiAgICAgICAgICAgIHdpbmRvdy5vbm1vdXNldXAgPSBudWxsOwogICAgICAgICAgfTsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9OwogICAgICB9LAogICAgfSwKICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBsb2NhdGlvbnM6IGAke2xvY2F0aW9uLm9yaWdpbn1gLAogICAgICBjaGFuZ2U6IGZhbHNlLAogICAgICBlbW9qaUdyb3VwOiBjaHVuayhlbW9qaUxpc3QsIDIwKSwgLy8g6KGo5oOF5YiX6KGoCiAgICAgIGVtb2ppTGlzdDogZW1vamlMaXN0LAogICAgICBlbW9qaVNob3c6IGZhbHNlLAogICAgICByZWNvcmRMaXN0OiBbXSwKICAgICAgbGltaXQ6IDIwLAogICAgICBsb2FkaW5nOiBmYWxzZSwKICAgICAgZmluaXNoZWQ6IGZhbHNlLAogICAgICBjaGF0Q29udDogJycsCiAgICAgIHNlcnZpY2U6IG51bGwsCiAgICAgIHNlcnZpY2VEYXRhOiB7fSwKICAgICAgdXBsb2FkQWN0aW9uOiAnJywKICAgICAgbm90aWNlOiAnJywKICAgICAgYXVkaW86IG51bGwsCiAgICAgIG11dGVkOiBmYWxzZSwKICAgICAgYXVkaW9TcmM6ICcnLAogICAgICB1cHBlcklkOiAwLAogICAgICB1cGxvYWREYXRhOiB7fSwKICAgICAgaXNfdG91cmlzdDogMSwgLy8gMOeZu+W9leeKtuaAge+8jDHmnKrnmbvlvZXnirbmgIHmuLjlrqIKICAgICAgdGV4dDogJycsCiAgICAgIGlzTG9hZDogZmFsc2UsCiAgICAgIHBhZ2U6IDEsCiAgICAgIHRvdXJpc3RfYXZhdGFyOiAnJywgLy/muLjlrqLlpLTlg48KICAgICAgdG91cmlzdF91aWQ6ICcnLCAvL+a4uOWuomlkCiAgICAgIHRvVWlkOiAnJywgLy/lrqLmnI1pZAogICAgICBrdWZ1VG9rZW46ICcnLCAvLyB0b2tlbgogICAgfTsKICB9LAogIHdhdGNoOiB7CiAgICBtdXRlZCh2YWx1ZSkgewogICAgICB0aGlzLmF1ZGlvLm11dGVkID0gdmFsdWU7CiAgICB9LAogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHJlY29yZHMoKSB7CiAgICAgIHJldHVybiB0aGlzLnJlY29yZExpc3QubWFwKChpdGVtLCBpbmRleCkgPT4gewogICAgICAgIGlmIChpbmRleCkgewogICAgICAgICAgaWYgKG5ldyBEYXRlKGl0ZW0uYWRkX3RpbWUpIC0gbmV3IERhdGUodGhpcy5yZWNvcmRMaXN0W2luZGV4IC0gMV0uYWRkX3RpbWUpID49IDMwMDAwMCkgewogICAgICAgICAgICBpdGVtLnNob3cgPSB0cnVlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaXRlbS5zaG93ID0gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGl0ZW0uc2hvdyA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gaXRlbTsKICAgICAgfSk7CiAgICB9LAogIH0sCiAgY3JlYXRlZCgpIHsKICAgIGlmIChsb2NhdGlvbi5ocmVmLmluZGV4T2YoJ2tlZnUnKSAhPSAtMSkKICAgICAgdGhpcy51cGxvYWRBY3Rpb24gPSBTZXR0aW5nLmFwaUJhc2VVUkwucmVwbGFjZSgvYWRtaW5hcGkvLCAna2VmdWFwaScpICsgJy90b3VyaXN0L3VwbG9hZCc7CiAgICBsZXQgdG9rZW4gPSBDb29raWVzLmdldCgnYXV0aC5fdG9rZW4ubG9jYWwxJyk7CiAgICB0aGlzLmt1ZnVUb2tlbiA9IHRva2VuID8gdG9rZW4uc3BsaXQoJ0JlYXJlciAnKVsxXSA6ICcnOwogIH0sCiAgbW91bnRlZCgpIHsKICAgIGxldCB0aGF0ID0gdGhpczsKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHsKICAgICAgdGhhdC5lbW9qaVNob3cgPSBmYWxzZTsKICAgIH0pOwogICAgaWYgKHRoaXMuJHdlY2hhdC5faXNNb2JpbGUoKSkgdGhpcy4kcm91dGVyLnJlcGxhY2UoJy9rZWZ1L21vYmlsZV91c2VyX2NoYXQnKTsKICAgIHRoaXMuZ2V0Tm90aWNlKCk7CiAgICBTb2NrZXQudGhlbigod3MpID0+IHsKICAgICAgaWYgKHRoaXMua3VmdVRva2VuKSB7CiAgICAgICAgd3Muc2VuZCh7CiAgICAgICAgICB0eXBlOiAnbG9naW4nLAogICAgICAgICAgZGF0YTogdGhpcy5rdWZ1VG9rZW4sCiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgdGhpcy5nZXRTZXJ2aWNlKCk7CiAgICAgIHdzLiRvbihbJ3JlcGx5JywgJ2NoYXQnXSwgKGRhdGEpID0+IHsKICAgICAgICBpZiAoZGF0YS5tc25fdHlwZSA9PSAxKSB7CiAgICAgICAgICBkYXRhLm1zbiA9IHRoaXMucmVwbGFjZV9lbShkYXRhLm1zbik7CiAgICAgICAgfQogICAgICAgIHRoaXMucmVjb3JkTGlzdC5wdXNoKGRhdGEpOwogICAgICAgIHNldFRpbWVvdXQoKHJlcykgPT4gewogICAgICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICB0aGlzLiRyZWZzLnJlY29yZC5zY3JvbGxUb3AgPSB0aGlzLiRyZWZzLnJlY29yZC5zY3JvbGxIZWlnaHQgLSB0aGlzLiRyZWZzLnJlY29yZC5jbGllbnRIZWlnaHQ7CiAgICAgICAgICB9KTsKICAgICAgICB9LCAzMDApOwogICAgICB9KTsKICAgICAgLy8g55uR5ZCs5a6i5pyN6L2s5o6lCiAgICAgIHdzLiRvbigndG9fdHJhbnNmZXInLCAoZGF0YSkgPT4gewogICAgICAgIHRoaXMudG9VaWQgPSBkYXRhLnRvVWlkOwogICAgICAgIHdzLnNlbmQoewogICAgICAgICAgZGF0YTogewogICAgICAgICAgICBpZDogdGhpcy50b1VpZCwKICAgICAgICAgIH0sCiAgICAgICAgICB0eXBlOiAndG9fY2hhdCcsCiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICB3cy4kb24oJ3NvY2tldF9lcnJvcicsICgpID0+IHsKICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfov57mjqXlpLHotKUnKTsKICAgICAgfSk7CiAgICAgIHdzLiRvbignZXJyX3RpcCcsIChkYXRhKSA9PiB7CiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihkYXRhLm1zZyk7CiAgICAgIH0pOwogICAgICB3cy4kb24oJ3N1Y2Nlc3MnLCAoZGF0YSkgPT4gewogICAgICAgIHRoaXMuaXNfdG91cmlzdCA9IDA7CiAgICAgIH0pOwogICAgfSk7CiAgICB0aGlzLnRleHQgPSB0aGlzLnJlcGxhY2VfZW0oJ1tlbS1zbWlsaW5nX2ltcF0nKTsKICB9LAogIGJlZm9yZURlc3Ryb3koKSB7CiAgICB0aGlzLnNvY2tldC5jbG9zZSgpOwogIH0sCiAgbWV0aG9kczogewogICAgb25Mb29rKGlkKSB7CiAgICAgIHdpbmRvdy5vcGVuKGAke2xvY2F0aW9uLm9yaWdpbn0vaG9tZS9nb29kc19kZXRhaWwvJHtpZH1gKTsKICAgIH0sCiAgICAvLyDlhbPpl60KICAgIGNsb3NlQ2hhbmdlKG1zZykgewogICAgICB0aGlzLmNoYW5nZSA9IG1zZzsKICAgIH0sCiAgICAvLyDnu5/kuIDlj5HpgIHlpITnkIYKICAgIHNlbmRNc2cobXNuLCB0eXBlKSB7CiAgICAgIGxldCBvYmogPSB7CiAgICAgICAgdHlwZTogJ2NoYXQnLAogICAgICAgIGRhdGE6IHsKICAgICAgICAgIG1zbiwKICAgICAgICAgIHR5cGUsCiAgICAgICAgICBpc190b3VyaXN0OiB0aGlzLmlzX3RvdXJpc3QsCiAgICAgICAgICB0b191aWQ6IHRoaXMudG9VaWQsCiAgICAgICAgICB0b3VyaXN0X3VpZDogdGhpcy50b3VyaXN0X3VpZCwKICAgICAgICAgIHRvdXJpc3RfYXZhdGFyOiB0aGlzLnRvdXJpc3RfYXZhdGFyLAogICAgICAgICAgZm9ybV90eXBlOiB0aGlzLiR3ZWNoYXQuaXNXZWl4aW4oKSA/IDEgOiAzLAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIFNvY2tldC50aGVuKCh3cykgPT4gewogICAgICAgIHdzLnNlbmQob2JqKTsKICAgICAgfSk7CiAgICB9LAogICAgLy8g6ZqP5py65a6i5pyNCiAgICBnZXRTZXJ2aWNlKCkgewogICAgICBzZXJ2aWNlTGlzdEFwaSh7IHRva2VuOiB0aGlzLmt1ZnVUb2tlbiB8fCAnJyB9KQogICAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICAgIHRoaXMuc2VydmljZURhdGEgPSByZXMuZGF0YTsKICAgICAgICAgIHRoaXMudXBwZXJJZCA9IDA7CiAgICAgICAgICB0aGlzLnRvVWlkID0gcmVzLmRhdGEudWlkOwogICAgICAgICAgdGhpcy50b3VyaXN0X3VpZCA9IHJlcy5kYXRhLnRvdXJpc3RfdWlkOwogICAgICAgICAgdGhpcy50b3VyaXN0X2F2YXRhciA9IHJlcy5kYXRhLnRvdXJpc3RfYXZhdGFyOwogICAgICAgICAgbGV0IG9iaiA9IHsKICAgICAgICAgICAgZGF0YTogewogICAgICAgICAgICAgIGlkOiByZXMuZGF0YS51aWQsCiAgICAgICAgICAgICAgdG91cmlzdF91aWQ6IHRoaXMudG91cmlzdF91aWQsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHR5cGU6ICd0b19jaGF0JywKICAgICAgICAgIH07CiAgICAgICAgICBTb2NrZXQudGhlbigod3MpID0+IHsKICAgICAgICAgICAgd3Muc2VuZChvYmopOwogICAgICAgICAgfSk7CiAgICAgICAgICBpZiAodGhpcy5rdWZ1VG9rZW4pIHsKICAgICAgICAgICAgdGhpcy5nZXRSZWNvcmRMaXN0KCk7CiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKGVycikgPT4gewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihlcnIubXNnKTsKICAgICAgICAgIHRoaXMuY2hhbmdlID0gdHJ1ZTsKICAgICAgICB9KTsKICAgIH0sCiAgICByb29tQ2xpY2soZXZlbnQpIHsKICAgICAgLy8gaWYgKAogICAgICAvLyAgICAgIWV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoImVtb2ppLXBhbmVsIikgJiYKICAgICAgLy8gICAgICFldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCJlbW9qaS1idG4iKSAmJgogICAgICAvLyAgICAgIWV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoImljb24tYmlhb3FpbmciKSAmJgogICAgICAvLyAgICAgdGhpcy5lbW9qaVNob3cKICAgICAgLy8gKSB7CiAgICAgIC8vICAgICB0aGlzLmVtb2ppU2hvdyA9IGZhbHNlOwogICAgICAvLyB9CiAgICB9LAogICAgLy8gZW50ZXIg5Y+R6YCBCiAgICBjdHJsRW50ZXIoZSkgewogICAgICBpZiAoZS5rZXlDb2RlID09IDEzKSB7CiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICB9CiAgICAgIGlmICh0aGlzLmNoYXRDb250LnRyaW0oKSkgewogICAgICAgIHRoaXMuc2VuZE1lc3NhZ2UoKTsKICAgICAgfQogICAgfSwKICAgIC8vIOWFs+mXreiBiuWkqeeql+WPowogICAgY2xvc2UoKSB7CiAgICAgIHRoaXMuJGVtaXQoJ2NoYXQtY2xvc2UnKTsKICAgIH0sCiAgICAvLyDpgInmi6nooajmg4UKICAgIHNlbGVjdEVtb2ppKGRhdGEpIHsKICAgICAgbGV0IHZhbCA9IGBbJHtkYXRhfV1gOwogICAgICB0aGlzLmNoYXRDb250ICs9IHZhbDsKICAgICAgdGhpcy5lbW9qaVNob3cgPSBmYWxzZTsKICAgIH0sCiAgICAvLyDogYrlpKnooajmg4XovazmjaIKICAgIHJlcGxhY2VfZW0oc3RyKSB7CiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9cW2VtLShbXHNcU10qKVxdL2csICI8c3BhbiBjbGFzcz0nZW0gZW0tJDEnLz48L3NwYW4+Iik7CiAgICAgIHJldHVybiBzdHI7CiAgICB9LAogICAgb25TY3JvbGwoZXZlbnQpIHsKICAgICAgaWYgKGV2ZW50LnRhcmdldC5zY3JvbGxUb3AgPD0gMzApIHsKICAgICAgICBpZiAodGhpcy5rdWZ1VG9rZW4pIHsKICAgICAgICAgIHRoaXMuZ2V0UmVjb3JkTGlzdCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIC8vIOiBiuWkqeiusOW9lQogICAgZ2V0UmVjb3JkTGlzdCgpIHsKICAgICAgaWYgKHRoaXMubG9hZGluZykgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZiAodGhpcy5maW5pc2hlZCkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlOwogICAgICBjaGF0TGlzdEFwaSh7CiAgICAgICAgdWlkOiB0aGlzLnNlcnZpY2VEYXRhLnVpZCwKICAgICAgICBsaW1pdDogdGhpcy5saW1pdCwKICAgICAgICB1cHBlcklkOiB0aGlzLnVwcGVySWQsCiAgICAgICAgdG9rZW46IHRoaXMua3VmdVRva2VuLAogICAgICB9KQogICAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICAgIGlmIChyZXMuZGF0YS5sZW5ndGggPT09IDApIHJldHVybiAodGhpcy5sb2FkaW5nID0gZmFsc2UpOwogICAgICAgICAgcmVzLmRhdGEuZm9yRWFjaCgoZWwpID0+IHsKICAgICAgICAgICAgaWYgKGVsLm1zbl90eXBlID09IDEpIHsKICAgICAgICAgICAgICBlbC5tc24gPSB0aGlzLnJlcGxhY2VfZW0oZWwubXNuKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICBsZXQgc2VsZWN0b3IgPSAnJzsKICAgICAgICAgIGlmICh0aGlzLnVwcGVySWQgPT0gMCkgewogICAgICAgICAgICBzZWxlY3RvciA9IGBjaGF0XyR7cmVzLmRhdGFbcmVzLmRhdGEubGVuZ3RoIC0gMV0uaWR9YDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHNlbGVjdG9yID0gYGNoYXRfJHt0aGlzLnJlY29yZExpc3RbMF0uaWR9YDsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMucmVjb3JkTGlzdCA9IFsuLi5yZXMuZGF0YSwgLi4udGhpcy5yZWNvcmRMaXN0XTsKICAgICAgICAgIHRoaXMudXBwZXJJZCA9IHJlcy5kYXRhLmxlbmd0aCA+IDAgPyByZXMuZGF0YVswXS5pZCA6IDA7CiAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgIHRoaXMuZmluaXNoZWQgPSByZXMuZGF0YS5sZW5ndGggPCB0aGlzLmxpbWl0OwogICAgICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICB0aGlzLnNldFBhZ2VTY3JvbGxUbyhzZWxlY3Rvcik7CiAgICAgICAgICB9KTsKICAgICAgICB9KQogICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKGVyci5tc2cpOwogICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7CiAgICAgICAgfSk7CiAgICB9LAogICAgLy8g6K6+572u6aG16Z2i5rua5Yqo5L2N572uCiAgICBzZXRQYWdlU2Nyb2xsVG8oc2VsZWN0b3IpIHsKICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgIGlmIChzZWxlY3RvcikgewogICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgIGxldCBudW0gPSBwYXJzZUZsb2F0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlbGVjdG9yKS5vZmZzZXRUb3ApIC0gNjA7CiAgICAgICAgICAgIHRoaXMuJHJlZnMucmVjb3JkLnNjcm9sbFRvcCA9IG51bTsKICAgICAgICAgIH0sIDApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NoYXRfc2Nyb2xsJyk7CiAgICAgICAgICB0aGlzLiRyZWZzLnJlY29yZC5zY3JvbGxUb3AgPSBjb250YWluZXIub2Zmc2V0SGVpZ2h0OwogICAgICAgICAgc2V0VGltZW91dCgocmVzKSA9PiB7CiAgICAgICAgICAgIGlmICh0aGlzLiRyZWZzLnJlY29yZC5zY3JvbGxUb3AgIT0gdGhpcy4kcmVmcy5zY3JvbGxCb3gub2Zmc2V0SGVpZ2h0KSB7CiAgICAgICAgICAgICAgdGhpcy4kcmVmcy5yZWNvcmQuc2Nyb2xsVG9wID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NoYXRfc2Nyb2xsJykub2Zmc2V0SGVpZ2h0OwogICAgICAgICAgICB9CiAgICAgICAgICB9LCAzMDApOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgLy8g6KGo5oOF5YyF5pi+56S66ZqQ6JePCiAgICBlbW9qaVN3aXRjaCgpIHsKICAgICAgdGhpcy5lbW9qaVNob3cgPSAhdGhpcy5lbW9qaVNob3c7CiAgICB9LAogICAgLy8g5Y+R6YCB5raI5oGvCiAgICBzZW5kTWVzc2FnZSgpIHsKICAgICAgdGhpcy5zZW5kTXNnKHRoaXMuY2hhdENvbnQsIDEpOwogICAgICB0aGlzLmNoYXRDb250ID0gJyc7CiAgICB9LAogICAgY2hhdChkYXRhKSB7CiAgICAgIGlmIChkYXRhLnVpZCAhPSB0aGlzLiRhdXRoLnVzZXIudWlkICYmIHRoaXMuYXVkaW8pIHsKICAgICAgICB0aGlzLmF1ZGlvLnBsYXkoKTsKICAgICAgfQogICAgICB0aGlzLnJlY29yZExpc3QucHVzaChkYXRhKTsKICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgIHRoaXMuJHJlZnMucmVjb3JkLnNjcm9sbFRvcCA9IHRoaXMuJHJlZnMucmVjb3JkLnNjcm9sbEhlaWdodCAtIHRoaXMuJHJlZnMucmVjb3JkLmNsaWVudEhlaWdodDsKICAgICAgfSk7CiAgICB9LAogICAgc2VuZEdvb2RzKCkgewogICAgICBpZiAodGhpcy5jaGF0T3B0aW9ucy5nb29kc0lkKSB7CiAgICAgICAgU29ja2V0LnRoZW4oKHdzKSA9PiB7CiAgICAgICAgICB3cy5zZW5kKHsKICAgICAgICAgICAgZGF0YTogewogICAgICAgICAgICAgIG1zbjogdGhpcy5jaGF0T3B0aW9ucy5nb29kc0lkLAogICAgICAgICAgICAgIHR5cGU6IDUsCiAgICAgICAgICAgICAgdG9fdWlkOiB0aGlzLnRvVWlkLAogICAgICAgICAgICB9LAogICAgICAgICAgICB0eXBlOiAndG9fY2hhdCcsCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIHNlbmRPcmRlcigpIHsKICAgICAgaWYgKHRoaXMuY2hhdE9wdGlvbnMub3JkZXJJZCkgewogICAgICAgIFNvY2tldC50aGVuKCh3cykgPT4gewogICAgICAgICAgd3Muc2VuZCh7CiAgICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgICBtc246IHRoaXMuY2hhdE9wdGlvbnMub3JkZXJJZCwKICAgICAgICAgICAgICB0eXBlOiA2LAogICAgICAgICAgICAgIHRvX3VpZDogdGhpcy50b1VpZCwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdHlwZTogJ3RvX2NoYXQnLAogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBjaGF0RW5kKCkgewogICAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdNU0lFJykgPiAwKSB7CiAgICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignTVNJRSA2LjAnKSA+IDApIHsKICAgICAgICAgIHdpbmRvdy5vcGVuZXIgPSBudWxsOwogICAgICAgICAgd2luZG93LmNsb3NlKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHdpbmRvdy5vcGVuKCcnLCAnX3RvcCcpOwogICAgICAgICAgd2luZG93LnRvcC5jbG9zZSgpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA+IDApIHsKICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICdhYm91dDpibGFuayAnOwogICAgICB9IGVsc2UgewogICAgICAgIHdpbmRvdy5vcGVuZXIgPSBudWxsOwogICAgICAgIHdpbmRvdy5vcGVuKCcnLCAnX3NlbGYnLCAnJyk7CiAgICAgICAgd2luZG93LmNsb3NlKCk7CiAgICAgIH0KICAgIH0sCiAgICAvLyDlub/lkYoKICAgIGdldE5vdGljZSgpIHsKICAgICAgZ2V0QWR2QXBpKCkudGhlbigocmVzKSA9PiB7CiAgICAgICAgdGhpcy5ub3RpY2UgPSByZXMuZGF0YS5jb250ZW50OwogICAgICB9KTsKICAgIH0sCiAgICBiZWZvcmVVcGxvYWQoZmlsZSkgewogICAgICBpZiAoaXNQaWNVcGxvYWQoZmlsZSkpIHsKICAgICAgICB0aGlzLnVwbG9hZERhdGEgPSB7CiAgICAgICAgICBmaWxlbmFtZTogZmlsZSwKICAgICAgICAgIHRva2VuOiB0aGlzLmt1ZnVUb2tlbiwKICAgICAgICB9OwogICAgICAgIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICAgIHJldHVybiBwcm9taXNlOwogICAgICB9CiAgICB9LAogICAgaGFuZGxlRm9ybWF0RXJyb3IoZmlsZSkgewogICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfkuIrkvKDlm77niYflj6rog73mmK8ganBn44CBanBn44CBanBlZ+OAgWdpZiDmoLzlvI8hJyk7CiAgICB9LAogICAgdXBsb2FkU3VjY2VzcyhyZXMpIHsKICAgICAgdGhpcy5zZW5kTXNnKHJlcy5kYXRhLnVybCwgMyk7CiAgICB9LAogICAgdXBsb2FkRXJyb3IoZXJyb3IpIHsKICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihlcnJvcik7CiAgICB9LAogIH0sCn07Cg=="},null]}