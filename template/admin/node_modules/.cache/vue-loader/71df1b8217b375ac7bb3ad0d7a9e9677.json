{"remainingRequest":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/order/orderList/components/tableList.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/order/orderList/components/tableList.vue","mtime":1719467759000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/thread-loader/dist/cjs.js","mtime":1746465018446},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/babel-loader/lib/index.js","mtime":1746465024347},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js","mtime":1746465019530}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBleHBhbmRSb3cgZnJvbSAnLi90YWJsZUV4cGFuZC52dWUnOwppbXBvcnQgcHJpbnRKUyBmcm9tICdwcmludC1qcyc7CmltcG9ydCB7CiAgb3JkZXJMaXN0LAogIGdldE9yZGVEYXRhcywKICBnZXREYXRhSW5mbywKICBnZXRSZWZ1bmRGcm9tLAogIGdldG5vUmVmdW5kLAogIHJlZnVuZEludGVncmFsLAogIGdldERpc3RyaWJ1dGlvbiwKICB3cml0ZVVwZGF0ZSwKICBzaGlwbWVudENhbmNlbE9yZGVyLAogIHB1dFdyaXRlLAogIGltcG9ydEV4cHJlc3MsCn0gZnJvbSAnQC9hcGkvb3JkZXInOwppbXBvcnQgeyBtYXBTdGF0ZSwgbWFwTXV0YXRpb25zIH0gZnJvbSAndnVleCc7CmltcG9ydCBlZGl0RnJvbSBmcm9tICcuLi8uLi8uLi8uLi9jb21wb25lbnRzL2Zyb20vZnJvbSc7CmltcG9ydCBkZXRhaWxzRnJvbSBmcm9tICcuLi9oYW5kbGUvb3JkZXJEZXRhaWxzJzsKaW1wb3J0IG9yZGVyUmVtYXJrIGZyb20gJy4uL2hhbmRsZS9vcmRlclJlbWFyayc7CmltcG9ydCBvcmRlclNlbmQgZnJvbSAnLi4vaGFuZGxlL29yZGVyU2VuZCc7CmltcG9ydCBvcmRlclJlZnVuZCBmcm9tICcuLi9oYW5kbGUvb3JkZXJSZWZ1bmQnOwppbXBvcnQgb3JkZXJTaGlwbWVudCBmcm9tICcuLi9oYW5kbGUvb3JkZXJTaGlwbWVudCc7CmltcG9ydCB7IGV4cG9ydE9yZGVyTGlzdCwgZXhwb3J0T3JkZXJEZWxpdmVyeUxpc3QgfSBmcm9tICdAYXBpL2V4cG9ydCc7CmltcG9ydCBTZXR0aW5nIGZyb20gJ0Avc2V0dGluZyc7CmltcG9ydCB7IGdldENvb2tpZXMgfSBmcm9tICdAL2xpYnMvdXRpbCc7CmltcG9ydCB7IHNlcnZlT3BuT3RoZXJBcGkgfSBmcm9tICdAYXBpL3NldHRpbmcnOwppbXBvcnQgY3JlYXRlV29ya0Jvb2sgZnJvbSAnQC92ZW5kb3IvbmV3VG9FeGNlbC5qcyc7CmltcG9ydCB7IGlzRmlsZVVwbG9hZCB9IGZyb20gJ0AvdXRpbHMnOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICd0YWJsZV9saXN0JywKICBjb21wb25lbnRzOiB7CiAgICBleHBhbmRSb3csCiAgICBlZGl0RnJvbSwKICAgIGRldGFpbHNGcm9tLAogICAgb3JkZXJSZW1hcmssCiAgICBvcmRlclNlbmQsCiAgICBvcmRlclNoaXBtZW50LAogICAgb3JkZXJSZWZ1bmQsCiAgfSwKICBkYXRhKCkgewogICAgY29uc3QgY29kZU51bSA9IChydWxlLCB2YWx1ZSwgY2FsbGJhY2spID0+IHsKICAgICAgaWYgKCF2YWx1ZSkgewogICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ+ivt+Whq+WGmeaguOmUgOeggScpKTsKICAgICAgfQogICAgICAvLyDmqKHmi5/lvILmraXpqozor4HmlYjmnpwKICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSkgewogICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcign6K+35aGr5YaZMTLkvY3mlbDlrZcnKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3QgcmVnID0gL1xiXGR7MTJ9XGIvOwogICAgICAgIGlmICghcmVnLnRlc3QodmFsdWUpKSB7CiAgICAgICAgICBjYWxsYmFjayhuZXcgRXJyb3IoJ+ivt+Whq+WGmTEy5L2N5pWw5a2XJykpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgIH0KICAgICAgfQogICAgfTsKICAgIHJldHVybiB7CiAgICAgIGJhdGNoU2hpcG1lbnRNb2RhbDogZmFsc2UsCiAgICAgIGV4cHJlc3NVcmw6IFNldHRpbmcuYXBpQmFzZVVSTCArICcvZmlsZS91cGxvYWQvMScsCiAgICAgIGhlYWRlcjoge30sCiAgICAgIGRlbGZyb21EYXRhOiB7fSwKICAgICAgbW9kYWw6IGZhbHNlLAogICAgICBvcmRlckxpc3Q6IFtdLAogICAgICBvcmRlckNhcmRzOiBbXSwKICAgICAgbG9hZGluZzogZmFsc2UsCiAgICAgIG9yZGVySWQ6IDAsCiAgICAgIHRvdGFsX251bTogMCwKICAgICAgdmlydHVhbF90eXBlOiAwLAogICAgICBzdGF0dXM6IDAsCiAgICAgIHBheV90eXBlOiAnJywKCiAgICAgIHRvdGFsOiAwLCAvLyDmgLvmnaHmlbAKICAgICAgcGFnZTogewogICAgICAgIHBhZ2U6IDEsIC8vIOW9k+WJjemhtQogICAgICAgIGxpbWl0OiAxNSwgLy8g5q+P6aG15pi+56S65p2h5pWwCiAgICAgIH0sCiAgICAgIGRhdGE6IFtdLAogICAgICBGcm9tRGF0YTogbnVsbCwKICAgICAgb3JkZXJEYXRhbGlzdDogbnVsbCwKICAgICAgLy8gbW9kYWxUaXRsZVNzOiAnJywKICAgICAgc2VsZWN0ZWRJZHM6IFtdLCAvL+mAieS4reWQiOW5tumhueeahGlkCiAgICAgIGN1cnJlbnRUYWI6ICdudWxsJywKICAgICAgc3BpblNob3c6IGZhbHNlLAogICAgICB0YWJsaXN0czogewogICAgICAgIGFsbDogJzAnLAogICAgICAgIGdlbmVyYWw6ICcwJywKICAgICAgICBwaW5rOiAnMCcsCiAgICAgICAgc2Vja2lsbDogJzAnLAogICAgICAgIGJhcmdhaW46ICcwJywKICAgICAgICBhZHZhbmNlOiAnMCcsCiAgICAgIH0sCiAgICAgIHdyaXRlT2ZmUnVsZXM6IHsKICAgICAgICBjb2RlOiBbeyB2YWxpZGF0b3I6IGNvZGVOdW0sIHRyaWdnZXI6ICdibHVyJywgcmVxdWlyZWQ6IHRydWUgfV0sCiAgICAgIH0sCiAgICAgIHdyaXRlT2ZmRnJvbTogewogICAgICAgIGNvZGU6ICcnLAogICAgICAgIGNvbmZpcm06IDAsCiAgICAgIH0sCiAgICAgIG1vZGFsczI6IGZhbHNlLAogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICAuLi5tYXBTdGF0ZSgnb3JkZXInLCBbCiAgICAgICdvcmRlclBheVR5cGUnLAogICAgICAnb3JkZXJTdGF0dXMnLAogICAgICAnb3JkZXJUaW1lJywKICAgICAgJ3JlYWxfbmFtZScsCiAgICAgICdmaWVsZEtleScsCiAgICAgICdvcmRlclR5cGUnLAogICAgICAnZGVsSWRMaXN0JywKICAgICAgJ2lzRGVscycsCiAgICAgICdvcmRlckNoYXJ0VHlwZScKICAgIF0pLAogIH0sCiAgbW91bnRlZCgpIHt9LAogIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmdldFRhYnMoKTsKICAgIHRoaXMub25DaGFuZ2VUYWJzKCcnKTsKICAgIHRoaXMuZ2V0TGlzdCgpOwogICAgdGhpcy5nZXRUb2tlbigpOwogIH0sCiAgd2F0Y2g6IHsKICAgIG9yZGVyVHlwZTogZnVuY3Rpb24gKCkgewogICAgICB0aGlzLnBhZ2UucGFnZSA9IDE7CiAgICAgIHRoaXMuZ2V0TGlzdCgpOwogICAgfSwKICB9LAogIG1ldGhvZHM6IHsKICAgIC4uLm1hcE11dGF0aW9ucygnb3JkZXInLCBbJ2dldE9yZGVyU3RhdHVzJywgJ29uQ2hhbmdlVGFicycsICdnZXRJc0RlbCcsICdnZXRpc0RlbElkTGlzdGwnXSksCiAgICBiYXRjaFNoaXBtZW50KCkge30sCiAgICBiZWZvcmVVcGxvYWQoZmlsZSkgewogICAgICByZXR1cm4gaXNQaWNVcGxvYWQoZmlsZSk7CiAgICB9LAogICAgLy8g5pON5L2cCiAgICBjaGFuZ2VNZW51KHJvdywgbmFtZSkgewogICAgICB0aGlzLm9yZGVySWQgPSByb3cuaWQ7CiAgICAgIHN3aXRjaCAobmFtZSkgewogICAgICAgIGNhc2UgJzEnOgogICAgICAgICAgdGhpcy5kZWxmcm9tRGF0YSA9IHsKICAgICAgICAgICAgdGl0bGU6ICfkv67mlLnnq4vljbPmlK/ku5gnLAogICAgICAgICAgICB1cmw6IGAvb3JkZXIvcGF5X29mZmxpbmUvJHtyb3cuaWR9YCwKICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsCiAgICAgICAgICAgIGlkczogJycsCiAgICAgICAgICB9OwogICAgICAgICAgdGhpcy4kbW9kYWxTdXJlKHRoaXMuZGVsZnJvbURhdGEpCiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICAgICAgICB0aGlzLiRtZXNzYWdlLnN1Y2Nlc3MocmVzLm1zZyk7CiAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlR2V0VGFicycpOwogICAgICAgICAgICAgIHRoaXMuZ2V0TGlzdCgpOwogICAgICAgICAgICB9KQogICAgICAgICAgICAuY2F0Y2goKHJlcykgPT4gewogICAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgLy8gdGhpcy5tb2RhbFRpdGxlU3MgPSAn5L+u5pS556uL5Y2z5pSv5LuYJzsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJzInOgogICAgICAgICAgdGhpcy5nZXREYXRhKHJvdy5pZCk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICc0JzoKICAgICAgICAgIHRoaXMuJHJlZnMucmVtYXJrcy5tb2RhbHMgPSB0cnVlOwogICAgICAgICAgdGhpcy4kcmVmcy5yZW1hcmtzLmZvcm1WYWxpZGF0ZS5yZW1hcmsgPSByb3cucmVtYXJrOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAnNSc6CiAgICAgICAgICAvLyB0aGlzLmdldFJlZnVuZERhdGEocm93LmlkKTsKICAgICAgICAgIHRoaXMuJHJlZnMucmVmdW5kLnRvdGFsX251bSA9IHJvdy50b3RhbF9udW07CiAgICAgICAgICB0aGlzLiRyZWZzLnJlZnVuZC5vcmRlcl9pZCA9IHJvdy5vcmRlcl9pZDsKICAgICAgICAgIHRoaXMuJHJlZnMucmVmdW5kLmZvcm1JdGVtLnJlZnVuZF9wcmljZSA9IHJvdy5wYXlfcHJpY2U7CiAgICAgICAgICB0aGlzLnZpcnR1YWxfdHlwZSA9IHJvdy52aXJ0dWFsX3R5cGU7CiAgICAgICAgICB0aGlzLiRyZWZzLnJlZnVuZC5tb2RhbHMgPSB0cnVlOwogICAgICAgICAgdGhpcy5vcmRlcklkID0gcm93LmlkOwogICAgICAgICAgdGhpcy5zdGF0dXMgPSByb3cuX3N0YXR1czsKICAgICAgICAgIHRoaXMucGF5X3R5cGUgPSByb3cucGF5X3R5cGU7CiAgICAgICAgICBicmVhazsKICAgICAgICAvLyBjYXNlICc2JzoKICAgICAgICAvLyAgIHRoaXMuZ2V0UmVmdW5kSW50ZWdyYWwocm93LmlkKTsKICAgICAgICAvLyAgIGJyZWFrOwogICAgICAgIC8vIGNhc2UgJzcnOgogICAgICAgIC8vICAgdGhpcy5nZXROb1JlZnVuZERhdGEocm93LmlkKTsKICAgICAgICAvLyAgIGJyZWFrOwogICAgICAgIGNhc2UgJzgnOgogICAgICAgICAgdGhpcy5kZWxmcm9tRGF0YSA9IHsKICAgICAgICAgICAgdGl0bGU6ICfkv67mlLnnoa7orqTmlLbotKcnLAogICAgICAgICAgICB1cmw6IGAvb3JkZXIvdGFrZS8ke3Jvdy5pZH1gLAogICAgICAgICAgICBtZXRob2Q6ICdwdXQnLAogICAgICAgICAgICBpZHM6ICcnLAogICAgICAgICAgfTsKICAgICAgICAgIHRoaXMuJG1vZGFsU3VyZSh0aGlzLmRlbGZyb21EYXRhKQogICAgICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgICAgICAgIHRoaXMuZ2V0TGlzdCgpOwogICAgICAgICAgICB9KQogICAgICAgICAgICAuY2F0Y2goKHJlcykgPT4gewogICAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgLy8gdGhpcy5tb2RhbFRpdGxlU3MgPSAn5L+u5pS556Gu6K6k5pS26LSnJzsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJzEwJzoKICAgICAgICAgIHRoaXMuZGVsZnJvbURhdGEgPSB7CiAgICAgICAgICAgIHRpdGxlOiAn56uL5Y2z5omT5Y2w6K6i5Y2VJywKICAgICAgICAgICAgaW5mbzogJ+aCqOehruiupOaJk+WNsOatpOiuouWNleWQlz8nLAogICAgICAgICAgICB1cmw6IGAvb3JkZXIvcHJpbnQvJHtyb3cuaWR9YCwKICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgICAgICAgaWRzOiAnJywKICAgICAgICAgIH07CiAgICAgICAgICB0aGlzLiRtb2RhbFN1cmUodGhpcy5kZWxmcm9tRGF0YSkKICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uuc3VjY2VzcyhyZXMubXNnKTsKICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VHZXRUYWJzJyk7CiAgICAgICAgICAgICAgdGhpcy5nZXRMaXN0KCk7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC5jYXRjaCgocmVzKSA9PiB7CiAgICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICcxMSc6CiAgICAgICAgICB0aGlzLmRlbGZyb21EYXRhID0gewogICAgICAgICAgICB0aXRsZTogJ+eri+WNs+aJk+WNsOeUteWtkOmdouWNlScsCiAgICAgICAgICAgIGluZm86ICfmgqjnoa7orqTmiZPljbDmraTnlLXlrZDpnaLljZXlkJc/JywKICAgICAgICAgICAgdXJsOiBgL29yZGVyL29yZGVyX2R1bXAvJHtyb3cuaWR9YCwKICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgICAgICAgaWRzOiAnJywKICAgICAgICAgIH07CiAgICAgICAgICB0aGlzLiRtb2RhbFN1cmUodGhpcy5kZWxmcm9tRGF0YSkKICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uuc3VjY2VzcyhyZXMubXNnKTsKICAgICAgICAgICAgICB0aGlzLmdldExpc3QoKTsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgLmNhdGNoKChyZXMpID0+IHsKICAgICAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKHJlcy5tc2cpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJzEyJzoKICAgICAgICAgIHRoaXMucHJpbnRJbWcocm93Lmt1YWlkaV9sYWJlbCk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICcxMyc6CiAgICAgICAgICBsZXQgcGF0aEluZm8gPSB0aGlzLiRyb3V0ZXIucmVzb2x2ZSh7CiAgICAgICAgICAgIHBhdGg6IFNldHRpbmcucm91dGVQcmUgKyAnL29yZGVyL3ByaW50JywKICAgICAgICAgICAgcXVlcnk6IHsKICAgICAgICAgICAgICBpZDogcm93Lm9yZGVyX2lkLAogICAgICAgICAgICB9LAogICAgICAgICAgfSk7CiAgICAgICAgICB3aW5kb3cub3BlbihwYXRoSW5mby5ocmVmLCAnX2JsYW5rJyk7CiAgICAgICAgICBicmVhazsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdGhpcy5kZWxmcm9tRGF0YSA9IHsKICAgICAgICAgICAgdGl0bGU6ICfliKDpmaTorqLljZUnLAogICAgICAgICAgICB1cmw6IGAvb3JkZXIvZGVsLyR7cm93LmlkfWAsCiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsCiAgICAgICAgICAgIGlkczogJycsCiAgICAgICAgICB9OwogICAgICAgICAgLy8gdGhpcy5tb2RhbFRpdGxlU3MgPSAn5Yig6Zmk6K6i5Y2VJzsKICAgICAgICAgIHRoaXMuZGVsT3JkZXIocm93LCB0aGlzLmRlbGZyb21EYXRhKTsKICAgICAgfQogICAgfSwKICAgIHNoaXBtZW50Q2xlYXIocm93KSB7CiAgICAgIHRoaXMub3JkZXJJZCA9IHJvdy5pZDsKICAgICAgdGhpcy4kcmVmcy5zaGlwbWVudC5tb2RhbHMgPSB0cnVlOwogICAgfSwKICAgIHByaW50SW1nKHVybCkgewogICAgICBwcmludEpTKHsKICAgICAgICBwcmludGFibGU6IHVybCwKICAgICAgICB0eXBlOiAnaW1hZ2UnLAogICAgICAgIGRvY3VtZW50VGl0bGU6ICflv6vpgJLkv6Hmga8nLAogICAgICAgIHN0eWxlOiBgaW1newogICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICBoZWlnaHQ6IDQ3NnB4OwogICAgICAgIH1gLAogICAgICB9KTsKICAgIH0sCiAgICAvLyDnq4vljbPmlK/ku5ggL+ehruiupOaUtui0py8v5Yig6Zmk5Y2V5p2h6K6i5Y2VCiAgICBzdWJtaXRNb2RlbCgpIHsKICAgICAgdGhpcy5nZXRMaXN0KCk7CiAgICB9LAogICAgLy8g6K6i5Y2V5YiX6KGoCiAgICBnZXRMaXN0KHJlcykgewogICAgICB0aGlzLnBhZ2UucGFnZSA9IHJlcyA9PT0gMSA/IDEgOiB0aGlzLnBhZ2UucGFnZTsKICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTsKICAgICAgb3JkZXJMaXN0KHsKICAgICAgICBwYWdlOiB0aGlzLnBhZ2UucGFnZSwKICAgICAgICBsaW1pdDogdGhpcy5wYWdlLmxpbWl0LAogICAgICAgIHN0YXR1czogdGhpcy5vcmRlclN0YXR1cywKICAgICAgICBwYXlfdHlwZTogdGhpcy5vcmRlclBheVR5cGUsCiAgICAgICAgZGF0YTogdGhpcy5vcmRlclRpbWUsCiAgICAgICAgcmVhbF9uYW1lOiB0aGlzLnJlYWxfbmFtZSwKICAgICAgICBmaWVsZF9rZXk6IHRoaXMuZmllbGRLZXksCiAgICAgICAgdHlwZTogdGhpcy5vcmRlclR5cGUgPT09IDAgPyAnJyA6IHRoaXMub3JkZXJUeXBlLAogICAgICB9KQogICAgICAgIC50aGVuKGFzeW5jIChyZXMpID0+IHsKICAgICAgICAgIGxldCBkYXRhID0gcmVzLmRhdGE7CiAgICAgICAgICB0aGlzLm9yZGVyTGlzdCA9IGRhdGEuZGF0YTsKICAgICAgICAgIHRoaXMub3JkZXJDYXJkcyA9IGRhdGEuc3RhdDsKICAgICAgICAgIHRoaXMudG90YWwgPSBkYXRhLmNvdW50OwogICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgICAgICAvL+ehruS/nWRvbeWKoOi9veWujOavlQogICAgICAgICAgICB0aGlzLnNldENoZWNrZWQoKTsKICAgICAgICAgIH0pOwogICAgICAgICAgdGhpcy4kZW1pdCgnb24tY2hhbmdlQ2FyZHMnLCBkYXRhLnN0YXQpOwogICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKHJlcykgPT4gewogICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKHJlcy5tc2cpOwogICAgICAgIH0pOwogICAgfSwKICAgIGhhbmRsZVNlbGVjdFJvdyhzZWxlY3Rpb24pIHsKICAgICAgbGV0IGlkcyA9IFtdOwogICAgICBzZWxlY3Rpb24ubWFwKChlKSA9PiB7CiAgICAgICAgaWRzLnB1c2goZS5pZCk7CiAgICAgIH0pOwogICAgICB0aGlzLnNlbGVjdGVkSWRzID0gaWRzOwogICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7CiAgICAgICAgLy/noa7kv51kb23liqDovb3lrozmr5UKICAgICAgICB0aGlzLnNldENoZWNrZWQoKTsKICAgICAgfSk7CiAgICB9LAogICAgc2V0Q2hlY2tlZCgpIHsKICAgICAgLy/lsIZuZXcgU2V0KCnovazljJbkuLrmlbDnu4QKICAgICAgbGV0IGlkcyA9IFsuLi50aGlzLnNlbGVjdGVkSWRzXTsKICAgICAgdGhpcy5nZXRpc0RlbElkTGlzdGwoaWRzKTsKICAgICAgLy8g5om+5Yiw57uR5a6a55qEdGFibGXnmoRyZWblr7nlupTnmoRkb23vvIzmib7liLB0YWJsZeeahG9iakRhdGHlr7nosaHvvIxvYmpEYXRh5L+d5a2Y55qE5piv5b2T5YmN6aG155qE5pWw5o2uCiAgICAgIGxldCBvYmpEYXRhID0gdGhpcy4kcmVmcy50YWJsZS5vYmpEYXRhOwogICAgICBmb3IgKGxldCBpbmRleCBpbiBvYmpEYXRhKSB7CiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRJZHMuaGFzKG9iakRhdGFbaW5kZXhdLmlkKSkgewogICAgICAgICAgb2JqRGF0YVtpbmRleF0uX2lzQ2hlY2tlZCA9IHRydWU7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgaXNEZWwoc2VsZWN0aW9uKSB7CiAgICAgIGlmIChzZWxlY3Rpb24uZmluZEluZGV4KCh0YXJnZXQpID0+IHRhcmdldC5pc19kZWwgPT09IDApID09IC0xKSB7CiAgICAgICAgdGhpcy5nZXRJc0RlbCgxKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmdldElzRGVsKDApOwogICAgICB9CiAgICB9LAogICAgLy8g57yW6L6RCiAgICBlZGl0KHJvdykgewogICAgICB0aGlzLmdldE9yZGVyRGF0YShyb3cuaWQpOwogICAgfSwKICAgIC8vIOWIoOmZpOWNleadoeiuouWNlQogICAgZGVsT3JkZXIocm93LCBkYXRhKSB7CiAgICAgIGlmIChyb3cuaXNfZGVsID09PSAxKSB7CiAgICAgICAgdGhpcy4kbW9kYWxTdXJlKGRhdGEpCiAgICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uuc3VjY2VzcyhyZXMubXNnKTsKICAgICAgICAgICAgdGhpcy5nZXRMaXN0KCk7CiAgICAgICAgICB9KQogICAgICAgICAgLmNhdGNoKChyZXMpID0+IHsKICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+aCqOmAieaLqeeahOeahOiuouWNleWtmOWcqOeUqOaIt+acquWIoOmZpOeahOiuouWNle+8jOaXoOazleWIoOmZpOeUqOaIt+acquWIoOmZpOeahOiuouWNle+8gScpOwogICAgICB9CiAgICB9LAogICAgLy8g6I635Y+W57yW6L6R6KGo5Y2V5pWw5o2uCiAgICBnZXRPcmRlckRhdGEoaWQpIHsKICAgICAgZ2V0T3JkZURhdGFzKGlkKQogICAgICAgIC50aGVuKGFzeW5jIChyZXMpID0+IHsKICAgICAgICAgIHRoaXMuRnJvbURhdGEgPSByZXMuZGF0YTsKICAgICAgICAgIHRoaXMuJHJlZnMuZWRpdHMubW9kYWxzID0gdHJ1ZTsKICAgICAgICB9KQogICAgICAgIC5jYXRjaCgocmVzKSA9PiB7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKHJlcy5tc2cpOwogICAgICAgIH0pOwogICAgfSwKICAgIC8vIOiOt+WPluivpuaDheihqOWNleaVsOaNrgogICAgZ2V0RGF0YShpZCkgewogICAgICBnZXREYXRhSW5mbyhpZCkKICAgICAgICAudGhlbihhc3luYyAocmVzKSA9PiB7CiAgICAgICAgICB0aGlzLiRyZWZzLmRldGFpbHMubW9kYWxzID0gdHJ1ZTsKICAgICAgICAgIHRoaXMub3JkZXJEYXRhbGlzdCA9IHJlcy5kYXRhOwogICAgICAgICAgaWYgKHRoaXMub3JkZXJEYXRhbGlzdC5vcmRlckluZm8ucmVmdW5kX3JlYXNvbl93YXBfaW1nKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgdGhpcy5vcmRlckRhdGFsaXN0Lm9yZGVySW5mby5yZWZ1bmRfcmVhc29uX3dhcF9pbWcgPSBKU09OLnBhcnNlKAogICAgICAgICAgICAgICAgdGhpcy5vcmRlckRhdGFsaXN0Lm9yZGVySW5mby5yZWZ1bmRfcmVhc29uX3dhcF9pbWcsCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgIHRoaXMub3JkZXJEYXRhbGlzdC5vcmRlckluZm8ucmVmdW5kX3JlYXNvbl93YXBfaW1nID0gW107CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIC5jYXRjaCgocmVzKSA9PiB7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKHJlcy5tc2cpOwogICAgICAgIH0pOwogICAgfSwKICAgIC8vIOS/ruaUueaIkOWKnwogICAgc3VibWl0RmFpbCgpIHsKICAgICAgdGhpcy5nZXRMaXN0KCk7CiAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZUdldFRhYnMnKTsKICAgIH0sCiAgICAvLyDojrflj5bpgIDmrL7ooajljZXmlbDmja4KICAgIGdldFJlZnVuZERhdGEoaWQpIHsKICAgICAgdGhpcy4kbW9kYWxGb3JtKGdldFJlZnVuZEZyb20oaWQpKS50aGVuKCgpID0+IHsKICAgICAgICB0aGlzLmdldExpc3QoKTsKICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VHZXRUYWJzJyk7CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOiOt+WPlumAgOenr+WIhuihqOWNleaVsOaNrgogICAgZ2V0UmVmdW5kSW50ZWdyYWwoaWQpIHsKICAgICAgcmVmdW5kSW50ZWdyYWwoaWQpCiAgICAgICAgLnRoZW4oYXN5bmMgKHJlcykgPT4gewogICAgICAgICAgdGhpcy5Gcm9tRGF0YSA9IHJlcy5kYXRhOwogICAgICAgICAgdGhpcy4kcmVmcy5lZGl0cy5tb2RhbHMgPSB0cnVlOwogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChyZXMpID0+IHsKICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgICAgfSk7CiAgICB9LAogICAgLy8g5LiN6YCA5qy+6KGo5Y2V5pWw5o2uCiAgICBnZXROb1JlZnVuZERhdGEoaWQpIHsKICAgICAgdGhpcy4kbW9kYWxGb3JtKGdldG5vUmVmdW5kKGlkKSkudGhlbigoKSA9PiB7CiAgICAgICAgdGhpcy5nZXRMaXN0KCk7CiAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlR2V0VGFicycpOwogICAgICB9KTsKICAgIH0sCiAgICAvLyDlj5HpgIHotKcKICAgIHNlbmRPcmRlcihyb3cpIHsKICAgICAgaWYgKHJvdy51c2VyX2FkZHJlc3MpIHsKICAgICAgICB0aGlzLiRyZWZzLnNlbmQudXNlclNlbmRtc2cgPSB7CiAgICAgICAgICByZWFsX25hbWU6IHJvdy5yZWFsX25hbWUsCiAgICAgICAgICB1c2VyX2FkZHJlc3M6IHJvdy51c2VyX2FkZHJlc3MsCiAgICAgICAgICB1c2VyX3Bob25lOiByb3cudXNlcl9waG9uZSwKICAgICAgICB9OwogICAgICB9CiAgICAgIHRoaXMuJHJlZnMuc2VuZC50b3RhbF9udW0gPSByb3cudG90YWxfbnVtOwogICAgICB0aGlzLnZpcnR1YWxfdHlwZSA9IHJvdy52aXJ0dWFsX3R5cGU7CiAgICAgIHRoaXMuJHJlZnMuc2VuZC5tb2RhbHMgPSB0cnVlOwogICAgICB0aGlzLm9yZGVySWQgPSByb3cuaWQ7CiAgICAgIHRoaXMuc3RhdHVzID0gcm93Ll9zdGF0dXM7CiAgICAgIHRoaXMucGF5X3R5cGUgPSByb3cucGF5X3R5cGU7CiAgICAgIHRoaXMuJHJlZnMuc2VuZC5nZXRMaXN0KCk7CiAgICAgIHRoaXMuJHJlZnMuc2VuZC5nZXREZWxpdmVyeUxpc3QoKTsKICAgICAgdGhpcy4kbmV4dFRpY2soKGUpID0+IHsKICAgICAgICB0aGlzLiRyZWZzLnNlbmQuZ2V0Q2FydEluZm8ocm93Ll9zdGF0dXMsIHJvdy5pZCk7CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOmFjemAgeS/oeaBr+ihqOWNleaVsOaNrgogICAgZGVsaXZlcnkocm93KSB7CiAgICAgIGdldERpc3RyaWJ1dGlvbihyb3cuaWQpCiAgICAgICAgLnRoZW4oYXN5bmMgKHJlcykgPT4gewogICAgICAgICAgdGhpcy5Gcm9tRGF0YSA9IHJlcy5kYXRhOwogICAgICAgICAgdGhpcy4kcmVmcy5lZGl0cy5tb2RhbHMgPSB0cnVlOwogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChyZXMpID0+IHsKICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgICAgfSk7CiAgICB9LAogICAgLy8g5qC46ZSA6K6i5Y2VCiAgICBiaW5kV3JpdGUocm93KSB7CiAgICAgIGxldCBzZWxmID0gdGhpczsKICAgICAgdGhpcy4kbXNnYm94KHsKICAgICAgICB0aXRsZTogJ+aPkOekuicsCiAgICAgICAgbWVzc2FnZTogJ+ehruWumuimgeaguOmUgOivpeiuouWNleWQl++8nycsCiAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSwKICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAn5Y+W5raIJywKICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ+ehruWumicsCiAgICAgICAgaWNvbkNsYXNzOiAnZWwtaWNvbi13YXJuaW5nJywKICAgICAgICBjb25maXJtQnV0dG9uQ2xhc3M6ICdidG4tY3VzdG9tLWNhbmNlbCcsCiAgICAgIH0pCiAgICAgICAgLnRoZW4oKCkgPT4gewogICAgICAgICAgd3JpdGVVcGRhdGUocm93Lm9yZGVyX2lkKQogICAgICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICAgICAgc2VsZi4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgICAgICAgIHNlbGYuZ2V0TGlzdCgpOwogICAgICAgICAgICB9KQogICAgICAgICAgICAuY2F0Y2goKHJlcykgPT4gewogICAgICAgICAgICAgIHNlbGYuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKCgpID0+IHt9KTsKICAgIH0sCiAgICAvLyDorqLljZXnsbvlnosgIEBvbi1jaGFuZ2VUYWJzPSJnZXRDaGFuZ2VUYWJzIgogICAgZ2V0VGFicygpIHsKICAgICAgdGhpcy5zcGluU2hvdyA9IHRydWU7CiAgICAgIHRoaXMuJHN0b3JlCiAgICAgICAgLmRpc3BhdGNoKCdvcmRlci9nZXRPcmRlclRhYnMnLCB7CiAgICAgICAgICBkYXRhOiAnJywKICAgICAgICB9KQogICAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICAgIHRoaXMudGFibGlzdHMgPSByZXMuZGF0YTsKICAgICAgICAgIC8vIHRoaXMub25DaGFuZ2VDaGFydCh0aGlzLnRhYmxpc3RzKQogICAgICAgICAgdGhpcy5zcGluU2hvdyA9IGZhbHNlOwogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChyZXMpID0+IHsKICAgICAgICAgIHRoaXMuc3BpblNob3cgPSBmYWxzZTsKICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgICAgfSk7CiAgICB9LAogICAgb25DbGlja1RhYigpIHsKICAgICAgdGhpcy5nZXRPcmRlclN0YXR1cyh0aGlzLmN1cnJlbnRUYWIgPT0gJ251bGwnID8gJycgOiB0aGlzLmN1cnJlbnRUYWIpOwogICAgICB0aGlzLmdldExpc3QoKTsKICAgIH0sCiAgICAvLyDmibnph4/liKDpmaQKICAgIGRlbEFsbCgpIHsKICAgICAgaWYgKHRoaXMuZGVsSWRMaXN0Lmxlbmd0aCA9PT0gMCkgewogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+ivt+WFiOmAieaLqeWIoOmZpOeahOiuouWNle+8gScpOwogICAgICB9IGVsc2UgewogICAgICAgIGlmICh0aGlzLmlzRGVscykgewogICAgICAgICAgbGV0IGlkc3MgPSB7CiAgICAgICAgICAgIGlkczogdGhpcy5kZWxJZExpc3QsCiAgICAgICAgICB9OwogICAgICAgICAgbGV0IGRlbGZyb21EYXRhID0gewogICAgICAgICAgICB0aXRsZTogJ+WIoOmZpOiuouWNlScsCiAgICAgICAgICAgIHVybDogYC9vcmRlci9kZWxzYCwKICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsCiAgICAgICAgICAgIGlkczogaWRzcywKICAgICAgICAgIH07CiAgICAgICAgICB0aGlzLiRtb2RhbFN1cmUoZGVsZnJvbURhdGEpCiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICAgICAgICB0aGlzLiRtZXNzYWdlLnN1Y2Nlc3MocmVzLm1zZyk7CiAgICAgICAgICAgICAgdGhpcy5nZXRMaXN0KCk7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC5jYXRjaCgocmVzKSA9PiB7CiAgICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ+aCqOmAieaLqeeahOeahOiuouWNleWtmOWcqOeUqOaIt+acquWIoOmZpOeahOiuouWNle+8jOaXoOazleWIoOmZpOeUqOaIt+acquWIoOmZpOeahOiuouWNle+8gScpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIC8vIOS4i+i9veaJuemHj+WPkei0p+aooeeJiAogICAgYXN5bmMgZXhwb3J0RGVsaXZlcnlMaXN0KCkgewogICAgICBsZXQgW3RoLCBmaWxla2V5LCBkYXRhLCBmaWxlTmFtZV0gPSBbW10sIFtdLCBbXSwgJyddOwogICAgICBsZXQgZGVsaXZlcnlEYXRhID0geyBwYWdlOiAxLCBsaW1pdDogMjAwIH07CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVsaXZlcnlEYXRhLnBhZ2UgKyAxOyBpKyspIHsKICAgICAgICBsZXQgZXhwcmVzc0RhdGEgPSBhd2FpdCB0aGlzLmdldERlbGl2ZXJ5RGF0YShkZWxpdmVyeURhdGEpOwogICAgICAgIGlmICghZmlsZU5hbWUpIGZpbGVOYW1lID0gZXhwcmVzc0RhdGEuZmlsZW5hbWU7CiAgICAgICAgaWYgKCFmaWxla2V5Lmxlbmd0aCkgewogICAgICAgICAgZmlsZWtleSA9IGV4cHJlc3NEYXRhLmZpbGVLZXk7CiAgICAgICAgfQogICAgICAgIGlmICghdGgubGVuZ3RoKSB0aCA9IGV4cHJlc3NEYXRhLmhlYWRlcjsKICAgICAgICBpZiAoZXhwcmVzc0RhdGEuZXhwb3J0Lmxlbmd0aCkgewogICAgICAgICAgZGF0YSA9IGRhdGEuY29uY2F0KGV4cHJlc3NEYXRhLmV4cG9ydCk7CiAgICAgICAgICBkZWxpdmVyeURhdGEucGFnZSsrOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLiRleHBvcnRFeGNlbCh0aCwgZmlsZWtleSwgZmlsZU5hbWUsIGRhdGEpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGdldERlbGl2ZXJ5RGF0YShkZWxpdmVyeURhdGEpIHsKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgICBleHBvcnRPcmRlckRlbGl2ZXJ5TGlzdChkZWxpdmVyeURhdGEpLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgcmVzb2x2ZShyZXMuZGF0YSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOS4iuS8oOWktOmDqHRva2VuCiAgICBnZXRUb2tlbigpIHsKICAgICAgdGhpcy5oZWFkZXJbJ0F1dGhvcmktemF0aW9uJ10gPSAnQmVhcmVyICcgKyBnZXRDb29raWVzKCd0b2tlbicpOwogICAgfSwKICAgIHVwRXhwcmVzcyhkYXRhKSB7CiAgICAgIGltcG9ydEV4cHJlc3MoeyBmaWxlOiBkYXRhLmRhdGEuc3JjIH0pCiAgICAgICAgLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgICAgdGhpcy5nZXRMaXN0KCk7CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKHJlcykgPT4gewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgICB9KTsKICAgIH0sCiAgICAvLyDlr7zlh7oKICAgIGFzeW5jIGV4cG9ydExpc3QoKSB7CiAgICAgIGxldCBleGNlbERhdGEgPSB7CiAgICAgICAgICBwYWdlOiAxLAogICAgICAgICAgbGltaXQ6IDEwMCwKICAgICAgICAgIHN0YXR1czogdGhpcy5vcmRlclN0YXR1cywKICAgICAgICAgIHBheV90eXBlOiB0aGlzLm9yZGVyUGF5VHlwZSwKICAgICAgICAgIGRhdGE6IHRoaXMub3JkZXJUaW1lLAogICAgICAgICAgcmVhbF9uYW1lOiB0aGlzLnJlYWxfbmFtZSwKICAgICAgICAgIGZpZWxkX2tleTogdGhpcy5maWVsZEtleSwKICAgICAgICAgIHR5cGU6IHRoaXMub3JkZXJUeXBlID09PSAwID8gJycgOiB0aGlzLm9yZGVyVHlwZSwKICAgICAgICAgIGlkczogdGhpcy5kZWxJZExpc3QsCiAgICAgICAgfSwKICAgICAgICBkYXRhID0gW10sCiAgICAgICAgbGViRGF0YSA9IHt9OwogICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGV4Y2VsRGF0YS5wYWdlICsgMTsgaSsrKSB7CiAgICAgICAgbGViRGF0YSA9IGF3YWl0IHRoaXMuZ2V0RXhjZWxEYXRhKGV4Y2VsRGF0YSk7CiAgICAgICAgaWYgKGxlYkRhdGEuZXhwb3J0Lmxlbmd0aCkgewogICAgICAgICAgZGF0YSA9IGRhdGEuY29uY2F0KGxlYkRhdGEuZXhwb3J0KTsKICAgICAgICAgIGlmIChsZWJEYXRhLmV4cG9ydC5sZW5ndGggPT0gZXhjZWxEYXRhLmxpbWl0KSBleGNlbERhdGEucGFnZSsrOwogICAgICAgIH0KICAgICAgfQogICAgICBjcmVhdGVXb3JrQm9vayhsZWJEYXRhLmhlYWRlciwgbGViRGF0YS5maWxlbmFtZSwgZGF0YSwgJycsIGxlYkRhdGEuZmlsZW5hbWUpOwogICAgfSwKICAgIGdldEV4Y2VsRGF0YShleGNlbERhdGEpIHsKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgICBleHBvcnRPcmRlckxpc3QoZXhjZWxEYXRhKS50aGVuKChyZXMpID0+IHsKICAgICAgICAgIHJlc29sdmUocmVzLmRhdGEpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCiAgICAvLyDorqLljZXmoLjplIAKICAgIHdyaXRlT2ZmKCkgewogICAgICB0aGlzLm1vZGFsczIgPSB0cnVlOwogICAgfSwKICAgIC8vIOiuouWNleaguOmUgAogICAgb2sobmFtZSkgewogICAgICBpZiAoIXRoaXMud3JpdGVPZmZGcm9tLmNvZGUpIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLndhcm5pbmcoJ+ivt+WFiOmqjOivgeiuouWNle+8gScpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMud3JpdGVPZmZGcm9tLmNvbmZpcm0gPSAxOwogICAgICAgIHB1dFdyaXRlKHRoaXMud3JpdGVPZmZGcm9tKQogICAgICAgICAgLnRoZW4oYXN5bmMgKHJlcykgPT4gewogICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgICAgICAgIHRoaXMubW9kYWxzMiA9IGZhbHNlOwogICAgICAgICAgICAgIHRoaXMuJHJlZnNbbmFtZV0ucmVzZXRGaWVsZHMoKTsKICAgICAgICAgICAgICB0aGlzLmdldExpc3QoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKHJlcy5tc2cpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgICAgLmNhdGNoKChyZXMpID0+IHsKICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgZGVsKG5hbWUpIHsKICAgICAgdGhpcy5tb2RhbHMyID0gZmFsc2U7CiAgICAgIHRoaXMud3JpdGVPZmZGcm9tLmNvZGUgPSAnJzsKICAgICAgdGhpcy4kcmVmc1tuYW1lXS5yZXNldEZpZWxkcygpOwogICAgfSwKICAgIGNoYW5nZU1vZGFsKCkgewogICAgICB0aGlzLndyaXRlT2ZmRnJvbS5jb2RlID0gJyc7CiAgICB9LAogIH0sCn07Cg=="},null]}