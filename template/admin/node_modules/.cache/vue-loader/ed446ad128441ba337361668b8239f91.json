{"remainingRequest":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js??ref--12-0!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/babel-loader/lib/index.js!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/community/articleDetails.vue?vue&type=template&id=f4992464&scoped=true","dependencies":[{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/community/articleDetails.vue","mtime":1722514052000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/babel.config.js","mtime":1679965410000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/.babelrc","mtime":1679965410000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/babel-loader/lib/index.js","mtime":1746465024347},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1746465020064},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js","mtime":1746465019530}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}