{"remainingRequest":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/system/backendRouting/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/system/backendRouting/index.vue","mtime":1719467759000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/thread-loader/dist/cjs.js","mtime":1746465018446},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/babel-loader/lib/index.js","mtime":1746465024347},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js","mtime":1746465019530}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7CiAgcm91dGVDYXRlLAogIHN5bmNSb3V0ZSwKICByb3V0ZUxpc3QsCiAgcm91dGVEZXQsCiAgcm91dGVTYXZlLAogIGludGVyZmFjZUVkaXROYW1lLAogIHJvdXRlRGVsLAogIHJvdXRlRWRpdCwKICByb3V0ZUNhdGVEZWwsCn0gZnJvbSAnQC9hcGkvc3lzdGVtQmFja2VuZFJvdXRpbmcnOwppbXBvcnQgeyBWdWVUcmVlTGlzdCwgVHJlZSwgVHJlZU5vZGUgfSBmcm9tICd2dWUtdHJlZS1saXN0JzsKaW1wb3J0IGRlYnVnZ2luZyBmcm9tICcuL2RlYnVnZ2luZy52dWUnOwoKaW1wb3J0IHsgbWFwU3RhdGUgfSBmcm9tICd2dWV4JzsKaW1wb3J0IHsgaW50ZXJmYWNlRGVsIH0gZnJvbSAnQGFwaS9zeXN0ZW1PdXRBY2NvdW50JzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdzeXN0ZW1PdXRJbnRlcmZhY2UnLAogIGNvbXBvbmVudHM6IHsKICAgIFZ1ZVRyZWVMaXN0LAogICAgZGVidWdnaW5nLAogIH0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHZhbHVlOiAnJywKICAgICAgaXNFZGl0OiBmYWxzZSwKICAgICAgbmFtZU1vZGFsOiBmYWxzZSwKICAgICAgZGVidWdnaW5nTW9kYWw6IGZhbHNlLAogICAgICBmb3JtVmFsaWRhdGU6IHt9LAogICAgICBncmlkOiB7CiAgICAgICAgeGw6IDcsCiAgICAgICAgbGc6IDcsCiAgICAgICAgbWQ6IDEyLAogICAgICAgIHNtOiAyNCwKICAgICAgICB4czogMjQsCiAgICAgIH0sCiAgICAgIHJ1bGVWYWxpZGF0ZTogewogICAgICAgIHRpdGxlOiBbeyBtZXNzYWdlOiAn6K+36L6T5YWl5q2j56Gu55qE5o+P6L+wICjkuI3og73lpJrkuo4yMDDkvY3mlbApJywgdHJpZ2dlcjogJ2JsdXInLCBtYXg6IDIwMCB9XSwKICAgICAgfSwKICAgICAgbG9hZGluZzogZmFsc2UsCiAgICAgIGludFR5cGVMaXN0OiBbCiAgICAgICAgewogICAgICAgICAgdmFsdWU6ICdzdHJpbmcnLAogICAgICAgICAgbGFiZWw6ICdTdHJpbmcnLAogICAgICAgIH0sCiAgICAgICAgLy8gewogICAgICAgIC8vICAgdmFsdWU6ICdhcnJheScsCiAgICAgICAgLy8gICBsYWJlbDogJ0FycmF5JywKICAgICAgICAvLyB9LAogICAgICAgIC8vIHsKICAgICAgICAvLyAgIHZhbHVlOiAnb2JqZWN0JywKICAgICAgICAvLyAgIGxhYmVsOiAnT2JqZWN0JywKICAgICAgICAvLyB9LAogICAgICAgIHsKICAgICAgICAgIHZhbHVlOiAnbnVtYmVyJywKICAgICAgICAgIGxhYmVsOiAnTnVtYmVyJywKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIHZhbHVlOiAnYm9vbGVhbicsCiAgICAgICAgICBsYWJlbDogJ0Jvb2xlYW4nLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgdmFsdWU6ICdudWxsJywKICAgICAgICAgIGxhYmVsOiAnTnVsbCcsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICB2YWx1ZTogJ2FueScsCiAgICAgICAgICBsYWJlbDogJ0FueScsCiAgICAgICAgfSwKICAgICAgXSwKICAgICAgdHlwZUxpc3Q6IFsKICAgICAgICB7CiAgICAgICAgICB2YWx1ZTogJ3N0cmluZycsCiAgICAgICAgICBsYWJlbDogJ1N0cmluZycsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICB2YWx1ZTogJ2FycmF5JywKICAgICAgICAgIGxhYmVsOiAnQXJyYXknLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgdmFsdWU6ICdvYmplY3QnLAogICAgICAgICAgbGFiZWw6ICdPYmplY3QnLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgdmFsdWU6ICdudW1iZXInLAogICAgICAgICAgbGFiZWw6ICdOdW1iZXInLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgdmFsdWU6ICdib29sZWFuJywKICAgICAgICAgIGxhYmVsOiAnQm9vbGVhbicsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICB2YWx1ZTogJ251bGwnLAogICAgICAgICAgbGFiZWw6ICdOdWxsJywKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIHZhbHVlOiAnYW55JywKICAgICAgICAgIGxhYmVsOiAnQW55JywKICAgICAgICB9LAogICAgICBdLAogICAgICByZXF1ZXN0VHlwZUxpc3Q6IFsKICAgICAgICB7CiAgICAgICAgICB2YWx1ZTogJ0dFVCcsCiAgICAgICAgICBsYWJlbDogJ0dFVCcsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICB2YWx1ZTogJ1BPU1QnLAogICAgICAgICAgbGFiZWw6ICdQT1NUJywKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIHZhbHVlOiAnREVMRVRFJywKICAgICAgICAgIGxhYmVsOiAnREVMRVRFJywKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIHZhbHVlOiAnUFVUJywKICAgICAgICAgIGxhYmVsOiAnUFVUJywKICAgICAgICB9LAogICAgICBdLAogICAgICBjb250ZXh0RGF0YTogbnVsbCwgLy/lt6bkvqflr7zoiKrlj7PplK7ngrnlh7vmmK/kuqfnlJ/nmoTmlbDmja7lr7nosaEKICAgICAgdHJlZURhdGE6IHVuZGVmaW5lZCwKICAgICAgYnV0dG9uUHJvcHM6IHsKICAgICAgICB0eXBlOiAnZGVmYXVsdCcsCiAgICAgICAgc2l6ZTogJ3NtYWxsJywKICAgICAgfSwKICAgICAgbWV0aG9kQ29sb3I6ICcjZmZmJywKICAgICAgYXBpVHlwZTogJ2FkbWluYXBpJywKICAgICAgcGFyYW1zSWQ6IDAsCiAgICAgIHdpbkxvYWRpbmc6IGZhbHNlLAogICAgfTsKICB9LAogIHdhdGNoOiB7CiAgICBbJ2Zvcm1WYWxpZGF0ZS5tZXRob2QnXTogewogICAgICBkZWVwOiB0cnVlLAogICAgICBoYW5kbGVyKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgICAgaWYgKG5ld1ZhbCkgewogICAgICAgICAgbGV0IG1ldGhvZCA9IG5ld1ZhbC50b1VwcGVyQ2FzZSgpOwogICAgICAgICAgaWYgKG1ldGhvZCA9PSAnR0VUJykgewogICAgICAgICAgICB0aGlzLm1ldGhvZENvbG9yID0gJyM2MWFmZmUnOwogICAgICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT0gJ1BPU1QnKSB7CiAgICAgICAgICAgIHRoaXMubWV0aG9kQ29sb3IgPSAnIzQ5Y2M5MCc7CiAgICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PSAnUFVUJykgewogICAgICAgICAgICB0aGlzLm1ldGhvZENvbG9yID0gJyNmY2ExMzAnOwogICAgICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT0gJ0RFTCcgfHwgbWV0aG9kID09ICdERUxFVEUnKSB7CiAgICAgICAgICAgIHRoaXMubWV0aG9kQ29sb3IgPSAnI2Y5M2UzZSc7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgfSwKICAgIGFwaVR5cGUobmV3VmFsKSB7CiAgICAgIGlmIChuZXdWYWwpIHsKICAgICAgICB0aGlzLndpbkxvYWRpbmcgPSB0cnVlOwogICAgICAgIHRoaXMuZ2V0SW50ZXJmYWNlTGlzdCgnb25lJyk7CiAgICAgIH0KICAgIH0sCiAgICBpc0VkaXQobmV3VmFsKSB7CiAgICAgIGlmIChuZXdWYWwpIHsKICAgICAgICB0aGlzLmZvcm1WYWxpZGF0ZS5yZXNwb25zZV9leGFtcGxlLm1hcCgoZSkgPT4gewogICAgICAgICAgZS5kYXRhID0gSlNPTi5zdHJpbmdpZnkoZS5kYXRhKTsKICAgICAgICB9KTsKICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmZvcm1WYWxpZGF0ZS5yZXNwb25zZV9leGFtcGxlLCAndGhpcy5mb3JtVmFsaWRhdGUucmVzcG9uc2VfZXhhbXBsZScpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuZm9ybVZhbGlkYXRlLnJlc3BvbnNlX2V4YW1wbGUubWFwKChlKSA9PiB7CiAgICAgICAgICBlLmRhdGEgPSBKU09OLnBhcnNlKGUuZGF0YSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgfSwKICBjb21wdXRlZDogewogICAgLi4ubWFwU3RhdGUoJ21lZGlhJywgWydpc01vYmlsZSddKSwKICAgIGxhYmVsV2lkdGgoKSB7CiAgICAgIHJldHVybiB0aGlzLmlzTW9iaWxlID8gdW5kZWZpbmVkIDogJzUwcHgnOwogICAgfSwKICAgIGxhYmVsUG9zaXRpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLmlzTW9iaWxlID8gJ3RvcCcgOiAncmlnaHQnOwogICAgfSwKICB9LAogIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmdldEludGVyZmFjZUxpc3QoJ29uZScpOwogIH0sCiAgbWV0aG9kczogewogICAgc3luY1JvdXRlKCkgewogICAgICB0aGlzLiRtc2dib3goewogICAgICAgIHRpdGxlOiAn56uL5Y2z5ZCM5q2lJywKICAgICAgICBtZXNzYWdlOiAn5ZCM5q2l5LmL5ZCO77yM6Lev55Sx5paH5Lu25Lit5paw5aKe55qE5o6l5Y+j5re75Yqg5Yiw5o6l5Y+j5YiX6KGo5Lit77yM6Lev55Sx5paH5Lu25Lit5Yig6Zmk55qE6Lev55Sx5Lya5ZCM5q2l55qE5Zyo5o6l5Y+j5YiX6KGo5Lit5Yig6ZmkJywKICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLAogICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtognLAogICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAn56Gu5a6aJywKICAgICAgICBpY29uQ2xhc3M6ICdlbC1pY29uLXdhcm5pbmcnLAogICAgICAgIGNvbmZpcm1CdXR0b25DbGFzczogJ2J0bi1jdXN0b20tY2FuY2VsJywKICAgICAgfSkKICAgICAgICAudGhlbigoKSA9PiB7CiAgICAgICAgICBzeW5jUm91dGUodGhpcy5hcGlUeXBlKS50aGVuKChyZXMpID0+IHsKICAgICAgICAgICAgdGhpcy5nZXRJbnRlcmZhY2VMaXN0KCdvbmUnKTsKICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgICAgfSk7CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKCkgPT4ge30pOwogICAgfSwKICAgIGRlYnVnZ2luZygpIHsKICAgICAgdGhpcy5kZWJ1Z2dpbmdNb2RhbCA9IHRydWU7CiAgICB9LAogICAgb25DbGlja3NzcyhlKSB7fSwKICAgIG1ldGhvZHNDb2xvcihuZXdWYWwpIHsKICAgICAgbGV0IG1ldGhvZCA9IG5ld1ZhbC50b1VwcGVyQ2FzZSgpOwogICAgICBpZiAobWV0aG9kID09ICdHRVQnKSB7CiAgICAgICAgcmV0dXJuICcjNjFhZmZlJzsKICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT0gJ1BPU1QnKSB7CiAgICAgICAgcmV0dXJuICcjNDljYzkwJzsKICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT0gJ1BVVCcpIHsKICAgICAgICByZXR1cm4gJyNmY2ExMzAnOwogICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PSAnREVMJyB8fCBtZXRob2QgPT0gJ0RFTEVURScpIHsKICAgICAgICByZXR1cm4gJyNmOTNlM2UnOwogICAgICB9CiAgICB9LAogICAgaW5zZXJ0QmVmb3JlKHBhcmFtcykge30sCiAgICBpbnNlcnRBZnRlcihwYXJhbXMpIHt9LAogICAgbW92ZUludG8ocGFyYW1zKSB7fSwKICAgIGFzeW5jIGFkZFRhYmxlRGF0YSgpIHsKICAgICAgY29uc3QgeyByb3c6IGRhdGEgfSA9IGF3YWl0ICR0YWJsZS5pbnNlcnRBdChuZXdSb3csIC0xKTsKICAgICAgYXdhaXQgJHRhYmxlLnNldEFjdGl2ZUNlbGwoZGF0YSwgJ25hbWUnKTsKICAgIH0sCiAgICBnZXRJbnRlcmZhY2VMaXN0KGRpc2tfdHlwZSkgewogICAgICB0cnkgewogICAgICAgIHJvdXRlTGlzdCh0aGlzLmFwaVR5cGUpCiAgICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICAgIGlmIChyZXMuZGF0YS5sZW5ndGgpIHsKICAgICAgICAgICAgICByZXMuZGF0YVswXS5leHBhbmQgPSBmYWxzZTsKICAgICAgICAgICAgICB0aGlzLnRyZWVEYXRhID0gbmV3IFRyZWUocmVzLmRhdGEpOwogICAgICAgICAgICAgIGxldCBpOwogICAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKChlKSA9PiB7CiAgICAgICAgICAgICAgICBpZiAoZGlza190eXBlKSB7CiAgICAgICAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgICAgICByZXMuZGF0YVswXS5jaGlsZHJlbiAmJgogICAgICAgICAgICAgICAgICAgIHJlcy5kYXRhWzBdLmNoaWxkcmVuWzBdLmNoaWxkcmVuICYmCiAgICAgICAgICAgICAgICAgICAgcmVzLmRhdGFbMF0uY2hpbGRyZW5bMF0uY2hpbGRyZW4ubGVuZ3RoCiAgICAgICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy52dGwtaWNvbi1jYXJldC1yaWdodCcpWzBdLmNsaWNrKCk7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnZ0bC1pY29uLWNhcmV0LXJpZ2h0JylbMV0uY2xpY2soKTsKICAgICAgICAgICAgICAgICAgICBpID0gcmVzLmRhdGFbMF0uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF07CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnZ0bC1pY29uLWNhcmV0LXJpZ2h0JylbMF0uY2xpY2soKTsKICAgICAgICAgICAgICAgICAgICBpID0gcmVzLmRhdGFbMF0uY2hpbGRyZW5bMF07CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgdGhpcy5vbkNsaWNrKGkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIC8vIHRoaXMuJHJlZnMudHJlZUxpc3QuY2xlYXIoKTsKICAgICAgICAgICAgICB0aGlzLnRyZWVEYXRhID0gbmV3IFRyZWUoe30pOwogICAgICAgICAgICAgIHRoaXMuZm9ybVZhbGlkYXRlID0ge307CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy53aW5Mb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICB9KQogICAgICAgICAgLmNhdGNoKChlcnIpID0+IHsKICAgICAgICAgICAgdGhpcy53aW5Mb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoZXJyLm1zZyk7CiAgICAgICAgICB9KTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7CiAgICAgIH0KICAgIH0sCiAgICBvbkNsaWNrKHBhcmFtcykgewogICAgICB0cnkgewogICAgICAgIGlmIChwYXJhbXMubWV0aG9kKSB7CiAgICAgICAgICB0aGlzLmlzRWRpdCA9IGZhbHNlOwogICAgICAgICAgdGhpcy5wYXJhbXNJZCA9IHBhcmFtcy5pZDsKICAgICAgICAgIHRoaXMuZ2V0Um90ZURhdGEocGFyYW1zLmlkKTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7fQogICAgfSwKICAgIGdldFJvdGVEYXRhKGlkKSB7CiAgICAgIHJvdXRlRGV0KGlkKQogICAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICAgIHRoaXMuZm9ybVZhbGlkYXRlID0gcmVzLmRhdGE7CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKGVycikgPT4gewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihlcnIubXNnKTsKICAgICAgICB9KTsKICAgIH0sCiAgICBhc3luYyBoYW5kbGVTdWJtaXQoKSB7CiAgICAgIGlmICghdGhpcy5mb3JtVmFsaWRhdGUubmFtZSkgewogICAgICAgIHJldHVybiB0aGlzLiRtZXNzYWdlLndhcm5pbmcoJ+ivt+i+k+WFpeaOpeWPo+WQjeensCcpOwogICAgICB9IGVsc2UgaWYgKCF0aGlzLmZvcm1WYWxpZGF0ZS5tZXRob2QpIHsKICAgICAgICByZXR1cm4gdGhpcy4kbWVzc2FnZS53YXJuaW5nKCfor7fpgInmi6nor7fmsYLnsbvlnosnKTsKICAgICAgfSBlbHNlIGlmICghdGhpcy5mb3JtVmFsaWRhdGUucGF0aCkgewogICAgICAgIHJldHVybiB0aGlzLiRtZXNzYWdlLndhcm5pbmcoJ+ivt+i+k+WFpei3r+eUseWcsOWdgCcpOwogICAgICB9CiAgICAgIHRoaXMuZm9ybVZhbGlkYXRlLnJlcXVlc3QgPSBhd2FpdCB0aGlzLiRyZWZzLmJvZHlUYWJsZS5nZXRUYWJsZURhdGEoKS50YWJsZURhdGE7CiAgICAgIHRoaXMuZm9ybVZhbGlkYXRlLnJlc3BvbnNlID0gYXdhaXQgdGhpcy4kcmVmcy5yZXNUYWJsZS5nZXRUYWJsZURhdGEoKS50YWJsZURhdGE7CiAgICAgIHRoaXMuZm9ybVZhbGlkYXRlLmVycm9yX2NvZGUgPSBhd2FpdCB0aGlzLiRyZWZzLmNvZGVUYWJsZS5nZXRUYWJsZURhdGEoKS50YWJsZURhdGE7CiAgICAgIHRoaXMuZm9ybVZhbGlkYXRlLmhlYWRlciA9IGF3YWl0IHRoaXMuJHJlZnMuaGVhZFRhYmxlLmdldFRhYmxlRGF0YSgpLnRhYmxlRGF0YTsKICAgICAgdGhpcy5mb3JtVmFsaWRhdGUucXVlcnkgPSBhd2FpdCB0aGlzLiRyZWZzLnhUYWJsZS5nZXRUYWJsZURhdGEoKS50YWJsZURhdGE7CiAgICAgIHRoaXMuZm9ybVZhbGlkYXRlLmFwaVR5cGUgPSB0aGlzLmFwaVR5cGU7CiAgICAgIHRoaXMuZm9ybVZhbGlkYXRlLnJlc3BvbnNlX2V4YW1wbGUubWFwKChlKSA9PiB7CiAgICAgICAgZS5kYXRhID0gSlNPTi5wYXJzZShlLmRhdGEpOwogICAgICB9KTsKICAgICAgYXdhaXQgcm91dGVTYXZlKHRoaXMuZm9ybVZhbGlkYXRlKQogICAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uuc3VjY2VzcyhyZXMubXNnKTsKICAgICAgICAgIHRoaXMuZ2V0Um90ZURhdGEodGhpcy5wYXJhbXNJZCk7CiAgICAgICAgICB0aGlzLmlzRWRpdCA9IGZhbHNlOwogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChlcnIpID0+IHsKICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoZXJyLm1zZyk7CiAgICAgICAgfSk7CiAgICB9LAogICAgYXN5bmMgaW5zZXJ0RXZlbnQodHlwZSkgewogICAgICBjb25zdCAkdGFibGUgPSB0aGlzLiRyZWZzW3R5cGVdOwogICAgICBsZXQgbmV3Um93OwogICAgICBpZiAodHlwZSA9PSAneFRhYmxlJykgewogICAgICAgIG5ld1JvdyA9IHsKICAgICAgICAgIGF0dHJpYnV0ZTogJycsCiAgICAgICAgICB0eXBlOiAnJywKICAgICAgICAgIG11c3Q6IDAsCiAgICAgICAgICB0cmlwOiAnJywKICAgICAgICB9OwogICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ3Jlc1RhYmxlJykgewogICAgICAgIG5ld1JvdyA9IHsKICAgICAgICAgIGF0dHJpYnV0ZTogJycsCiAgICAgICAgICB0eXBlOiAnJywKICAgICAgICAgIHRyaXA6ICcnLAogICAgICAgIH07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbmV3Um93ID0gewogICAgICAgICAgY29kZTogJycsCiAgICAgICAgICB2YWx1ZTogJycsCiAgICAgICAgICBzb2x1dGlvbjogJycsCiAgICAgICAgfTsKICAgICAgfQogICAgICAvLyAkdGFibGUuaW5zZXJ0KG5ld1JvdykudGhlbigoeyByb3cgfSkgPT4gJHRhYmxlLnNldEVkaXRSb3cocm93LCAtMSkpOwogICAgICBjb25zdCB7IHJvdzogZGF0YSB9ID0gYXdhaXQgJHRhYmxlLmluc2VydEF0KG5ld1JvdywgLTEpOwogICAgICBhd2FpdCAkdGFibGUuc2V0QWN0aXZlQ2VsbChkYXRhLCAnbmFtZScpOwogICAgfSwKICAgIGFzeW5jIGluc2VydFJvdyhjdXJyUm93LCB0eXBlKSB7CiAgICAgIGNvbnN0ICR0YWJsZSA9IHRoaXMuJHJlZnNbdHlwZV07CiAgICAgIC8vIOWmguaenCBudWxsIOWImeaPkuWFpeWIsOebruagh+iKgueCuemhtumDqAogICAgICAvLyDlpoLmnpwgLTEg5YiZ5o+S5YWl5Yiw55uu5qCH6IqC54K55bqV6YOoCiAgICAgIC8vIOWmguaenCByb3cg5YiZ5pyJ5o+S5YWl5Yiw5pWI55qE55uu5qCH6IqC54K56K+l6KGM55qE5L2N572uCiAgICAgIGxldCByZWNvcmQ7CiAgICAgIGlmICh0eXBlID09ICd4VGFibGUnKSB7CiAgICAgICAgcmVjb3JkID0gewogICAgICAgICAgYXR0cmlidXRlOiAnJywKICAgICAgICAgIHR5cGU6ICcnLAogICAgICAgICAgbXVzdDogMCwKICAgICAgICAgIHRyaXA6ICcnLAogICAgICAgICAgaWQ6IERhdGUubm93KCksCiAgICAgICAgICBwYXJlbnRJZDogY3VyclJvdy5pZCwgLy8g6ZyA6KaB5oyH5a6a54i26IqC54K577yM6Ieq5Yqo5o+S5YWl6K+l6IqC54K55LitCiAgICAgICAgfTsKICAgICAgfSBlbHNlIGlmICh0eXBlID09ICdyZXNUYWJsZScpIHsKICAgICAgICByZWNvcmQgPSB7CiAgICAgICAgICBhdHRyaWJ1dGU6ICcnLAogICAgICAgICAgdHlwZTogJycsCiAgICAgICAgICB0cmlwOiAnJywKICAgICAgICAgIGlkOiBEYXRlLm5vdygpLAogICAgICAgICAgcGFyZW50SWQ6IGN1cnJSb3cuaWQsIC8vIOmcgOimgeaMh+WumueItuiKgueCue+8jOiHquWKqOaPkuWFpeivpeiKgueCueS4rQogICAgICAgIH07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVjb3JkID0gewogICAgICAgICAgY29kZTogJycsCiAgICAgICAgICB2YWx1ZTogJycsCiAgICAgICAgICBzb2x1dGlvbjogJycsCiAgICAgICAgICBpZDogRGF0ZS5ub3coKSwKICAgICAgICAgIHBhcmVudElkOiBjdXJyUm93LmlkLCAvLyDpnIDopoHmjIflrprniLboioLngrnvvIzoh6rliqjmj5LlhaXor6XoioLngrnkuK0KICAgICAgICB9OwogICAgICB9CiAgICAgIGNvbnN0IHsgcm93OiBuZXdSb3cgfSA9IGF3YWl0ICR0YWJsZS5pbnNlcnRBdChyZWNvcmQsIC0xKTsKICAgICAgYXdhaXQgJHRhYmxlLnNldFRyZWVFeHBhbmQoY3VyclJvdywgdHJ1ZSk7IC8vIOWwhueItuiKgueCueWxleW8gAogICAgICBhd2FpdCAkdGFibGUuc2V0QWN0aXZlUm93KG5ld1Jvdyk7IC8vIOaPkuWFpeWtkOiKgueCuQogICAgfSwKICAgIGFzeW5jIHJlbW92ZVJvdyhyb3csIHR5cGUpIHsKICAgICAgY29uc3QgJHRhYmxlID0gdGhpcy4kcmVmc1t0eXBlXTsKICAgICAgYXdhaXQgJHRhYmxlLnJlbW92ZShyb3cpOwogICAgfSwKICAgIC8vIOS/ruaUueWQjeWtlwogICAgYWRkKCkgewogICAgICB0aGlzLnZhbHVlID0gJyc7CiAgICAgIHRoaXMuZm9ybVZhbGlkYXRlLmlkID0gMDsKICAgICAgdGhpcy5uYW1lTW9kYWwgPSB0cnVlOwogICAgfSwKICAgIC8vIOeCueWHu+iPnOWNlQogICAgY2xpY2tNZW51KG5hbWUsIHBhcmFtcykgewogICAgICBpZiAobmFtZSA9PSAxKSB7CiAgICAgICAgdGhpcy5mb3JtVmFsaWRhdGUgPSB7fTsKICAgICAgICB0aGlzLmZvcm1WYWxpZGF0ZS5jYXRlX2lkID0gcGFyYW1zID8gcGFyYW1zLmlkIDogMDsKICAgICAgICB0aGlzLmZvcm1WYWxpZGF0ZS5pZCA9IDA7CiAgICAgICAgdGhpcy5pc0VkaXQgPSB0cnVlOwogICAgICB9IGVsc2UgaWYgKG5hbWUgPT0gMikgewogICAgICAgIC8vIHRoaXMudmFsdWUgPSBwYXJhbXMubmFtZSB8fCAnJzsKICAgICAgICAvLyB0aGlzLmZvcm1WYWxpZGF0ZS5jYXRlX2lkID0gcGFyYW1zID8gcGFyYW1zLmlkIDogMDsKICAgICAgICAvLyB0aGlzLm5hbWVNb2RhbCA9IHRydWU7CiAgICAgICAgLy8gdGhpcy5vbkVkaXQocGFyYW1zKTsKICAgICAgICB0aGlzLiRtb2RhbEZvcm0ocm91dGVFZGl0KHBhcmFtcy5pZCwgdGhpcy5hcGlUeXBlKSkudGhlbigoKSA9PiB0aGlzLmdldEludGVyZmFjZUxpc3QoKSk7CiAgICAgIH0gZWxzZSBpZiAobmFtZSA9PSAzKSB7CiAgICAgICAgdGhpcy5vbkRlbChwYXJhbXMpOwogICAgICB9IGVsc2UgaWYgKG5hbWUgPT0gNCkgewogICAgICAgIC8vIHRoaXMuYWRkKCk7CiAgICAgICAgdGhpcy4kbW9kYWxGb3JtKHJvdXRlQ2F0ZSh0aGlzLmFwaVR5cGUpKS50aGVuKCgpID0+IHRoaXMuZ2V0SW50ZXJmYWNlTGlzdCgpKTsKICAgICAgfQogICAgfSwKCiAgICBhZGRGYWMocGFyYW1zKSB7CiAgICAgIHRoaXMuZm9ybVZhbGlkYXRlID0gewogICAgICAgIGlkOiBwYXJhbXMgPyBwYXJhbXMuaWQgOiAwLAogICAgICB9OwogICAgICB0aGlzLmlzRWRpdCA9IHRydWU7CiAgICB9LAogICAgYXN5bmNPSygpIHsKICAgICAgbGV0IGRhdGEgPSB7CiAgICAgICAgaWQ6IHRoaXMuZm9ybVZhbGlkYXRlLmlkIHx8IDAsCiAgICAgICAgdHlwZTogMCwKICAgICAgICBuYW1lOiB0aGlzLnZhbHVlLAogICAgICB9OwogICAgICByb3V0ZVNhdmUoZGF0YSkKICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLnN1Y2Nlc3MocmVzLm1zZyk7CiAgICAgICAgICB0aGlzLmdldEludGVyZmFjZUxpc3QoKTsKICAgICAgICB9KQogICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKGVyci5tc2cpOwogICAgICAgIH0pOwogICAgfSwKICAgIC8v5L6n6L655qCP5Y+z6ZSu54K55Ye75LqL5Lu2CiAgICBoYW5kbGVDb250ZXh0TWVudShkYXRhLCBldmVudCwgcG9zaXRpb24pIHsKICAgICAgcG9zaXRpb24ubGVmdCA9IE51bWJlcihwb3NpdGlvbi5sZWZ0LnNsaWNlKDAsIC0yKSkgKyA3NSArICdweCc7CiAgICAgIHRoaXMuY29udGV4dERhdGEgPSBkYXRhOwogICAgfSwKICAgIGhhbmRsZUNvbnRleHRDcmVhdGVGb2xkZXIoKSB7fSwKICAgIGhhbmRsZUNvbnRleHRDcmVhdGVGaWxlKCkge30sCiAgICAvLyDoh6rlrprkuYnmmL7npLoKICAgIHJlbmRlckNvbnRlbnQoaCwgeyByb290LCBub2RlLCBkYXRhIH0pIHsKICAgICAgbGV0IHRoYXQgPSB0aGlzOwogICAgICByZXR1cm4gaCgKICAgICAgICAnc3BhbicsCiAgICAgICAgewogICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsCiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsCiAgICAgICAgICB9LAogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgaCgnc3BhbicsIFsKICAgICAgICAgICAgaChyZXNvbHZlQ29tcG9uZW50KCdJY29uJyksIHsKICAgICAgICAgICAgICB0eXBlOiAnaW9zLXBhcGVyLW91dGxpbmUnLAogICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogJzhweCcsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSksCiAgICAgICAgICAgIGgoJ3NwYW4nLCBkYXRhLnRpdGxlKSwKICAgICAgICAgIF0pLAogICAgICAgICAgaCgKICAgICAgICAgICAgJ3NwYW4nLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLAogICAgICAgICAgICAgICAgZmxvYXQ6ICdyaWdodCcsCiAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogJzMycHgnLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBoKHJlc29sdmVDb21wb25lbnQoJ0J1dHRvbicpLCB7CiAgICAgICAgICAgICAgICAuLi50aGlzLmJ1dHRvblByb3BzLAogICAgICAgICAgICAgICAgaWNvbjogJ2lvcy1hZGQnLAogICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ6ICc4cHgnLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHsKICAgICAgICAgICAgICAgICAgdGhpcy5hcHBlbmQoZGF0YSk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIGgocmVzb2x2ZUNvbXBvbmVudCgnQnV0dG9uJyksIHsKICAgICAgICAgICAgICAgIC4uLnRoaXMuYnV0dG9uUHJvcHMsCiAgICAgICAgICAgICAgICBpY29uOiAnaW9zLXJlbW92ZScsCiAgICAgICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB7CiAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKHJvb3QsIG5vZGUsIGRhdGEpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgXSwKICAgICAgICAgICksCiAgICAgICAgXSwKICAgICAgKTsKICAgIH0sCiAgICAvKioKICAgICAqIOS+p+i+ueagj+eCueWHu+S6i+S7tgogICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEKICAgICAqLwogICAgY2xpY2tEaXIoZGF0YSwgcm9vdCwgbm9kZSkgewogICAgICBsZXQgdGhhdCA9IHRoaXM7CiAgICAgIHRoYXQubmF2SXRlbSA9IGRhdGE7CiAgICAgIHRoYXQucGF0aG5hbWUgPSBkYXRhLnBhdGhuYW1lOwogICAgfSwKICAgIGFwcGVuZChkYXRhKSB7CiAgICAgIGNvbnN0IGNoaWxkcmVuID0gZGF0YS5jaGlsZHJlbiB8fCBbXTsKICAgICAgY2hpbGRyZW4ucHVzaCh7CiAgICAgICAgdGl0bGU6ICdhcHBlbmRlZCBub2RlJywKICAgICAgICBleHBhbmQ6IHRydWUsCiAgICAgIH0pOwogICAgICB0aGlzLiRzZXQoZGF0YSwgJ2NoaWxkcmVuJywgY2hpbGRyZW4pOwogICAgfSwKICAgIHJlbW92ZShyb290LCBub2RlLCBkYXRhKSB7CiAgICAgIGNvbnN0IHBhcmVudEtleSA9IHJvb3QuZmluZCgoZWwpID0+IGVsID09PSBub2RlKS5wYXJlbnQ7CiAgICAgIGNvbnN0IHBhcmVudCA9IHJvb3QuZmluZCgoZWwpID0+IGVsLm5vZGVLZXkgPT09IHBhcmVudEtleSkubm9kZTsKICAgICAgY29uc3QgaW5kZXggPSBwYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihkYXRhKTsKICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7CiAgICB9LAogICAgb25Nb3VzZU92ZXIocm9vdCwgbm9kZSwgZGF0YSwgZSwgZCkgewogICAgICBjb25zb2xlLmxvZyhyb290LCBub2RlLCBkYXRhKTsKICAgIH0sCiAgICAvLwogICAgb25EZWwobm9kZSkgewogICAgICBsZXQgbWV0aG9kID0gbm9kZS5jYXRlX2lkID8gcm91dGVEZWwgOiByb3V0ZUNhdGVEZWw7CiAgICAgIHRoaXMuJG1zZ2JveCh7CiAgICAgICAgdGl0bGU6ICfmj5DnpLonLAogICAgICAgIG1lc3NhZ2U6ICfliKDpmaTlkI7ml6Dms5XmgaLlpI3vvIzor7fnoa7orqTlkI7liKDpmaTvvIEnLAogICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsCiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ+WPlua2iCcsCiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfnoa7lrponLAogICAgICAgIGljb25DbGFzczogJ2VsLWljb24td2FybmluZycsCiAgICAgICAgY29uZmlybUJ1dHRvbkNsYXNzOiAnYnRuLWN1c3RvbS1jYW5jZWwnLAogICAgICB9KQogICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgIG1ldGhvZChub2RlLmlkKQogICAgICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgICAgICAgIG5vZGUucmVtb3ZlKCk7CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7CiAgICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihlcnIubXNnKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKCkgPT4ge30pOwogICAgfSwKCiAgICBvbkNoYW5nZU5hbWUocGFyYW1zKSB7CiAgICAgIGlmIChwYXJhbXMuZXZlbnRUeXBlID09ICdibHVyJykgewogICAgICAgIGxldCBkYXRhID0gewogICAgICAgICAgbmFtZTogcGFyYW1zLm5ld05hbWUsCiAgICAgICAgICBpZDogcGFyYW1zLmlkLAogICAgICAgIH07CiAgICAgICAgaW50ZXJmYWNlRWRpdE5hbWUoZGF0YSkKICAgICAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgICAgfSkKICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7CiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoZXJyLm1zZyk7CiAgICAgICAgICB9KTsKICAgICAgfQogICAgfSwKCiAgICBvbkFkZE5vZGUocGFyYW1zKSB7CiAgICAgIC8vIHRoaXMuJHJvdXRlci5wdXNoKHsKICAgICAgLy8gICBwYXRoOiAnL2FkbWluL3NldHRpbmcvc3lzdGVtX291dF9pbnRlcmZhY2UvYWRkJywKICAgICAgLy8gICBxdWVyeTogewogICAgICAvLyAgICAgcGlkOiBwYXJhbXMucGlkLAogICAgICAvLyAgIH0sCiAgICAgIC8vIH0pOwogICAgfSwKCiAgICBhZGROb2RlKCkgewogICAgICB2YXIgbm9kZSA9IG5ldyBUcmVlTm9kZSh7IG5hbWU6ICduZXcgbm9kZScsIGlzTGVhZjogZmFsc2UgfSk7CiAgICAgIGlmICghdGhpcy5kYXRhLmNoaWxkcmVuKSB0aGlzLmRhdGEuY2hpbGRyZW4gPSBbXTsKICAgICAgdGhpcy5kYXRhLmFkZENoaWxkcmVuKG5vZGUpOwogICAgfSwKCiAgICBnZXROZXdUcmVlKCkgewogICAgICB2YXIgdm0gPSB0aGlzOwogICAgICBmdW5jdGlvbiBfZGZzKG9sZE5vZGUpIHsKICAgICAgICB2YXIgbmV3Tm9kZSA9IHt9OwoKICAgICAgICBmb3IgKHZhciBrIGluIG9sZE5vZGUpIHsKICAgICAgICAgIGlmIChrICE9PSAnY2hpbGRyZW4nICYmIGsgIT09ICdwYXJlbnQnKSB7CiAgICAgICAgICAgIG5ld05vZGVba10gPSBvbGROb2RlW2tdOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKG9sZE5vZGUuY2hpbGRyZW4gJiYgb2xkTm9kZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7CiAgICAgICAgICBuZXdOb2RlLmNoaWxkcmVuID0gW107CiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gb2xkTm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykgewogICAgICAgICAgICBuZXdOb2RlLmNoaWxkcmVuLnB1c2goX2RmcyhvbGROb2RlLmNoaWxkcmVuW2ldKSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBuZXdOb2RlOwogICAgICB9CgogICAgICB2bS5uZXdUcmVlID0gX2Rmcyh2bS5kYXRhKTsKICAgIH0sCiAgfSwKfTsK"},null]}