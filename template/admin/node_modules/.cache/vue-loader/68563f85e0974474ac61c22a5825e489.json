{"remainingRequest":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/setting/systemOutInterface/debugging.vue?vue&type=style&index=1&id=50d9a348&lang=scss&scoped=true","dependencies":[{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/setting/systemOutInterface/debugging.vue","mtime":1719467759000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/css-loader/index.js","mtime":1746465018503},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1746465020031},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/postcss-loader/src/index.js","mtime":1746465019371},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/sass-loader/dist/cjs.js","mtime":1746465018452},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js","mtime":1746465019530}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jb250ZW50IHsKICBwYWRkaW5nOiAxMnB4OwogIC5oZWFkIHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgLml0ZW0gewogICAgICBkaXNwbGF5OiBmbGV4OwogICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICBtYXJnaW4tYm90dG9tOiAxMnB4OwogICAgICBmb250LXNpemU6IDE0cHg7CiAgICAgIC50aXRsZSB7CiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxNHB4OwogICAgICB9CiAgICB9CiAgfQp9Ci5jb3B5LWJ0biB7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IHJpZ2h0Owp9Cg=="},{"version":3,"sources":["debugging.vue"],"names":[],"mappings":";AAmbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"debugging.vue","sourceRoot":"src/pages/setting/systemOutInterface","sourcesContent":["<template>\n  <div class=\"content\" v-if=\"interfaceData\">\n    <div class=\"head\">\n      <el-input v-model=\"interfaceData.url\">\n        <template #prepend>\n          <el-select v-model=\"interfaceData.method\" style=\"width: 120px\">\n            <el-option v-for=\"(item, index) in requestTypeList\" :key=\"index\" :value=\"item.value\" :label=\"item.label\"></el-option>\n          </el-select>\n        </template>\n      </el-input>\n      <el-button class=\"ml20\" type=\"primary\" @click=\"requestData\">请求</el-button>\n      <el-button class=\"ml10 copy-btn\" type=\"success\" @click=\"insertCopy()\">复制</el-button>\n    </div>\n    <div class=\"params\">\n      <el-tabs class=\"mt10\" v-model=\"paramsType\" @tab-click=\"changeTab\">\n        <el-tab-pane label=\"Params\" name=\"Params\"> </el-tab-pane>\n        <el-tab-pane label=\"Body\" name=\"Body\"> </el-tab-pane>\n        <el-tab-pane label=\"Header\" name=\"Header\"> </el-tab-pane>\n      </el-tabs>\n      <div v-show=\"paramsType === 'Params'\">\n        <vxe-table\n          class=\"mt10\"\n          resizable\n          show-overflow\n          keep-source\n          ref=\"xTable\"\n          row-id=\"id\"\n          :print-config=\"{}\"\n          :export-config=\"{}\"\n          :tree-config=\"{ transform: true, rowField: 'id', parentField: 'parentId' }\"\n          :data=\"interfaceData.request_params\"\n        >\n          <vxe-column field=\"attribute\" width=\"150\" title=\"属性\" tree-node :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-input v-model=\"row.attribute\" type=\"text\"></vxe-input>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"value\" title=\"参数值\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-input v-model=\"row.value\" type=\"text\"></vxe-input>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"type\" title=\"类型\" width=\"120\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-select v-model=\"row.type\" transfer>\n                <vxe-option\n                  v-for=\"item in typeList\"\n                  :key=\"item.value\"\n                  :value=\"item.value\"\n                  :label=\"item.label\"\n                ></vxe-option>\n              </vxe-select>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"must\" title=\"必填\" width=\"50\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <span>{{ row.must == '1' ? '是' : '否' }}</span>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"trip\" width=\"150\" title=\"说明\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-input v-model=\"row.trip\" type=\"text\"></vxe-input>\n            </template>\n          </vxe-column>\n          <vxe-column title=\"操作\" width=\"120\">\n            <template #default=\"{ row }\">\n              <vxe-button type=\"text\" v-if=\"row.type === 'array'\" status=\"primary\" @click=\"insertRow(row, 'xTable')\"\n                >插入</vxe-button\n              >\n              <vxe-button type=\"text\" status=\"primary\" @click=\"removeRow(row, 'xTable')\">删除</vxe-button>\n            </template>\n          </vxe-column>\n        </vxe-table>\n        <el-button class=\"mt10\" type=\"primary\" @click=\"insertEvent('xTable')\">添加参数</el-button>\n      </div>\n      <div v-show=\"paramsType === 'Body'\">\n        <vxe-table\n          class=\"mt10\"\n          resizable\n          show-overflow\n          keep-source\n          ref=\"yTable\"\n          row-id=\"id\"\n          :print-config=\"{}\"\n          :export-config=\"{}\"\n          :tree-config=\"{ transform: true, rowField: 'id', parentField: 'parentId' }\"\n          :data=\"interfaceData.request_body\"\n        >\n          <vxe-column field=\"attribute\" width=\"150\" title=\"属性\" tree-node :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-input v-model=\"row.attribute\" type=\"text\"></vxe-input>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"value\" title=\"参数值\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-input v-model=\"row.value\" type=\"text\"></vxe-input>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"type\" title=\"类型\" width=\"120\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-select v-model=\"row.type\" transfer>\n                <vxe-option\n                  v-for=\"item in typeList\"\n                  :key=\"item.value\"\n                  :value=\"item.value\"\n                  :label=\"item.label\"\n                ></vxe-option>\n              </vxe-select>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"must\" title=\"必填\" width=\"50\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <span>{{ row.must == '1' ? '是' : '否' }}</span>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"trip\" title=\"说明\" width=\"150\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-input v-model=\"row.trip\" type=\"text\"></vxe-input>\n            </template>\n          </vxe-column>\n          <vxe-column title=\"操作\" width=\"120\">\n            <template #default=\"{ row }\">\n              <vxe-button type=\"text\" v-if=\"row.type === 'array'\" status=\"primary\" @click=\"insertRow(row, 'yTable')\"\n                >插入</vxe-button\n              >\n              <vxe-button type=\"text\" status=\"primary\" @click=\"removeRow(row, 'yTable')\">删除</vxe-button>\n            </template>\n          </vxe-column>\n        </vxe-table>\n        <el-button class=\"mt10\" type=\"primary\" @click=\"insertEvent('yTable')\">添加参数</el-button>\n      </div>\n      <div v-show=\"paramsType === 'Header'\">\n        <vxe-table\n          class=\"mt10\"\n          resizable\n          show-overflow\n          keep-source\n          ref=\"zTable\"\n          row-id=\"id\"\n          :print-config=\"{}\"\n          :export-config=\"{}\"\n          :tree-config=\"{ transform: true, rowField: 'id', parentField: 'parentId' }\"\n          :data=\"interfaceData.headerData\"\n        >\n          <vxe-column field=\"attribute\" width=\"300\" title=\"属性\" tree-node :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-input v-model=\"row.attribute\" type=\"text\"></vxe-input>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"value\" title=\"参数值\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-input v-model=\"row.value\" type=\"text\"></vxe-input>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"type\" title=\"类型\" width=\"200\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <vxe-select v-model=\"row.type\" transfer>\n                <vxe-option\n                  v-for=\"item in typeList\"\n                  :key=\"item.value\"\n                  :value=\"item.value\"\n                  :label=\"item.label\"\n                ></vxe-option>\n              </vxe-select>\n            </template>\n          </vxe-column>\n          <vxe-column title=\"操作\" width=\"100\">\n            <template #default=\"{ row }\">\n              <vxe-button type=\"text\" v-if=\"row.type === 'array'\" status=\"primary\" @click=\"insertRow(row, 'zTable')\"\n                >插入</vxe-button\n              >\n              <vxe-button type=\"text\" status=\"primary\" @click=\"removeRow(row, 'zTable')\">删除</vxe-button>\n            </template>\n          </vxe-column>\n        </vxe-table>\n        <el-button class=\"mt10\" type=\"primary\" @click=\"insertEvent('zTable')\">添加参数</el-button>\n        <h4 class=\"mt10 title\">全局Header参数</h4>\n        <vxe-table\n          class=\"mt10\"\n          resizable\n          show-overflow\n          keep-source\n          ref=\"zaTable\"\n          row-id=\"id\"\n          :print-config=\"{}\"\n          :export-config=\"{}\"\n          :tree-config=\"{ transform: true, rowField: 'id', parentField: 'parentId' }\"\n          :data=\"interfaceData.allHeaderData\"\n        >\n          <vxe-column field=\"attribute\" width=\"300\" title=\"属性\" tree-node :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <span>{{ row.attribute || '' }}</span>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"value\" title=\"参数值\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <span>{{ row.value || '' }}</span>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"type\" title=\"类型\" width=\"200\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <span>{{ row.type || '' }}</span>\n            </template>\n          </vxe-column>\n          <vxe-column field=\"trip\" title=\"说明\" :edit-render=\"{}\">\n            <template #default=\"{ row }\">\n              <span>{{ row.trip || '' }}</span>\n            </template>\n          </vxe-column>\n        </vxe-table>\n      </div>\n    </div>\n    <div class=\"res mt10 mb10\" v-if=\"codes\">\n      <MonacoEditor :codes=\"codes\" :readOnly=\"true\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport request from './request';\nimport MonacoEditor from './components/MonacoEditor.vue';\nfunction requestMethod(url, method, params, data, headerItem) {\n  return request({\n    url,\n    method,\n    params,\n    data,\n    headerItem,\n  });\n}\nexport default {\n  components: { MonacoEditor },\n  props: {\n    formValidate: {\n      type: Object,\n      default: () => {\n        return {};\n      },\n    },\n    requestTypeList: {\n      type: Array,\n      default: () => {\n        return [];\n      },\n    },\n    typeList: {\n      type: Array,\n      default: () => {\n        return [];\n      },\n    },\n  },\n  data() {\n    return {\n      interfaceData: undefined,\n      paramsType: 'Params',\n      editor: '', //当前编辑器对象\n      codes: '',\n    };\n  },\n  created() {\n    this.interfaceData = this.formValidate;\n    this.interfaceData.request_body = JSON.parse(JSON.stringify(this.interfaceData.request_params));\n  },\n  mounted() {},\n  methods: {\n    insertCopy() {\n      this.$copyText(this.codes)\n        .then((message) => {\n          this.$message.success('复制成功');\n        })\n        .catch((err) => {\n          this.$message.error('复制失败');\n        });\n    },\n    async requestData() {\n      let url, method, params, body, headers;\n      url = this.interfaceData.url;\n      method = this.interfaceData.method;\n      params = this.filtersData((await this.$refs.xTable.getTableData().tableData) || []);\n      body = this.filtersData((await this.$refs.yTable.getTableData().tableData) || []);\n      let h = this.filtersData((await this.$refs.zTable.getTableData().tableData) || []);\n      let h1 = this.filtersData((await this.$refs.zaTable.getTableData().tableData) || []);\n      headers = {\n        ...h,\n        ...h1,\n      };\n      requestMethod(url, method, params, body, headers)\n        .then((res) => {\n          this.codes = res + '';\n        })\n        .catch((err) => {\n          this.codes = JSON.stringify(err);\n        });\n    },\n    filtersData(arr) {\n      try {\n        let x = {};\n        arr.map((e) => {\n          if (!e.parentId) {\n            for (let i in e) {\n              if (i == 'attribute') {\n                if (e.type !== 'array') {\n                  x[e[i]] = e.value || '';\n                } else {\n                  let arr = [];\n                  e.children.map((item, index) => {\n                    arr[index] = this.filtersObj(item);\n                  });\n                  x[e[i]] = arr;\n                }\n              }\n            }\n          }\n        });\n        return x;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    filtersObj(obj) {\n      let x = {};\n      for (let i in obj) {\n        if (i == 'attribute') {\n          if (obj.type !== 'array') {\n            x[obj[i]] = obj.value || '';\n          } else {\n            let arr = [];\n            obj.children.map((item, index) => {\n              arr[index] = this.filtersObj(item);\n            });\n            x[obj[i]] = arr;\n          }\n        }\n      }\n      return x;\n    },\n    changeTab() {\n      if (this.paramsType === 'Header') {\n        if (!this.interfaceData.headerData) {\n          this.insertEvent('zTable', {\n            attribute: 'Content-Type',\n            value: 'application/x-www-form-urlencoded',\n          });\n          this.insertEvent('zaTable');\n        }\n      }\n    },\n    async insertEvent(type, d) {\n      const $table = this.$refs[type];\n      let newRow;\n      if (type == 'xTable') {\n        newRow = {\n          attribute: '',\n          type: 'string',\n          must: 0,\n          value: '',\n          trip: '',\n        };\n      } else if (type == 'yTable') {\n        newRow = {\n          attribute: '',\n          type: 'string',\n          value: '',\n          must: 0,\n          trip: '',\n        };\n      } else if (type == 'zTable') {\n        newRow = {\n          attribute: '',\n          type: '',\n          value: '',\n          trip: '',\n        };\n        newRow = { ...newRow, ...d };\n      } else if (type == 'zaTable') {\n        newRow = {\n          attribute: 'token',\n          type: 'string',\n          value: '',\n          must: 0,\n          trip: '',\n        };\n      } else {\n        newRow = {\n          code: '',\n          value: '',\n          solution: '',\n        };\n      }\n      const { row: data } = await $table.insertAt(newRow, -1);\n      await $table.setActiveCell(data, 'name');\n    },\n    async insertRow(currRow, type) {\n      const $table = this.$refs[type];\n      // 如果 null 则插入到目标节点顶部\n      // 如果 -1 则插入到目标节点底部\n      // 如果 row 则有插入到效的目标节点该行的位置\n      let record;\n      if (type == 'xTable') {\n        record = {\n          attribute: '',\n          type: 'string',\n          must: 0,\n          value: '',\n          trip: '',\n          id: Date.now(),\n          parentId: currRow.id, // 需要指定父节点，自动插入该节点中\n        };\n      } else {\n        record = {\n          code: '',\n          value: '',\n          solution: '',\n          id: Date.now(),\n          parentId: currRow.id, // 需要指定父节点，自动插入该节点中\n        };\n      }\n      const { row: newRow } = await $table.insertAt(record, -1);\n      await $table.setTreeExpand(currRow, true); // 将父节点展开\n      await $table.setActiveRow(newRow); // 插入子节点\n    },\n    async removeRow(row, type) {\n      const $table = this.$refs[type];\n      await $table.remove(row);\n    },\n  },\n};\n</script>\n<style>\n.vxe-select--panel.is--transfer {\n  z-index: 99999 !important;\n}\n</style>\n<style lang=\"scss\" scoped>\n.content {\n  padding: 12px;\n  .head {\n    display: flex;\n    align-items: center;\n    .item {\n      display: flex;\n      align-items: center;\n      margin-bottom: 12px;\n      font-size: 14px;\n      .title {\n        margin-right: 14px;\n      }\n    }\n  }\n}\n.copy-btn {\n  display: flex;\n  justify-content: right;\n}\n</style>\n"]}]}