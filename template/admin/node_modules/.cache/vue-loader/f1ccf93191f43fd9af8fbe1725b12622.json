{"remainingRequest":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/system/onlineUpgrade/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/src/pages/system/onlineUpgrade/index.vue","mtime":1719467759000},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/thread-loader/dist/cjs.js","mtime":1746465018446},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/babel-loader/lib/index.js","mtime":1746465024347},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/cache-loader/dist/cjs.js","mtime":1746465018509},{"path":"/Users/nieqianqian/Downloads/xinxiangmu/CRMEB/template/admin/node_modules/vue-loader/lib/index.js","mtime":1746465019530}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7CiAgdXBncmFkZUxpc3RBcGksCiAgdXBncmFkZVByb2dyZXNzQXBpLAogIHVwZ3JhZGVBZ3JlZW1lbnRBcGksCiAgdXBncmFkZVN0YXR1c0FwaSwKICB1cGdyYWRlTG9nTGlzdEFwaSwKICB1cGdyYWRlYWJsZUxpc3RBcGksCiAgZG93bmxvYWRBcGksCn0gZnJvbSAnQC9hcGkvc3lzdGVtJzsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IHsgQWNjb3VudExvZ291dCB9IGZyb20gJ0AvYXBpL2FjY291bnQnOwppbXBvcnQgeyBnZXRDb29raWVzLHJlbW92ZUNvb2tpZXN9IGZyb20gJ0AvbGlicy91dGlsJzsKCmltcG9ydCBTZXR0aW5nIGZyb20gJ0Avc2V0dGluZyc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnc3lzdGVtVXBncmFkZWNsaWVudCcsCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIFBhbmVsOiAnMScsCiAgICAgIGN1cnJlbnRUYWI6ICcxJywKICAgICAgZGVjbGFyYXRpb246IGZhbHNlLAogICAgICB1cGRhdGVNb2RhbDogZmFsc2UsCiAgICAgIG1vZGFsX2xvYWRpbmc6IGZhbHNlLAogICAgICBwZXJjZW50OiAwLAogICAgICBwYXJhbXM6IFtdLAogICAgICBhcnI6IFtdLAogICAgICBkeW5hbWljOiBmYWxzZSwKICAgICAgc3RhdHVzOiBmYWxzZSwKICAgICAgdmVyc2lvbjogJycsCiAgICAgIGZvcmNlVmVyc2lvbjogJycsCiAgICAgIGhlYWRlckxpc3Q6IFsKICAgICAgICB7CiAgICAgICAgICBsYWJlbDogJ+ezu+e7n+WNh+e6pycsCiAgICAgICAgICB2YWx1ZTogMSwKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIGxhYmVsOiAn5Y2H57qn6K6w5b2VJywKICAgICAgICAgIHZhbHVlOiAyLAogICAgICAgIH0sCiAgICAgIF0sCiAgICAgIHVwZ3JhZGVMaXN0OiBbXSwKICAgICAgdXBncmFkZUxvZ0xpc3Q6IFtdLAogICAgICB1cGdyYWRlYWJsZUxpc3Q6IFtdLAogICAgICB1cGdyYWRlUHJvZ3Jlc3M6IHsKICAgICAgICBzcGVlZDogMCwKICAgICAgfSwKICAgICAgdXBncmFkZUFncmVlbWVudDogW10sCiAgICAgIHVwZ3JhZGVTdGF0dXM6IHt9LAogICAgICBkb3dubG9hZFN0YXR1czogbnVsbCwKICAgICAgcGFnZTogMSwKICAgICAgbGltaXQ6IDE1LAogICAgICAvLyDlrprml7blmagKICAgICAgdGltZXI6IG51bGwsCiAgICAgIHBhcmFtc19rZXk6IHVuZGVmaW5lZCwKICAgICAgbmV3S2V5OiBudWxsLAogICAgICBzZXJ2aW9uU3RhdHVzOiBmYWxzZSwKICAgICAgY291bnQ6MAogICAgfTsKICB9LAogIGNyZWF0ZWQoKSB7CiAgICAvLyB0aGlzLmdldFVwZ3JhZGVMaXN0KCk7CiAgICAvLyB0aGlzLmdldFVwZ3JhZGVMb2dMaXN0KCk7CiAgICAvLyB0aGlzLmdldHVwZ3JhZGVhYmxlTGlzdCgpOwogICAgLy8gaWYgKHRoaXMuJHJvdXRlLnBhcmFtcy5pdGVtcykgewogICAgLy8gICB0aGlzLmdldFVwZ3JhZGVBZ3JlZW1lbnQoKTsKICAgIC8vIH0KICB9LAogIGFzeW5jIG1vdW50ZWQoKSB7CgogICAgdGhpcy5nZXRVcGdyYWRlU3RhdHVzKCk7CiAgICBhd2FpdCB0aGlzLmdldFVwZ3JhZGVMaXN0KCk7CiAgICBhd2FpdCB0aGlzLmdldHVwZ3JhZGVhYmxlTGlzdCgpOwogICAgaWYgKHRoaXMuJHN0b3JlLnN0YXRlLnVwZ3JhZGUudG9nZ2xlU3RhdHVzKSB7CiAgICAgIHRoaXMuc2VydmlvblN0YXR1cyA9IHRydWU7CiAgICAgIHRoaXMuZ2V0VXBncmFkZUFncmVlbWVudCgpOwogICAgfQogICAgLy8gdGhpcy5jb21wYXJlKCk7CiAgfSwKICB3YXRjaDogewogICAgJ3VwZ3JhZGVQcm9ncmVzcy5zcGVlZCc6IHsKICAgICAgaGFuZGxlcihuZXdWYWwsIG9sZFZhbCkgewogICAgICAgIGlmIChuZXdWYWwgPT09ICcxMDAuMCcpIHsKICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7CiAgICAgICAgfQogICAgICB9LAogICAgfSwKICAgIC8vICd0aGlzLmRvd25sb2FkU3RhdHVzJzogewogICAgLy8gICBoYW5kbGVyKG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAvLyAgICAgaWYgKG5ld1ZhbCA9ICcyMDAnKSB7CiAgICAvLyAgICAgICB0aGlzLnVwZGF0ZU1vZGFsID0gZmFsc2U7CiAgICAvLyAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpOwogICAgLy8gICAgIH0KICAgIC8vICAgfQogICAgLy8gfQogIH0sCiAgbWV0aG9kczogewogICAgaGFuZGxlUmVhY2hCb3R0b20oKXsKICAgICAgaWYodGhpcy5jb3VudCA9PT0gdGhpcy51cGdyYWRlTG9nTGlzdC5sZW5ndGgpIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLndhcm5pbmcoJ+aaguaXoOabtOWkmuWNh+e6p+iusOW9lScpCiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5nZXRVcGdyYWRlTG9nTGlzdCgpOwogICAgICB9CiAgICB9LAogICAgaGFuZGxlQ2xpY2soKSB7CiAgICAgIHRoaXMucGFnZSA9IDEKICAgICAgaWYodGhpcy5jdXJyZW50VGFiID09IDEpewogICAgICAgIHRoaXMuZ2V0dXBncmFkZWFibGVMaXN0KCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy51cGdyYWRlTG9nTGlzdCA9IFtdCiAgICAgICAgdGhpcy5nZXRVcGdyYWRlTG9nTGlzdCgpOwogICAgICB9CiAgICB9LAogICAgLy8g5Y2H57qn5YiX6KGoCiAgICBhc3luYyBnZXRVcGdyYWRlTGlzdCgpIHsKICAgICAgbGV0IGRhdGEgPSB7CiAgICAgICAgcGFnZTogdGhpcy5wYWdlLAogICAgICAgIGxpbWl0OiB0aGlzLmxpbWl0LAogICAgICB9OwogICAgICBsZXQgcmVzID0gYXdhaXQgdXBncmFkZUxpc3RBcGkoZGF0YSk7CiAgICAgIHRoaXMudXBncmFkZUxpc3QgPSByZXMuZGF0YS5saXN0OwogICAgICB0aGlzLnVwZ3JhZGVMaXN0ID0gcmVzLmRhdGEubGlzdDsKICAgIH0sCiAgICAvLyDljYfnuqforrDlvZUKICAgIGdldFVwZ3JhZGVMb2dMaXN0KCkgewogICAgICBsZXQgZGF0YSA9IHsKICAgICAgICBwYWdlOiB0aGlzLnBhZ2UsCiAgICAgICAgbGltaXQ6IHRoaXMubGltaXQsCiAgICAgIH07CiAgICAgIHVwZ3JhZGVMb2dMaXN0QXBpKGRhdGEpCiAgICAgICAgLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgdGhpcy51cGdyYWRlTG9nTGlzdCA9IFsuLi50aGlzLnVwZ3JhZGVMb2dMaXN0LC4uLnJlcy5kYXRhLmxpc3RdCiAgICAgICAgICB0aGlzLmNvdW50ID0gcmVzLmRhdGEuY291bnQKICAgICAgICAgIGlmKHRoaXMudXBncmFkZUxvZ0xpc3QubGVuZ3RoIDwgdGhpcy5jb3VudCl7CiAgICAgICAgICAgIHRoaXMucGFnZSsrCiAgICAgICAgICB9CiAgICAgICAgICBpZih0aGlzLmNvdW50ID09PSB0aGlzLnVwZ3JhZGVMb2dMaXN0Lmxlbmd0aCkgewogICAgICAgIHRoaXMuJG1lc3NhZ2Uud2FybmluZygn5pqC5peg5pu05aSa5Y2H57qn6K6w5b2VJykKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmdldFVwZ3JhZGVMb2dMaXN0KCk7CiAgICAgIH0KICAgICAgICB9KQogICAgICAgIC5jYXRjaCgocmVzKSA9PiB7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKHJlcy5tc2cpOwogICAgICAgIH0pOwogICAgfSwKCiAgICAvLyDlj6/ljYfnuqfliJfooagKICAgIGFzeW5jIGdldHVwZ3JhZGVhYmxlTGlzdCgpIHsKICAgICAgbGV0IHJlcyA9IGF3YWl0IHVwZ3JhZGVhYmxlTGlzdEFwaSgpOwogICAgICB0aGlzLnVwZ3JhZGVhYmxlTGlzdCA9IHJlcy5kYXRhOwogICAgICBsZXQgZmlyc3RWZXIgPSByZXMuZGF0YVswXQogICAgICBpZih0aGlzLiRzdG9yZS5zdGF0ZS51cGdyYWRlLnRvZ2dsZVN0YXR1cyB8fCB0aGlzLnVwZ3JhZGVTdGF0dXMuZm9yY2VfcmVtaW5kZXIpewogICAgICAgIGNvbnN0IGRhdGEgPSByZXMuZGF0YS5maW5kKGl0ZW0gPT4gaXRlbS5mb3JjZV9yZW1pbmRlciA9PT0gMSkKICAgICAgICB0aGlzLm5ld0tleSA9IGRhdGEucGFja2FnZV9rZXk7CiAgICAgICAgdGhpcy5mb3JjZVZlcnNpb24gPSBkYXRhLmZpcnN0X3ZlcnNpb24gKyAnLicgKyBkYXRhLnNlY29uZF92ZXJzaW9uICsgJy4nICsgZGF0YS50aGlyZF92ZXJzaW9uICsgJy4nICsgZGF0YS5mb3VydGhfdmVyc2lvbgogICAgICB9ZWxzZXsKICAgICAgICB0aGlzLnBhcmFtc19rZXkgPSB0aGlzLnVwZ3JhZGVhYmxlTGlzdFswXS5wYWNrYWdlX2tleQogICAgICAgIHRoaXMuZm9yY2VWZXJzaW9uID0gZmlyc3RWZXIuZmlyc3RfdmVyc2lvbiArICcuJyArIGZpcnN0VmVyLnNlY29uZF92ZXJzaW9uICsgJy4nICsgZmlyc3RWZXIudGhpcmRfdmVyc2lvbiArICcuJyArIGZpcnN0VmVyLmZvdXJ0aF92ZXJzaW9uCiAgICAgIH0KCgogICAgICAvLyBhcnIuZm9yRWFjaCgoaXRlbSkgPT4gewogICAgICAvLyAgIHRoaXMuJHNldCgKICAgICAgLy8gICAgIGl0ZW0sCiAgICAgIC8vICAgICAnc2VydmlvbicsCiAgICAgIC8vICAgICBpdGVtLmZpcnN0X3ZlcnNpb24gKyAnLicgKyBpdGVtLnNlY29uZF92ZXJzaW9uICsgJy4nICsgaXRlbS50aGlyZF92ZXJzaW9uICsgJy4nICsgaXRlbS5mb3VydGhfdmVyc2lvbiwKICAgICAgLy8gICApOwogICAgICAvLyB9KTsKCiAgICAgIC8vIGxldCBkYXRhID0gW107CiAgICAgIC8vIGFyci5tYXAoKGVsZSkgPT4gewogICAgICAvLyAgIGRhdGEucHVzaChlbGUuc2Vydmlvbik7CiAgICAgIC8vIH0pOwogICAgICAvLyAvLyDniYjmnKzlj7fmjpLluo8KICAgICAgLy8gZnVuY3Rpb24gc29ydFZlcnNpb24obGlzdCkgewogICAgICAvLyAgIHJldHVybiBsaXN0LnNvcnQoKHZlcnNpb24xLCB2ZXJzaW9uMikgPT4gewogICAgICAvLyAgICAgY29uc3QgYXJyMSA9IHZlcnNpb24xLnNwbGl0KCcuJykubWFwKChlKSA9PiBlICogMSk7CiAgICAgIC8vICAgICBjb25zdCBhcnIyID0gdmVyc2lvbjIuc3BsaXQoJy4nKS5tYXAoKGUpID0+IGUgKiAxKTsKICAgICAgLy8gICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWF4KGFycjEubGVuZ3RoLCBhcnIyLmxlbmd0aCk7CiAgICAgIC8vICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgIC8vICAgICAgIGlmICgoYXJyMVtpXSB8fCAwKSA+IChhcnIyW2ldIHx8IDApKSByZXR1cm4gMTsKICAgICAgLy8gICAgICAgaWYgKChhcnIxW2ldIHx8IDApIDwgKGFycjJbaV0gfHwgMCkpIHJldHVybiAtMTsKICAgICAgLy8gICAgIH0KICAgICAgLy8gICAgIHJldHVybiAwOwogICAgICAvLyAgIH0pOwogICAgICAvLyB9CiAgICAgIC8vIHRoaXMuZm9yY2VWZXJzaW9uID0gZGF0YVswXTsKICAgICAgLy8gdGhpcy5wYXJhbXMubWFwKChpdGVtKSA9PiB7CiAgICAgIC8vICAgaWYgKGl0ZW0uc2VydmlvbiA9PSBkYXRhW2RhdGEubGVuZ3RoIC0gMV0pIHsKICAgICAgLy8gICAgIHRoaXMubmV3S2V5ID0gaXRlbS5wYWNrYWdlX2tleTsKICAgICAgLy8gICB9CiAgICAgIC8vIH0pOwogICAgfSwKICAgIC8vIOS4i+i9veWNh+e6p+WMhQogICAgZ2V0ZG93bmxvYWQoKSB7CiAgICAgIGlmICh0aGlzLiRzdG9yZS5zdGF0ZS51cGdyYWRlLnRvZ2dsZVN0YXR1cyB8fCB0aGlzLnVwZ3JhZGVTdGF0dXMuZm9yY2VfcmVtaW5kZXIpIHsKICAgICAgICB0aGlzLnBhcmFtc19rZXkgPSB0aGlzLm5ld0tleTsKICAgICAgfQogICAgICBkb3dubG9hZEFwaSh0aGlzLnBhcmFtc19rZXkpCiAgICAgICAgLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgLy8gdGhpcy5kb3dubG9hZFN0YXR1cyA9IHJlcy5zdGF0dXM7CiAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PSAyMDApIHsKICAgICAgICAgICAgaWYgKHRoaXMudXBncmFkZVByb2dyZXNzLnNwZWVkICE9PSAnMTAwLjAnKSB7CiAgICAgICAgICAgICAgdGhpcy50aW1lciA9IHNldEludGVydmFsKCgpID0+IHsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0VXBncmFkZVByb2dyZXNzKCk7CiAgICAgICAgICAgICAgICB9LCAwKTsKICAgICAgICAgICAgICB9LCA1MDAwKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpOwogICAgICAgICAgICAgIHRoaXMudXBkYXRlTW9kYWwgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy51cGRhdGVNb2RhbCA9IGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChlcnIpID0+IHsKICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7CiAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfkuIvovb3nu4jmraInKTsKICAgICAgICAgIHRoaXMudXBkYXRlTW9kYWwgPSBmYWxzZTsKICAgICAgICB9KTsKICAgIH0sCiAgICBkb3dubG9hZEZpbGUodXJsKXsKICAgICAgd2luZG93Lm9wZW4odXJsLCAnX2JsYW5rJyk7CiAgICB9LAoKICAgIC8vIOWNh+e6p+i/m+W6pgogICAgZ2V0VXBncmFkZVByb2dyZXNzKCkgewogICAgICB1cGdyYWRlUHJvZ3Jlc3NBcGkoKQogICAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICAgIHRoaXMudXBncmFkZVByb2dyZXNzID0gcmVzLmRhdGE7CiAgICAgICAgICB0aGlzLmRvd25sb2FkU3RhdHVzID0gcmVzLnN0YXR1czsKICAgICAgICB9KQogICAgICAgIC5jYXRjaCgocmVzKSA9PiB7CiAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpOwogICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgICB9KTsKICAgIH0sCiAgICAvLyDljYfnuqfljY/orq4KICAgIGdldFVwZ3JhZGVBZ3JlZW1lbnQoKSB7CiAgICAgIHVwZ3JhZGVBZ3JlZW1lbnRBcGkoKQogICAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICAgIHRoaXMudXBncmFkZUFncmVlbWVudCA9IHJlcy5kYXRhOwogICAgICAgICAgdGhpcy5kZWNsYXJhdGlvbiA9IHRydWU7CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKHJlcykgPT4gewogICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKICAgICAgICB9KTsKICAgIH0sCiAgICAvLyDljYfnuqfnirbmgIEKICAgIGdldFVwZ3JhZGVTdGF0dXMoKSB7CiAgICAgIHVwZ3JhZGVTdGF0dXNBcGkoKQogICAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICAgIHRoaXMudXBncmFkZVN0YXR1cyA9IHJlcy5kYXRhOwogICAgICAgICAgaWYocmVzLmRhdGEuZm9yY2VfcmVtaW5kZXIpewogICAgICAgICAgICB0aGlzLmRlY2xhcmF0aW9uID0gdHJ1ZQogICAgICAgICAgICB0aGlzLmdldFVwZ3JhZGVBZ3JlZW1lbnQoKQogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChyZXMpID0+IHsKICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IocmVzLm1zZyk7CiAgICAgICAgfSk7CiAgICB9LAogICAgLy8g56uL5Y2z5pu05pawCiAgICB1cGRhdGUoaXRlbSkgewogICAgICB0aGlzLmRlY2xhcmF0aW9uID0gdHJ1ZTsKICAgICAgaWYgKGl0ZW0gJiYgdGhpcy4kc3RvcmUuc3RhdGUudXBncmFkZS50b2dnbGVTdGF0dXMgPT0gZmFsc2UpIHsKICAgICAgICB0aGlzLnBhcmFtc19rZXkgPSBpdGVtLnBhcmFtc19rZXk7CiAgICAgIH0KICAgICAgLy8gdGhpcy52ZXJzaW9uID0gaXRlbS5maXJzdF92ZXJzaW9uICsgIi4iICsgaXRlbS5zZWNvbmRfdmVyc2lvbiArICIuIiArIGl0ZW0udGhpcmRfdmVyc2lvbiArICIuIiArIGl0ZW0uZm91cnRoX3ZlcnNpb247CiAgICAgIHRoaXMuZ2V0VXBncmFkZUFncmVlbWVudCgpOwogICAgfSwKICAgIC8vIOavlOi+g+ebuOWQjOeJiOacrOWPtwogICAgY29tcGFyZSgpIHsKICAgICAgdGhpcy51cGdyYWRlTGlzdC5tYXAoKGVsZSwgaSkgPT4gewogICAgICAgIHRoaXMuJHNldCgKICAgICAgICAgIHRoaXMudXBncmFkZUxpc3RbaV0sCiAgICAgICAgICAnbW4nLAogICAgICAgICAgZWxlLmZpcnN0X3ZlcnNpb24gKyBlbGUuc2Vjb25kX3ZlcnNpb24gKyBlbGUudGhpcmRfdmVyc2lvbiArIGVsZS5mb3VydGhfdmVyc2lvbiwKICAgICAgICApOwoKICAgICAgICB0aGlzLnVwZ3JhZGVhYmxlTGlzdC5tYXAoKGl0ZW0sIGkpID0+IHsKICAgICAgICAgIHRoaXMuJHNldCgKICAgICAgICAgICAgdGhpcy51cGdyYWRlYWJsZUxpc3RbaV0sCiAgICAgICAgICAgICdtbicsCiAgICAgICAgICAgIGl0ZW0uZmlyc3RfdmVyc2lvbiArIGl0ZW0uc2Vjb25kX3ZlcnNpb24gKyBpdGVtLnRoaXJkX3ZlcnNpb24gKyBpdGVtLmZvdXJ0aF92ZXJzaW9uLAogICAgICAgICAgKTsKICAgICAgICB9KTsKICAgICAgICBpZiAodGhpcy51cGdyYWRlTGlzdFtpXS5tbiA9PSB0aGlzLnVwZ3JhZGVhYmxlTGlzdFtpXS5tbikgewogICAgICAgICAgdGhpcy4kc2V0KHRoaXMudXBncmFkZUxpc3RbaV0sICdpbmRleG4nLCB0cnVlKTsKICAgICAgICAgIHRoaXMuJHNldCh0aGlzLnVwZ3JhZGVMaXN0W2ldLCAncGFyYW1zX2tleScsIHRoaXMudXBncmFkZWFibGVMaXN0W2ldLnBhY2thZ2Vfa2V5KTsKICAgICAgICAgIHRoaXMuJHNldCh0aGlzLnVwZ3JhZGVhYmxlTGlzdFtpXSwgJ2luZGV4bicsIHRydWUpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgLy8g5ZCM5oSPCiAgICBhZ3JlZSgpIHsKICAgICAgdGhpcy5kZWNsYXJhdGlvbiA9IGZhbHNlOwogICAgICB0aGlzLnVwZGF0ZU1vZGFsID0gdHJ1ZTsKICAgICAgdGhpcy5nZXRkb3dubG9hZCgpOwogICAgICB0aGlzLiRzdG9yZS5jb21taXQoInVwZ3JhZGUvVE9HR0xFX1NUQVRVUyIsZmFsc2UpCiAgICB9LAogICAgcmVqZWN0KCl7CiAgICAgIHRoaXMuZGVjbGFyYXRpb24gPSBmYWxzZQogICAgICB0aGlzLiRzdG9yZS5jb21taXQoInVwZ3JhZGUvVE9HR0xFX1NUQVRVUyIsZmFsc2UpCiAgICB9LAogICAgYmFjaygpIHsKICAgICAgdGhpcy51cGRhdGVNb2RhbCA9IGZhbHNlOwogICAgICAvLyB0aGlzLmdldFVwZ3JhZGVMaXN0KCk7CiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7CiAgICAgIEFjY291bnRMb2dvdXQoKQogICAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uuc3VjY2Vzcygn5oKo5bey5oiQ5Yqf6YCA5Ye6Jyk7CiAgICAgICAgICB0aGlzLiRyb3V0ZXIucmVwbGFjZSh0aGlzLiRyb3V0ZVByb1N0ciArICcvbG9naW4nKTsKICAgICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpOwogICAgICAgICAgcmVtb3ZlQ29va2llcygndG9rZW4nKTsKICAgICAgICAgIHJlbW92ZUNvb2tpZXMoJ2V4cGlyZXNfdGltZScpOwogICAgICAgICAgcmVtb3ZlQ29va2llcygndXVpZCcpOwogICAgICAgICAgLy8gd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpCiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKHJlcykgPT4ge30pOwogICAgfSwKICAgIGJhY2tTdXJlKCkgewogICAgICB0aGlzLnVwZGF0ZU1vZGFsID0gZmFsc2U7CiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7CiAgICB9LAogICAgY2FuY2VsKCkgewogICAgICB0aGlzLnVwZGF0ZU1vZGFsID0gZmFsc2U7CiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcik7CiAgICB9LAogICAgLy8g5a+85Ye65aSH5Lu95paH5Lu2CiAgICBleHBvcnRzKGl0ZW0pIHsKICAgICAgbGV0IG5hbWUgPQogICAgICAgIGl0ZW0udGl0bGUgKwogICAgICAgICd2JyArCiAgICAgICAgaXRlbS5maXJzdF92ZXJzaW9uICsKICAgICAgICAnLicgKwogICAgICAgIGl0ZW0uc2Vjb25kX3ZlcnNpb24gKwogICAgICAgICcuJyArCiAgICAgICAgaXRlbS50aGlyZF92ZXJzaW9uICsKICAgICAgICAnLicgKwogICAgICAgIGl0ZW0uZm91cnRoX3ZlcnNpb24gKwogICAgICAgICcuJyArCiAgICAgICAgaXRlbS51cGdyYWRlX3RpbWU7CiAgICAgIGxldCBocmVmID0gU2V0dGluZy5hcGlCYXNlVVJMICsgYC9zeXN0ZW0vdXBncmFkZV9leHBvcnQvJHtpdGVtLmlkfS9maWxlYDsKICAgICAgYXhpb3MoewogICAgICAgIG1ldGhvZDogJ2dldCcsCiAgICAgICAgdXJsOiBocmVmLAogICAgICAgIHJlc3BvbnNlVHlwZTogJ2Jsb2InLAogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICdBdXRob3JpLXphdGlvbic6ICdCZWFyZXIgJyArIGdldENvb2tpZXMoJ3Rva2VuJyksCiAgICAgICAgfSwKICAgICAgfSkudGhlbigocmVzKSA9PiB7CiAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbcmVzLmRhdGFdLCB7CiAgICAgICAgICB0eXBlOiAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtO2NoYXJzZXQ9VVRGLTgnLAogICAgICAgIH0pOwogICAgICAgIHZhciBkb3dubG9hZEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CiAgICAgICAgLy8g5LiL6L2955qE5paH5Lu25ZCNCiAgICAgICAgZG93bmxvYWRFbGVtZW50LmRvd25sb2FkID0gYCR7bmFtZX0uemlwYDsKICAgICAgICAvLyDliJvlu7rkuIvovb3nmoTpk77mjqUKICAgICAgICBkb3dubG9hZEVsZW1lbnQuaHJlZiA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpOwogICAgICAgIC8vIOeCueWHu+S4i+i9vQogICAgICAgIGRvd25sb2FkRWxlbWVudC5jbGljaygpOwogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG93bmxvYWRFbGVtZW50KTsKICAgICAgICAvLyDkuIvovb3lrozmiJDnp7vpmaTlhYPntKAKICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGRvd25sb2FkRWxlbWVudCk7CiAgICAgICAgLy8g6YeK5pS+5o6JYmxvYuWvueixoQogICAgICAgIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKGRvd25sb2FkRWxlbWVudC5ocmVmKTsKICAgICAgfSk7CiAgICB9LAogICAgaGFuZGxlRG93bmxvYWQoaXRlbSkgewogICAgICBsZXQgbmFtZSA9CiAgICAgICAgaXRlbS50aXRsZSArCiAgICAgICAgJ3YnICsKICAgICAgICBpdGVtLmZpcnN0X3ZlcnNpb24gKwogICAgICAgICcuJyArCiAgICAgICAgaXRlbS5zZWNvbmRfdmVyc2lvbiArCiAgICAgICAgJy4nICsKICAgICAgICBpdGVtLnRoaXJkX3ZlcnNpb24gKwogICAgICAgICcuJyArCiAgICAgICAgaXRlbS5mb3VydGhfdmVyc2lvbiArCiAgICAgICAgJy4nICsKICAgICAgICBpdGVtLnVwZ3JhZGVfdGltZTsKICAgICAgbGV0IGhyZWYgPSBTZXR0aW5nLmFwaUJhc2VVUkwgKyBgL3N5c3RlbS91cGdyYWRlX2V4cG9ydC8ke2l0ZW0uaWR9L2RhdGFgOwogICAgICBheGlvcyh7CiAgICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgICB1cmw6IGhyZWYsCiAgICAgICAgcmVzcG9uc2VUeXBlOiAnYmxvYicsCiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgJ0F1dGhvcmktemF0aW9uJzogJ0JlYXJlciAnICsgZ2V0Q29va2llcygndG9rZW4nKSwKICAgICAgICB9LAogICAgICB9KS50aGVuKChyZXMpID0+IHsKICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtyZXMuZGF0YV0sIHsKICAgICAgICAgIHR5cGU6ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07Y2hhcnNldD1VVEYtOCcsCiAgICAgICAgfSk7CiAgICAgICAgdmFyIGRvd25sb2FkRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgICAgICAvLyDkuIvovb3nmoTmlofku7blkI0KICAgICAgICBkb3dubG9hZEVsZW1lbnQuZG93bmxvYWQgPSBgJHtuYW1lfS5nemA7CiAgICAgICAgLy8g5Yib5bu65LiL6L2955qE6ZO+5o6lCiAgICAgICAgZG93bmxvYWRFbGVtZW50LmhyZWYgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTsKICAgICAgICAvLyDngrnlh7vkuIvovb0KICAgICAgICBkb3dubG9hZEVsZW1lbnQuY2xpY2soKTsKICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvd25sb2FkRWxlbWVudCk7CiAgICAgICAgLy8g5LiL6L295a6M5oiQ56e76Zmk5YWD57SgCiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkb3dubG9hZEVsZW1lbnQpOwogICAgICAgIC8vIOmHiuaUvuaOiWJsb2Llr7nosaEKICAgICAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTChkb3dubG9hZEVsZW1lbnQuaHJlZik7CiAgICAgIH0pOwogICAgfSwKICAgIHF1ZWFyeUV2ZWFyKGlkLCBpbmRleCkgewogICAgICB0aGlzLmR5bmFtaWMgPSBpbmRleDsKICAgIH0sCiAgfSwKICBkZXN0cm95ZWQoKSB7CiAgICAvL+mUgOavgQogICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTsKICB9LAp9Owo="},null]}